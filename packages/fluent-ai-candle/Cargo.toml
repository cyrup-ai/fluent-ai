[package]
name = "fluent_ai_candle"
version = "0.1.0"
edition = "2024"
description = "High-performance candle integration for fluent-ai completion system"
license = "MIT OR Apache-2.0"

[dependencies]
fluent_ai_async = { package = "fluent-ai-async", version = "0.1.0", path = "../fluent-ai-async" }
fluent-ai-workspace-hack = { path = "../../workspace-hack" }

# ProgressHub core components
progresshub-client-selector = { path = "../../../progresshub/client_selector" }
progresshub-client-xet = { path = "../../../progresshub/client_xet" }
progresshub-client-quic = { path = "../../../progresshub/client_quic" }
progresshub-progress = { path = "../../../progresshub/progress" }
progresshub-config = { path = "../../../progresshub/config" }

# XET core dependencies
cas_client = { path = "../../../progresshub/forks/xet-core/cas_client" }
cas_types = { path = "../../../progresshub/forks/xet-core/cas_types" }
cas_object = { path = "../../../progresshub/forks/xet-core/cas_object" }
merklehash = { path = "../../../progresshub/forks/xet-core/merklehash" }
utils = { path = "../../../progresshub/forks/xet-core/utils", package = "utils" }

# Channel communication
flume = "0.11"
yyaml = { git = "https://github.com/cyrup-ai/yyaml", branch = "main"}

# Async utilities (pin-project for AsyncStream adapters)
pin-project = "1.1"
futures-util = "0.3.31"
termcolor = "1.4.1"

# Candle dependencies (optional, enabled by features)
candle-core = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-nn = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-transformers = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-flash-attn = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false, optional = true }
candle-onnx = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false, optional = true }
candle-datasets = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false, optional = true }

# — Optional acceleration dependencies —
half = { version = "2.6.0", optional = true }
rubato     = { version = "1.0.0-preview.0", optional = true }                                                 # FFT resampler
symphonia = { version = "0.5.4", optional = true }
image = { version = "0.25.6", optional = true }
palette = { version = "0.7.6", optional = true }
enterpolation = { version = "0.3.0", optional = true }
tokenizers = "0.21.2"  # Required for tokenizer functionality
safetensors = "0.6.0"  # Required for model loading
bincode = { version = "1.3", optional = true }
rkyv = { version = "0.8", optional = true }
dioxus = { git = "https://github.com/DioxusLabs/dioxus", branch = "main", optional = true }
js-sys = { version = "0.3.77", optional = true }
wasm-bindgen = { version = "0.2.100", optional = true }
gloo-timers = { version = "0.3", optional = true, features = ["futures"] }
cpal = { version = "0.16.0", optional = true }


# Zero-allocation data structures
arrayvec = "0.7.6"
arraystring = "0.3.0"
smallvec = { version = "2.0.0-alpha.11", features = ["serde"] }

# Lock-free concurrency
crossbeam = "0.8.4"
crossbeam-channel = "0.5.15"
crossbeam-skiplist = "0.1.3"
crossbeam-utils = "0.8.21"
arc-swap = "1.7.1"

# Performance optimizations
memmap2 = "0.9.7"
wide = "0.7.33"
parking_lot = "0.12.4"

# SIMD operations using wide crate instead

# Async runtime
tokio = { version = "1.46.1", features = ["full"] }
tokio-stream = "0.1.16"

# Random number generation
fastrand = "2.3.0"
rand = "0.9.2"

# Serialization
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.141"
toml = "0.9.2"
md5 = "0.8.0"
glob = "0.3.2"

# Error handling
thiserror = "2.0.12"
anyhow = "1.0.98"

# System directories
dirs = "6.0.0"

# HTTP client
reqwest = { version = "0.12", features = ["json", "stream"] }

# Additional utilities
once_cell = "1.21.3"

# Logging
tracing = "0.1.41"

# Security
zeroize = "1.8.1"

# local shared ML dependencies
fluent_ai_http3 = { path = "../http3" }
fluent-ai-simd = { path = "../fluent-ai-simd" }

sha2 = "0.10.9"
httpdate = "1.0.3"
regex = "1.11.1"
crossbeam-queue = "0.3.12"
uuid = "1.17.0"
base64 = "0.22.1"
atomic-counter = "1.0.1"
ahash = "0.8.12"
dashmap = "6.1.0"
strsim = "0.11.1"
log = "0.4.27"
chrono = "0.4.41"
lz4 = "1.28.1"
futures = "0.3.31"
semver = "1.0.26"


[features]
default = ["microphone", "metal"]  # macOS-optimized defaults with Metal acceleration
# --- Candle backend features (required for all candle crates) -----
cuda = ["candle-core/cuda", "candle-nn/cuda", "dep:cudarc", "dep:half", "dep:bindgen_cuda", "candle-transformers/cuda"]
cudnn = ["candle-core/cudnn", "candle-nn/cudnn", "candle-transformers/cudnn"]
metal = ["candle-core/metal", "candle-nn/metal", "candle-transformers/metal"]
accelerate = ["dep:accelerate-src", "candle-core/accelerate", "candle-nn/accelerate", "candle-transformers/accelerate"]
mkl = ["dep:intel-mkl-src", "candle-core/mkl", "candle-nn/mkl", "candle-transformers/mkl"]
flash-attn = ["cuda", "dep:candle-flash-attn", "candle-transformers/flash-attn"]
nccl = ["cuda", "cudarc/nccl", "dep:half"]
onnx = ["dep:candle-onnx"]
# Serialization features
bincode-serialization = ["dep:bincode"]
rkyv-serialization = ["dep:rkyv"]
# UI features
ui = ["dioxus", "js-sys", "wasm-bindgen", "gloo-timers"]

# Audio processing features
microphone = ["dep:cpal", "dep:rubato"]
encodec = ["dep:cpal", "dep:symphonia", "dep:rubato"]
mimi = ["dep:cpal", "dep:symphonia", "dep:rubato"]
snac = ["dep:cpal", "dep:symphonia", "dep:rubato"]
depth_anything_v2 = ["dep:palette", "dep:enterpolation"]

# OS-specific acceleration dependencies
[target.'cfg(all(target_os = "linux", target_arch = "x86_64"))'.dependencies]
cudarc = { version = "0.16.6", optional = true, default-features = false, features = ["cublas", "cublaslt", "cudnn", "curand", "dynamic-linking", "f16", "std"] }
intel-mkl-src = { version = "0.8.1", optional = true }
bindgen_cuda = { version = "0.1.5", optional = true }

[target.'cfg(all(target_os = "windows", target_arch = "x86_64"))'.dependencies]
cudarc = { version = "0.16.6", optional = true, default-features = false, features = ["cublas", "cublaslt", "cudnn", "curand", "dynamic-linking", "f16", "std"] }
intel-mkl-src = { version = "0.8.1", optional = true }
bindgen_cuda = { version = "0.1.5", optional = true }

[target.'cfg(target_os = "macos")'.dependencies]
accelerate-src = { version = "0.3.2", optional = true }



[dev-dependencies]
criterion = "0.6.0"
tempfile = "3.20.0"
