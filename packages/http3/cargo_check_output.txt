    Checking fluent_ai_http3 v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/http3)
warning: unused import: `MessageChunk as CyrupMessageChunk`
  --> packages/http3/src/builder/core.rs:10:43
   |
10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `stream_future::StreamFuture`
   --> packages/http3/src/hyper/mod.rs:294:5
    |
294 | use stream_future::StreamFuture;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `AsyncStream` and `spawn_task`
  --> packages/http3/src/hyper/async_impl/client.rs:11:23
   |
11 | use fluent_ai_async::{AsyncStream, emit, spawn_task};
   |                       ^^^^^^^^^^^        ^^^^^^^^^^

warning: unused import: `crate::response::HttpResponseChunk`
  --> packages/http3/src/hyper/async_impl/client.rs:32:5
   |
32 | use crate::response::HttpResponseChunk;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::response::Response`
  --> packages/http3/src/hyper/async_impl/client.rs:42:5
   |
42 | use super::response::Response;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::hyper::connect::HttpConnector`
  --> packages/http3/src/hyper/async_impl/client.rs:57:5
   |
57 | use crate::hyper::connect::HttpConnector;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `h3::error::ConnectionError`
    --> packages/http3/src/hyper/async_impl/client.rs:2406:17
     |
2406 |             use h3::error::ConnectionError;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Empty`
  --> packages/http3/src/hyper/async_impl/decoder.rs:13:31
   |
13 | use http_body_util::{BodyExt, Empty};
   |                               ^^^^^

warning: unused import: `wrappers::TupleWrapper`
  --> packages/http3/src/hyper/async_impl/h3_client/connect.rs:15:5
   |
15 |     wrappers::TupleWrapper,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:4:5
  |
4 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `log::debug`
 --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:6:5
  |
6 | use log::debug;
  |     ^^^^^^^^^^

warning: unused imports: `BoxError`, `Error`, and `Kind`
 --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:8:27
  |
8 | use crate::hyper::error::{BoxError, Error, Kind};
  |                           ^^^^^^^^  ^^^^^  ^^^^

warning: unused import: `crate::response::HttpResponseChunk`
 --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:9:5
  |
9 | use crate::response::HttpResponseChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `spawn_task`
 --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:6:42
  |
6 | use fluent_ai_async::{AsyncStream, emit, spawn_task};
  |                                          ^^^^^^^^^^

warning: unused import: `crate::response::HttpResponseChunk`
  --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:19:5
   |
19 | use crate::response::HttpResponseChunk;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `fluent_ai_async::prelude::*`
 --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:7:5
  |
7 | use fluent_ai_async::prelude::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `bytes::Bytes`
 --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:9:5
  |
9 | use bytes::Bytes;
  |     ^^^^^^^^^^^^

warning: unused import: `Response`
  --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:12:21
   |
12 | use http::{Request, Response};
   |                     ^^^^^^^^

warning: unused import: `http_body::Body as HttpBody`
  --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:14:5
   |
14 | use http_body::Body as HttpBody;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::hyper::async_impl::body::Body as ResponseBody`
  --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:18:5
   |
18 | use crate::hyper::async_impl::body::Body as ResponseBody;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Error` and `self`
  --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:19:27
   |
19 | use crate::hyper::error::{self, BoxError, Error, Kind};
   |                           ^^^^            ^^^^^

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
  --> packages/http3/src/hyper/async_impl/response.rs:16:1
   |
16 | impl MessageChunk for String {
   | ^^^^^^^^^^^^^^^^^^^^^^------
   |                       |
   |                       `std::string::String` is not defined in the current crate
   |
   = note: impl doesn't have any local type before any uncovered type parameters
   = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
   = note: define and implement a trait or new type instead

error[E0046]: not all trait items implemented, missing: `is_closed`, `as_any`
    --> packages/http3/src/hyper/connect.rs:1846:9
     |
1123 |     fn is_closed(&self) -> bool;
     |     ---------------------------- `is_closed` from trait
1124 |     fn as_any(&self) -> &dyn std::any::Any;
     |     --------------------------------------- `as_any` from trait
...
1846 |         impl ConnectionTrait for NullConnection {
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `is_closed`, `as_any` in implementation

error[E0782]: expected a type, found a trait
   --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:266:48
    |
266 |     pub fn execute_request(&self, req: Request<Body>) -> AsyncStream<HttpResponseChunk> {
    |                                                ^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
266 |     pub fn execute_request(&self, req: Request<dyn Body>) -> AsyncStream<HttpResponseChunk> {
    |                                                +++

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/body.rs:599:17
    |
598 |                 handle_error!("Body streaming timeout exceeded", "data stream conversion");
    |                 -------------------------------------------------------------------------- any code following this expression is unreachable
599 |                 break;
    |                 ^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/body.rs:645:25
    |
644 |                         handle_error!("Chunk timeout exceeded", "body frame polling");
    |                         ------------------------------------------------------------- any code following this expression is unreachable
645 |                         break;
    |                         ^^^^^^ unreachable statement

warning: unreachable statement
    --> packages/http3/src/hyper/async_impl/client.rs:2058:21
     |
2057 |                     handle_error!(crate::hyper::error::url_invalid_uri(url), "URI conversion");
     |                     -------------------------------------------------------------------------- any code following this expression is unreachable
2058 |                     return;
     |                     ^^^^^^^ unreachable statement

warning: unreachable statement
    --> packages/http3/src/hyper/async_impl/client.rs:2083:21
     |
2082 |                     handle_error!(crate::error::request(e), "request building");
     |                     ----------------------------------------------------------- any code following this expression is unreachable
2083 |                     return;
     |                     ^^^^^^^ unreachable statement

warning: unreachable statement
    --> packages/http3/src/hyper/async_impl/client.rs:2095:29
     |
2094 | ...                   handle_error!("H3 client not available", "HTTP/3 execution");
     |                       ------------------------------------------------------------ any code following this expression is unreachable
2095 | ...                   return;
     |                       ^^^^^^^ unreachable statement

warning: unreachable statement
    --> packages/http3/src/hyper/async_impl/client.rs:2103:21
     |
2102 |                     handle_error!("HTTP request execution not implemented", "HTTP execution");
     |                     ------------------------------------------------------------------------- any code following this expression is unreachable
2103 |                     return;
     |                     ^^^^^^^ unreachable statement

warning: unreachable statement
    --> packages/http3/src/hyper/async_impl/client.rs:2114:29
     |
2113 | ...                   handle_error!(response_chunk.error().unwrap_or("Unknown error"), "response processing");
     |                       --------------------------------------------------------------------------------------- any code following this expression is unreachable
2114 | ...                   return;
     |                       ^^^^^^^ unreachable statement

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/connect.rs:268:13
    |
267 |         match h3_builder.build(h3_conn) {
    |               ------------------------- this expression has type `impl Future<Output = Result<(Connection<Connection, _>, ...), ...>>`
268 |             Ok((driver, send_request)) => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found `Result<_, _>`
    |
    = note: expected opaque type `impl Future<Output = std::result::Result<(h3::client::Connection<h3_quinn::Connection, _>, h3::client::SendRequest<h3_quinn::OpenStreams, _>), h3::error::ConnectionError>>`
                      found enum `std::result::Result<_, _>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-7240741285102188139.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/connect.rs:282:13
    |
267 |         match h3_builder.build(h3_conn) {
    |               ------------------------- this expression has type `impl Future<Output = Result<(Connection<Connection, _>, ...), ...>>`
...
282 |             Err(h3_err) => {
    |             ^^^^^^^^^^^ expected future, found `Result<_, _>`
    |
    = note: expected opaque type `impl Future<Output = std::result::Result<(h3::client::Connection<h3_quinn::Connection, _>, h3::client::SendRequest<h3_quinn::OpenStreams, _>), h3::error::ConnectionError>>`
                      found enum `std::result::Result<_, _>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-7240741285102188139.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:232:37
    |
231 |                     match driver.poll_close(&mut context) {
    |                           ------------------------------- this expression has type `Poll<h3::error::ConnectionError>`
232 |                         Poll::Ready(Ok(())) => {
    |                                     ^^^^^^ expected `ConnectionError`, found `Result<_, _>`
    |
    = note: expected enum `h3::error::ConnectionError`
               found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:236:37
    |
231 |                     match driver.poll_close(&mut context) {
    |                           ------------------------------- this expression has type `Poll<h3::error::ConnectionError>`
...
236 |                         Poll::Ready(Err(e)) => {
    |                                     ^^^^^^ expected `ConnectionError`, found `Result<_, _>`
    |
    = note: expected enum `h3::error::ConnectionError`
               found enum `std::result::Result<_, _>`

error[E0308]: `match` arms have incompatible types
  --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:85:57
   |
69 |                   let lock = match pool.connecting(&key) {
   |                              --------------------------- `match` arms have incompatible types
...
74 | /                         match receive_stream.try_next() {
75 | |                             Some(wrapper) => {
76 | |                                 if let Some(client) = wrapper.0 {
77 | |                                     return Ok(client);
...  |
82 | |                             },
83 | |                         }
   | |_________________________- this is found to be of type `()`
84 |                       }
85 |                       pool::Connecting::Acquired(lock) => lock,
   |                                                           ^^^^ expected `()`, found `ConnectingLock`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:123:26
    |
122 |                 let mut pooled = match pooled_stream.try_next() {
    |                                        ------------------------ this expression has type `std::option::Option<HttpResponseChunk>`
123 |                     Some(Ok(client)) => client,
    |                          ^^^^^^^^^^ expected `HttpResponseChunk`, found `Result<_, _>`
    |
    = note: expected struct `HttpResponseChunk`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:124:26
    |
122 |                 let mut pooled = match pooled_stream.try_next() {
    |                                        ------------------------ this expression has type `std::option::Option<HttpResponseChunk>`
123 |                     Some(Ok(client)) => client,
124 |                     Some(Err(e)) => {
    |                          ^^^^^^ expected `HttpResponseChunk`, found `Result<_, _>`
    |
    = note: expected struct `HttpResponseChunk`
                 found enum `std::result::Result<_, _>`

error[E0599]: no function or associated item named `head` found for struct `HttpResponseChunk` in the current scope
   --> packages/http3/src/hyper/async_impl/h3_client/mod.rs:246:44
    |
246 |             let chunk = HttpResponseChunk::head(200, std::collections::HashMap::new());
    |                                            ^^^^ function or associated item not found in `HttpResponseChunk`
    |
   ::: packages/http3/src/response/chunk.rs:12:1
    |
 12 | pub struct HttpResponseChunk {
    | ---------------------------- function or associated item `head` not found for this struct
    |
note: if you're trying to build a new `HttpResponseChunk` consider using one of the following associated functions:
      HttpResponseChunk::new
      HttpResponseChunk::data
      HttpResponseChunk::connection
      HttpResponseChunk::from_response
   --> packages/http3/src/response/chunk.rs:41:5
    |
 41 |     pub fn new(status: u16, headers: HashMap<String, String>, body: Vec<u8>, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
 71 |     pub fn data(data: bytes::Bytes) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
 82 |     pub fn connection<T>(_conn: T) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
 93 |     pub fn from_response<T>(_response: T) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: `<HeaderValue as TryFrom<V>>::Error` doesn't implement `std::fmt::Display`
   --> packages/http3/src/hyper/async_impl/request.rs:224:72
    |
224 |                     Err(e) => error = Some(crate::HttpError::builder(e.to_string())),
    |                                                                        ^^^^^^^^^ method cannot be called on `<HeaderValue as TryFrom<V>>::Error` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<HeaderValue as TryFrom<V>>::Error: std::fmt::Display`
            which is required by `<HeaderValue as TryFrom<V>>::Error: ToString`

error[E0599]: `<HeaderName as TryFrom<K>>::Error` doesn't implement `std::fmt::Display`
   --> packages/http3/src/hyper/async_impl/request.rs:226:68
    |
226 |                 Err(e) => error = Some(crate::HttpError::builder(e.to_string())),
    |                                                                    ^^^^^^^^^ method cannot be called on `<HeaderName as TryFrom<K>>::Error` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<HeaderName as TryFrom<K>>::Error: std::fmt::Display`
            which is required by `<HeaderName as TryFrom<K>>::Error: ToString`

error[E0277]: the trait bound `HeaderValue: From<std::result::Result<HeaderValue, HttpError>>` is not satisfied
   --> packages/http3/src/hyper/async_impl/request.rs:265:14
    |
265 |         self.header_sensitive(crate::header::AUTHORIZATION, header_value, true)
    |              ^^^^^^^^^^^^^^^^ the trait `From<std::result::Result<HeaderValue, HttpError>>` is not implemented for `HeaderValue`
    |
    = help: the following other types implement trait `From<T>`:
              `HeaderValue` implements `From<&HeaderValue>`
              `HeaderValue` implements `From<HeaderName>`
              `HeaderValue` implements `From<i16>`
              `HeaderValue` implements `From<i32>`
              `HeaderValue` implements `From<i64>`
              `HeaderValue` implements `From<isize>`
              `HeaderValue` implements `From<u16>`
              `HeaderValue` implements `From<u32>`
            and 2 others
    = note: required for `std::result::Result<HeaderValue, HttpError>` to implement `Into<HeaderValue>`
    = note: required for `HeaderValue` to implement `TryFrom<std::result::Result<HeaderValue, HttpError>>`

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/request.rs:527:25
    |
526 |                         handle_error!(e, "request preparation");
    |                         --------------------------------------- any code following this expression is unreachable
527 |                         return;
    |                         ^^^^^^^ unreachable statement

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/request.rs:518:9
    |
515 |       pub fn send(self) -> fluent_ai_async::AsyncStream<Response> {
    |                            -------------------------------------- expected `fluent_ai_async::AsyncStream<async_impl::response::Response>` because of return type
...
518 | /         AsyncStream::with_channel(move |sender| {
519 | |             let request = self.request;
520 | |             let client = self.client;
...   |
544 | |             task.collect();
545 | |         })
    | |__________^ expected `AsyncStream<Response>`, found `AsyncStream<HttpResponseChunk, _>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<async_impl::response::Response, 1024>`
               found struct `fluent_ai_async::AsyncStream<HttpResponseChunk, _>`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/response.rs:61:41
    |
 61 |             super::body::response(body, total_timeout, read_timeout),
    |             ---------------------       ^^^^^^^^^^^^^ expected `Option<Instant>`, found `Option<Pin<Box<dyn Sleep>>>`
    |             |
    |             arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<Instant>`
               found enum `std::option::Option<Pin<Box<(dyn Sleep + 'static)>>>`
note: function defined here
   --> packages/http3/src/hyper/async_impl/body.rs:452:15
    |
452 | pub(crate) fn response<B>(
    |               ^^^^^^^^
453 |     body: B,
454 |     deadline: Option<std::time::Instant>,
    |     ------------------------------------

error[E0599]: no method named `poll_frame` found for struct `Pin<&mut async_impl::decoder::Decoder>` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:205:57
    |
205 |                     match std::pin::Pin::new(&mut body).poll_frame(&mut context) {
    |                                                         ^^^^^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs:47:8
    |
 47 |     fn poll_frame(
    |        ---------- the method is available for `Pin<&mut async_impl::decoder::Decoder>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `frame` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs:40:5
    |
 40 | /     fn frame(&mut self) -> combinators::Frame<'_, Self>
 41 | |     where
 42 | |         Self: Unpin,
    | |____________________^
help: trait `Body` which provides `poll_frame` is implemented but not in scope; perhaps you want to import it
    |
  1 + use http_body::Body;
    |

error[E0277]: the size for values of type `[_]` cannot be known at compilation time
   --> packages/http3/src/hyper/async_impl/response.rs:207:36
    |
207 | ...                   if let Ok(data) = frame.into_data() {
    |                              ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[_]`
note: required by a bound in `std::prelude::v1::Ok`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:17
    |
549 | pub enum Result<T, E> {
    |                 ^ required by this bound in `std::prelude::v1::Ok`
...
553 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/response.rs:219:29
    |
218 | ...                   handle_error!(e, "response text frame error");
    |                       --------------------------------------------- any code following this expression is unreachable
219 | ...                   return;
    |                       ^^^^^^^ unreachable statement

error[E0599]: no method named `poll_frame` found for struct `Pin<&mut async_impl::decoder::Decoder>` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:337:57
    |
337 |                     match std::pin::Pin::new(&mut body).poll_frame(&mut cx) {
    |                                                         ^^^^^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs:47:8
    |
 47 |     fn poll_frame(
    |        ---------- the method is available for `Pin<&mut async_impl::decoder::Decoder>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `frame` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs:40:5
    |
 40 | /     fn frame(&mut self) -> combinators::Frame<'_, Self>
 41 | |     where
 42 | |         Self: Unpin,
    | |____________________^
help: trait `Body` which provides `poll_frame` is implemented but not in scope; perhaps you want to import it
    |
  1 + use http_body::Body;
    |

error[E0277]: the size for values of type `[_]` cannot be known at compilation time
   --> packages/http3/src/hyper/async_impl/response.rs:339:36
    |
339 | ...                   if let Ok(data) = frame.into_data() {
    |                              ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[_]`
note: required by a bound in `std::prelude::v1::Ok`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:17
    |
549 | pub enum Result<T, E> {
    |                 ^ required by this bound in `std::prelude::v1::Ok`
...
553 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0277]: the trait bound `std::result::Result<std::string::String, HttpError>: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:312:9
    |
312 | /         AsyncStream::with_channel(move |sender| {
313 | |             let task = spawn_task(move || {
...   |
363 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<std::string::String, HttpError>`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `std::result::Result<std::string::String, HttpError>: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:312:9
    |
312 | /         AsyncStream::with_channel(move |sender| {
313 | |             let task = spawn_task(move || {
...   |
363 | |         })
    | |__________^ the trait `Default` is not implemented for `std::result::Result<std::string::String, HttpError>`
    |
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:30
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `std::result::Result<std::string::String, HttpError>: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:360:29
    |
360 |                 Ok(text) => emit!(sender, text),
    |                             ^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<std::string::String, HttpError>`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::result::Result<std::string::String, HttpError>: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:360:29
    |
360 |                 Ok(text) => emit!(sender, text),
    |                             ^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `std::result::Result<std::string::String, HttpError>`
    |
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:30
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/response.rs:312:9
    |
308 |       pub fn text_with_charset(self, default_encoding: &str) -> AsyncStream<String> {
    |                                                                 ------------------- expected `fluent_ai_async::AsyncStream<std::string::String>` because of return type
...
312 | /         AsyncStream::with_channel(move |sender| {
313 | |             let task = spawn_task(move || {
...   |
363 | |         })
    | |__________^ expected `AsyncStream<String>`, found `AsyncStream<Result<String, ...>, _>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<std::string::String, 1024>`
               found struct `fluent_ai_async::AsyncStream<std::result::Result<std::string::String, HttpError>, _>`

error[E0599]: no method named `poll_frame` found for struct `Pin<&mut async_impl::decoder::Decoder>` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:420:53
    |
420 |                 match std::pin::Pin::new(&mut body).poll_frame(&mut context) {
    |                                                     ^^^^^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs:47:8
    |
 47 |     fn poll_frame(
    |        ---------- the method is available for `Pin<&mut async_impl::decoder::Decoder>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `frame` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs:40:5
    |
 40 | /     fn frame(&mut self) -> combinators::Frame<'_, Self>
 41 | |     where
 42 | |         Self: Unpin,
    | |____________________^
help: trait `Body` which provides `poll_frame` is implemented but not in scope; perhaps you want to import it
    |
  1 + use http_body::Body;
    |

error[E0277]: the size for values of type `[_]` cannot be known at compilation time
   --> packages/http3/src/hyper/async_impl/response.rs:422:32
    |
422 |                         if let Ok(data) = frame.into_data() {
    |                                ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[_]`
note: required by a bound in `std::prelude::v1::Ok`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:17
    |
549 | pub enum Result<T, E> {
    |                 ^ required by this bound in `std::prelude::v1::Ok`
...
553 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/response.rs:428:25
    |
427 |                         handle_error!(e, "response json frame error");
    |                         --------------------------------------------- any code following this expression is unreachable
428 |                         return;
    |                         ^^^^^^^ unreachable statement

error[E0277]: the trait bound `T: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:410:9
    |
410 | /         AsyncStream::with_channel(move |sender| {
411 | |             // Direct JSON streaming without collection - process body incrementally
412 | |             let mut body = self.res.into_body();
413 | |             let mut accumulated_bytes = Vec::new();
...   |
445 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `T`
    |
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function
help: consider further restricting type parameter `T` with trait `MessageChunk`
    |
409 |     pub fn json<T: DeserializeOwned + Send + 'static + fluent_ai_async::prelude::MessageChunk>(self) -> AsyncStream<T> {
    |                                                      ++++++++++++++++++++++++++++++++++++++++

error[E0277]: the trait bound `T: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:410:9
    |
410 | /         AsyncStream::with_channel(move |sender| {
411 | |             // Direct JSON streaming without collection - process body incrementally
412 | |             let mut body = self.res.into_body();
413 | |             let mut accumulated_bytes = Vec::new();
...   |
445 | |         })
    | |__________^ the trait `Default` is not implemented for `T`
    |
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:30
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function
help: consider further restricting type parameter `T` with trait `Default`
    |
409 |     pub fn json<T: DeserializeOwned + Send + 'static + std::default::Default>(self) -> AsyncStream<T> {
    |                                                      +++++++++++++++++++++++

error[E0277]: the trait bound `T: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:434:52
    |
434 | ...                   Ok(parsed_json) => emit!(sender, parsed_json),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `T`
    |
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `T` with trait `MessageChunk`
    |
409 |     pub fn json<T: DeserializeOwned + Send + 'static + fluent_ai_async::prelude::MessageChunk>(self) -> AsyncStream<T> {
    |                                                      ++++++++++++++++++++++++++++++++++++++++

error[E0277]: the trait bound `T: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:434:52
    |
434 | ...                   Ok(parsed_json) => emit!(sender, parsed_json),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `T`
    |
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:30
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `T` with trait `Default`
    |
409 |     pub fn json<T: DeserializeOwned + Send + 'static + std::default::Default>(self) -> AsyncStream<T> {
    |                                                      +++++++++++++++++++++++

error[E0599]: no method named `poll_frame` found for struct `Pin<&mut async_impl::decoder::Decoder>` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:472:53
    |
472 |                 match std::pin::Pin::new(&mut body).poll_frame(&mut context) {
    |                                                     ^^^^^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs:47:8
    |
 47 |     fn poll_frame(
    |        ---------- the method is available for `Pin<&mut async_impl::decoder::Decoder>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `frame` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs:40:5
    |
 40 | /     fn frame(&mut self) -> combinators::Frame<'_, Self>
 41 | |     where
 42 | |         Self: Unpin,
    | |____________________^
help: trait `Body` which provides `poll_frame` is implemented but not in scope; perhaps you want to import it
    |
  1 + use http_body::Body;
    |

error[E0277]: the size for values of type `[_]` cannot be known at compilation time
   --> packages/http3/src/hyper/async_impl/response.rs:474:32
    |
474 |                         if let Ok(data) = frame.into_data() {
    |                                ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[_]`
note: required by a bound in `std::prelude::v1::Ok`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:17
    |
549 | pub enum Result<T, E> {
    |                 ^ required by this bound in `std::prelude::v1::Ok`
...
553 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/response.rs:480:25
    |
479 |                         handle_error!(e, "response bytes frame error");
    |                         ---------------------------------------------- any code following this expression is unreachable
480 |                         return;
    |                         ^^^^^^^ unreachable statement

error[E0599]: no method named `poll_frame` found for struct `Pin<&mut async_impl::decoder::Decoder>` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:523:53
    |
523 |                 match std::pin::Pin::new(&mut body).poll_frame(&mut context) {
    |                                                     ^^^^^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs:47:8
    |
 47 |     fn poll_frame(
    |        ---------- the method is available for `Pin<&mut async_impl::decoder::Decoder>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `frame` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs:40:5
    |
 40 | /     fn frame(&mut self) -> combinators::Frame<'_, Self>
 41 | |     where
 42 | |         Self: Unpin,
    | |____________________^
help: trait `Body` which provides `poll_frame` is implemented but not in scope; perhaps you want to import it
    |
  1 + use http_body::Body;
    |

warning: unreachable statement
   --> packages/http3/src/hyper/async_impl/response.rs:532:25
    |
531 |                         handle_error!(e, "response chunk frame error");
    |                         ---------------------------------------------- any code following this expression is unreachable
532 |                         return;
    |                         ^^^^^^^ unreachable statement

error[E0277]: the trait bound `bytes::Bytes: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:514:9
    |
514 | /         AsyncStream::with_channel(move |sender| {
515 | |             // Direct chunk streaming without collection - stream each frame as it arrives
516 | |             let mut body = self.res.into_body();
...   |
543 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `bytes::Bytes`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/bytes.rs:102:1
    |
102 | pub struct Bytes {
    | ---------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `bytes::Bytes: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:527:29
    |
527 | ...                   emit!(sender, chunk_data);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `bytes::Bytes`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/bytes.rs:102:1
    |
102 | pub struct Bytes {
    | ---------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/response.rs:581:29
    |
580 |                         match result {
    |                               ------ this expression has type `HttpResponseChunk`
581 |                             Ok(bytes) => byte_chunks.push(bytes),
    |                             ^^^^^^^^^ expected `HttpResponseChunk`, found `Result<_, _>`
    |
    = note: expected struct `HttpResponseChunk`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/response.rs:582:29
    |
580 |                         match result {
    |                               ------ this expression has type `HttpResponseChunk`
581 |                             Ok(bytes) => byte_chunks.push(bytes),
582 |                             Err(_) => break, // Stop on error
    |                             ^^^^^^ expected `HttpResponseChunk`, found `Result<_, _>`
    |
    = note: expected struct `HttpResponseChunk`
                 found enum `std::result::Result<_, _>`

error[E0277]: the trait bound `bytes::Bytes: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:568:9
    |
568 | /         AsyncStream::with_channel(move |sender| {
569 | |             let task = spawn_task(move || {
570 | |                 // Convert the HttpBody to bytes using pure synchronous patterns
571 | |                 let data_stream = super::body::DataStream(self.res.into_body());
...   |
597 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `bytes::Bytes`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/bytes.rs:102:1
    |
102 | pub struct Bytes {
    | ---------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `bytes::Bytes: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/response.rs:595:17
    |
595 |                 emit!(sender, bytes);
    |                 ^^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `bytes::Bytes`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/bytes.rs:102:1
    |
102 | pub struct Bytes {
    | ---------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `status_code` found for enum `HttpError` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:627:35
    |
627 |             Err(crate::HttpError::status_code(*self.url, status, reason))
    |                                   ^^^^^^^^^^^ variant or associated item not found in `HttpError`
    |
   ::: packages/http3/src/error.rs:7:1
    |
  7 | pub enum HttpError {
    | ------------------ variant or associated item `status_code` not found for this enum
    |
note: if you're trying to build a new `HttpError` consider using one of the following associated functions:
      HttpError::network
      HttpError::client
      HttpError::configuration
      HttpError::http_status
      and 30 others
   --> packages/http3/src/error.rs:257:5
    |
257 |     pub fn network<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
264 |     pub fn client<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
271 |     pub fn configuration<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
276 |     pub fn http_status<S: Into<String>>(status: u16, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `status_code` found for enum `HttpError` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:658:35
    |
658 |             Err(crate::HttpError::status_code(*self.url.clone(), status, reason))
    |                                   ^^^^^^^^^^^ variant or associated item not found in `HttpError`
    |
   ::: packages/http3/src/error.rs:7:1
    |
  7 | pub enum HttpError {
    | ------------------ variant or associated item `status_code` not found for this enum
    |
note: if you're trying to build a new `HttpError` consider using one of the following associated functions:
      HttpError::network
      HttpError::client
      HttpError::configuration
      HttpError::http_status
      and 30 others
   --> packages/http3/src/error.rs:257:5
    |
257 |     pub fn network<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
264 |     pub fn client<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
271 |     pub fn configuration<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
276 |     pub fn http_status<S: Into<String>>(status: u16, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0271]: type mismatch resolving `<Decoder as Body>::Error == Box<dyn Error + Send + Sync>`
   --> packages/http3/src/hyper/async_impl/response.rs:686:20
    |
686 |         Body::wrap(r.res.into_body())
    |         ---------- ^^^^^^^^^^^^^^^^^ type mismatch resolving `<Decoder as Body>::Error == Box<dyn Error + Send + Sync>`
    |         |
    |         required by a bound introduced by this call
    |
note: expected this to be `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
   --> packages/http3/src/hyper/async_impl/decoder.rs:262:18
    |
262 |     type Error = crate::Error;
    |                  ^^^^^^^^^^^^
    = note: expected struct `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
                 found enum `HttpError`
note: required by a bound in `async_impl::body::Body::wrap`
   --> packages/http3/src/hyper/async_impl/body.rs:171:21
    |
169 |     pub fn wrap<B>(inner: B) -> Body
    |            ---- required by a bound in this associated function
170 |     where
171 |         B: HttpBody<Error = Box<dyn std::error::Error + Send + Sync>> + Send + Sync + 'static,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Body::wrap`

error[E0277]: `*const ()` cannot be shared between threads safely
   --> packages/http3/src/hyper/async_impl/response.rs:686:20
    |
686 |         Body::wrap(r.res.into_body())
    |         ---------- ^^^^^^^^^^^^^^^^^ `*const ()` cannot be shared between threads safely
    |         |
    |         required by a bound introduced by this call
    |
    = help: within `async_impl::decoder::Decoder`, the trait `std::marker::Sync` is not implemented for `*const ()`
note: required because it appears within the type `PhantomData<*const ()>`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:822:12
    |
822 | pub struct PhantomData<T: PointeeSized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `Parker`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/sync/parker.rs:53:12
    |
 53 | pub struct Parker {
    |            ^^^^^^
note: required because it appears within the type `fluent_ai_async::AsyncStream<BytesWrapper>`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/receiver.rs:14:12
    |
 14 | pub struct AsyncStream<T, const CAP: usize = 1024> {
    |            ^^^^^^^^^^^
note: required because it appears within the type `async_impl::decoder::Inner`
   --> packages/http3/src/hyper/async_impl/decoder.rs:52:6
    |
 52 | enum Inner {
    |      ^^^^^
note: required because it appears within the type `async_impl::decoder::Decoder`
   --> packages/http3/src/hyper/async_impl/decoder.rs:48:19
    |
 48 | pub(crate) struct Decoder {
    |                   ^^^^^^^
note: required by a bound in `async_impl::body::Body::wrap`
   --> packages/http3/src/hyper/async_impl/body.rs:171:80
    |
169 |     pub fn wrap<B>(inner: B) -> Body
    |            ---- required by a bound in this associated function
170 |     where
171 |         B: HttpBody<Error = Box<dyn std::error::Error + Send + Sync>> + Send + Sync + 'static,
    |                                                                                ^^^^ required by this bound in `Body::wrap`

error[E0271]: type mismatch resolving `<Body as Body>::Error == Box<dyn Error + Send + Sync>`
   --> packages/http3/src/hyper/async_impl/response.rs:700:31
    |
700 |             ResponseBody::new(body),
    |             ----------------- ^^^^ type mismatch resolving `<Body as Body>::Error == Box<dyn Error + Send + Sync>`
    |             |
    |             required by a bound introduced by this call
    |
note: expected this to be `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
   --> packages/http3/src/hyper/async_impl/body.rs:292:18
    |
292 |     type Error = crate::Error;
    |                  ^^^^^^^^^^^^
    = note: expected struct `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
                 found enum `HttpError`
note: required by a bound in `BoxBody::<D, E>::new`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/combinators/box_body.rs:25:27
    |
 23 |     pub fn new<B>(body: B) -> Self
    |            --- required by a bound in this associated function
 24 |     where
 25 |         B: Body<Data = D, Error = E> + Send + Sync + 'static,
    |                           ^^^^^^^^^ required by this bound in `BoxBody::<D, E>::new`

error[E0271]: type mismatch resolving `<Decoder as Body>::Error == Box<dyn Error + Send + Sync>`
   --> packages/http3/src/hyper/async_impl/response.rs:721:31
    |
721 |         let body = Body::wrap(body);
    |                    ---------- ^^^^ type mismatch resolving `<Decoder as Body>::Error == Box<dyn Error + Send + Sync>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: expected this to be `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
   --> packages/http3/src/hyper/async_impl/decoder.rs:262:18
    |
262 |     type Error = crate::Error;
    |                  ^^^^^^^^^^^^
    = note: expected struct `Box<(dyn StdError + Send + std::marker::Sync + 'static)>`
                 found enum `HttpError`
note: required by a bound in `async_impl::body::Body::wrap`
   --> packages/http3/src/hyper/async_impl/body.rs:171:21
    |
169 |     pub fn wrap<B>(inner: B) -> Body
    |            ---- required by a bound in this associated function
170 |     where
171 |         B: HttpBody<Error = Box<dyn std::error::Error + Send + Sync>> + Send + Sync + 'static,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Body::wrap`

error[E0277]: `*const ()` cannot be shared between threads safely
   --> packages/http3/src/hyper/async_impl/response.rs:721:31
    |
721 |         let body = Body::wrap(body);
    |                    ---------- ^^^^ `*const ()` cannot be shared between threads safely
    |                    |
    |                    required by a bound introduced by this call
    |
    = help: within `async_impl::decoder::Decoder`, the trait `std::marker::Sync` is not implemented for `*const ()`
note: required because it appears within the type `PhantomData<*const ()>`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:822:12
    |
822 | pub struct PhantomData<T: PointeeSized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `Parker`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/sync/parker.rs:53:12
    |
 53 | pub struct Parker {
    |            ^^^^^^
note: required because it appears within the type `fluent_ai_async::AsyncStream<BytesWrapper>`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/receiver.rs:14:12
    |
 14 | pub struct AsyncStream<T, const CAP: usize = 1024> {
    |            ^^^^^^^^^^^
note: required because it appears within the type `async_impl::decoder::Inner`
   --> packages/http3/src/hyper/async_impl/decoder.rs:52:6
    |
 52 | enum Inner {
    |      ^^^^^
note: required because it appears within the type `async_impl::decoder::Decoder`
   --> packages/http3/src/hyper/async_impl/decoder.rs:48:19
    |
 48 | pub(crate) struct Decoder {
    |                   ^^^^^^^
note: required by a bound in `async_impl::body::Body::wrap`
   --> packages/http3/src/hyper/async_impl/body.rs:171:80
    |
169 |     pub fn wrap<B>(inner: B) -> Body
    |            ---- required by a bound in this associated function
170 |     where
171 |         B: HttpBody<Error = Box<dyn std::error::Error + Send + Sync>> + Send + Sync + 'static,
    |                                                                                ^^^^ required by this bound in `Body::wrap`

error[E0599]: no function or associated item named `empty` found for struct `async_impl::decoder::Decoder` in the current scope
   --> packages/http3/src/hyper/async_impl/response.rs:762:28
    |
762 |             .body(Decoder::empty())
    |                            ^^^^^ function or associated item not found in `async_impl::decoder::Decoder`
    |
   ::: packages/http3/src/hyper/async_impl/decoder.rs:48:1
    |
 48 | pub(crate) struct Decoder {
    | ------------------------- function or associated item `empty` not found for this struct
    |
note: if you're trying to build a new `async_impl::decoder::Decoder`, consider using `async_impl::decoder::Decoder::detect` which returns `async_impl::decoder::Decoder`
   --> packages/http3/src/hyper/async_impl/decoder.rs:223:5
    |
223 | /     pub(super) fn detect(
224 | |         _headers: &mut HeaderMap,
225 | |         body: ResponseBody,
226 | |         _accepts: Accepts,
227 | |     ) -> Decoder {
    | |________________^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `empty`, perhaps you need to implement one of them:
            candidate #1: `ObjectLiteral`
            candidate #2: `bitflags::traits::Flags`
            candidate #3: `sugars_builders::ObjectLiteral`

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/response.rs:772:18
    |
772 |             url: Url::parse("http://error").expect("Failed to create error URL"),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<Url>`, found `Url`
    |
    = note: expected struct `Box<Url>`
               found struct `Url`
    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html
help: store this in the heap by calling `Box::new`
    |
772 |             url: Box::new(Url::parse("http://error").expect("Failed to create error URL")),
    |                  +++++++++                                                               +

error[E0599]: no function or associated item named `bad_chunk` found for struct `HttpResponseChunk` in the current scope
  --> packages/http3/src/hyper/async_impl/upgrade.rs:90:71
   |
90 |                     emit!(sender, crate::response::HttpResponseChunk::bad_chunk("Read stream already consumed".to_string()));
   |                                                                       ^^^^^^^^^ function or associated item not found in `HttpResponseChunk`
   |
  ::: packages/http3/src/response/chunk.rs:12:1
   |
12 | pub struct HttpResponseChunk {
   | ---------------------------- function or associated item `bad_chunk` not found for this struct
   |
note: if you're trying to build a new `HttpResponseChunk` consider using one of the following associated functions:
      HttpResponseChunk::new
      HttpResponseChunk::data
      HttpResponseChunk::connection
      HttpResponseChunk::from_response
  --> packages/http3/src/response/chunk.rs:41:5
   |
41 |     pub fn new(status: u16, headers: HashMap<String, String>, body: Vec<u8>, url: String) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
71 |     pub fn data(data: bytes::Bytes) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
82 |     pub fn connection<T>(_conn: T) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
93 |     pub fn from_response<T>(_response: T) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is in scope
help: trait `MessageChunk` which provides `bad_chunk` is implemented but not in scope; perhaps you want to import it
   |
 1 + use fluent_ai_async::prelude::MessageChunk;
   |

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/upgrade.rs:184:12
    |
184 |         Ok(write_stream_tx)
    |         -- ^^^^^^^^^^^^^^^ expected `AsyncStreamSender<Vec<u8>>`, found `Sender<Vec<u8>>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `AsyncStreamSender<std::vec::Vec<u8>>`
               found struct `crossbeam_channel::Sender<std::vec::Vec<u8>>`
help: the type constructed contains `crossbeam_channel::Sender<std::vec::Vec<u8>>` due to the type of the argument passed
   --> packages/http3/src/hyper/async_impl/upgrade.rs:184:9
    |
184 |         Ok(write_stream_tx)
    |         ^^^---------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:553:5
    |
553 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0599]: no variant or associated item named `upgrade` found for enum `HttpError` in the current scope
   --> packages/http3/src/hyper/async_impl/upgrade.rs:316:62
    |
316 |                         Err(io_err) => Err(crate::HttpError::upgrade(format!(
    |                                                              ^^^^^^^ variant or associated item not found in `HttpError`
    |
   ::: packages/http3/src/error.rs:7:1
    |
  7 | pub enum HttpError {
    | ------------------ variant or associated item `upgrade` not found for this enum
    |
note: if you're trying to build a new `HttpError` consider using one of the following associated functions:
      HttpError::network
      HttpError::client
      HttpError::configuration
      HttpError::http_status
      and 30 others
   --> packages/http3/src/error.rs:257:5
    |
257 |     pub fn network<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
264 |     pub fn client<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
271 |     pub fn configuration<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
276 |     pub fn http_status<S: Into<String>>(status: u16, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `upgrade`, perhaps you need to implement one of them:
            candidate #1: `lock_api::rwlock::RawRwLockUpgrade`
            candidate #2: `prodash::traits::WeakRoot`

error[E0599]: no variant or associated item named `upgrade` found for enum `HttpError` in the current scope
   --> packages/http3/src/hyper/async_impl/upgrade.rs:322:43
    |
322 |                     Err(crate::HttpError::upgrade(format!(
    |                                           ^^^^^^^ variant or associated item not found in `HttpError`
    |
   ::: packages/http3/src/error.rs:7:1
    |
  7 | pub enum HttpError {
    | ------------------ variant or associated item `upgrade` not found for this enum
    |
note: if you're trying to build a new `HttpError` consider using one of the following associated functions:
      HttpError::network
      HttpError::client
      HttpError::configuration
      HttpError::http_status
      and 30 others
   --> packages/http3/src/error.rs:257:5
    |
257 |     pub fn network<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
264 |     pub fn client<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
271 |     pub fn configuration<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
276 |     pub fn http_status<S: Into<String>>(status: u16, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `upgrade`, perhaps you need to implement one of them:
            candidate #1: `lock_api::rwlock::RawRwLockUpgrade`
            candidate #2: `prodash::traits::WeakRoot`

error[E0277]: the trait bound `Result<Result<Upgraded, HttpError>, _>: MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/upgrade.rs:306:9
    |
306 | /         AsyncStream::with_channel(move |sender| {
307 | |             let task = spawn_task(move || -> Result<Upgraded, crate::Error> {
308 | |                 // Check if the response indicates a successful upgrade (status 101)
309 | |                 if self.status() == http::StatusCode::SWITCHING_PROTOCOLS {
...   |
333 | |         })
    | |__________^ unsatisfied trait bound
    |
    = help: the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>`
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-14553293153936734481.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `Result<Result<Upgraded, HttpError>, _>: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/upgrade.rs:306:9
    |
306 | /         AsyncStream::with_channel(move |sender| {
307 | |             let task = spawn_task(move || -> Result<Upgraded, crate::Error> {
308 | |                 // Check if the response indicates a successful upgrade (status 101)
309 | |                 if self.status() == http::StatusCode::SWITCHING_PROTOCOLS {
...   |
333 | |         })
    | |__________^ the trait `Default` is not implemented for `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>`
    |
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:30
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-2867489006066220549.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `Result<Result<Upgraded, HttpError>, _>: MessageChunk` is not satisfied
   --> packages/http3/src/hyper/async_impl/upgrade.rs:330:33
    |
330 |                 Ok(upgraded) => emit!(sender, Ok(upgraded)),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
    |
    = help: the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>`
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-14553293153936734481.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Result<Result<Upgraded, HttpError>, _>: Default` is not satisfied
   --> packages/http3/src/hyper/async_impl/upgrade.rs:330:33
    |
330 |                 Ok(upgraded) => emit!(sender, Ok(upgraded)),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>`
    |
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:30
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-2867489006066220549.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: the method `send` exists for struct `AsyncStreamSender<Result<Result<Upgraded, HttpError>, _>, _>`, but its trait bounds were not satisfied
   --> packages/http3/src/hyper/async_impl/upgrade.rs:331:27
    |
331 |                 Err(e) => emit!(sender, Err(e)),
    |                           ^^^^^^^^^^^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Default` or `_: MessageChunk`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>: fluent_ai_async::prelude::MessageChunk`
            `std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>: Default`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_http3-d4ff1bcbe74cd0ab.long-type-13737071735398986691.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/async_impl/upgrade.rs:306:9
    |
303 |       pub fn upgrade(self) -> fluent_ai_async::AsyncStream<crate::Result<Upgraded>> {
    |                               ----------------------------------------------------- expected `fluent_ai_async::AsyncStream<std::result::Result<async_impl::upgrade::Upgraded, HttpError>>` because of return type
...
306 | /         AsyncStream::with_channel(move |sender| {
307 | |             let task = spawn_task(move || -> Result<Upgraded, crate::Error> {
308 | |                 // Check if the response indicates a successful upgrade (status 101)
309 | |                 if self.status() == http::StatusCode::SWITCHING_PROTOCOLS {
...   |
333 | |         })
    | |__________^ expected `AsyncStream<Result<Upgraded, HttpError>>`, found `AsyncStream<Result<..., _>, _>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, 1024>`
               found struct `fluent_ai_async::AsyncStream<std::result::Result<std::result::Result<async_impl::upgrade::Upgraded, HttpError>, _>, _>`

error[E0308]: mismatched types
  --> packages/http3/src/hyper/connect.rs:99:22
   |
99 |             proxies: Vec::new(),
   |                      ^^^^^^^^^^ expected `ArrayVec<Proxy, 4>`, found `Vec<_>`
   |
   = note: expected struct `ArrayVec<Proxy, 4>`
              found struct `std::vec::Vec<_>`

error[E0277]: the trait bound `std::result::Result<TcpStream, std::string::String>: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/connect.rs:422:9
    |
422 | /         AsyncStream::with_channel(move |sender| {
423 | |             let task = spawn_task(move || -> Result<TcpStream, String> {
424 | |                 if addrs.is_empty() {
425 | |                     return Err("No addresses to connect to".to_string());
...   |
460 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<TcpStream, std::string::String>`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `std::result::Result<TcpStream, std::string::String>: Default` is not satisfied
   --> packages/http3/src/hyper/connect.rs:422:9
    |
422 | /         AsyncStream::with_channel(move |sender| {
423 | |             let task = spawn_task(move || -> Result<TcpStream, String> {
424 | |                 if addrs.is_empty() {
425 | |                     return Err("No addresses to connect to".to_string());
...   |
460 | |         })
    | |__________^ the trait `Default` is not implemented for `std::result::Result<TcpStream, std::string::String>`
    |
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:30
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `std::result::Result<TcpStream, std::string::String>: fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/connect.rs:457:31
    |
457 |                 Ok(stream) => emit!(sender, stream),
    |                               ^^^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `std::result::Result<TcpStream, std::string::String>`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:549:1
    |
549 | pub enum Result<T, E> {
    | --------------------- this type doesn't implement the required trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::result::Result<TcpStream, std::string::String>: Default` is not satisfied
   --> packages/http3/src/hyper/connect.rs:457:31
    |
457 |                 Ok(stream) => emit!(sender, stream),
    |                               ^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `std::result::Result<TcpStream, std::string::String>`
    |
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:30
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |                              ^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/connect.rs:422:9
    |
416 |       fn connect_to_addrs(&self, addrs: Vec<SocketAddr>) -> AsyncStream<TcpStream> {
    |                                                             ---------------------- expected `fluent_ai_async::AsyncStream<TcpStream>` because of return type
...
422 | /         AsyncStream::with_channel(move |sender| {
423 | |             let task = spawn_task(move || -> Result<TcpStream, String> {
424 | |                 if addrs.is_empty() {
425 | |                     return Err("No addresses to connect to".to_string());
...   |
460 | |         })
    | |__________^ expected `AsyncStream<TcpStream>`, found `AsyncStream<Result<TcpStream, ...>, _>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<TcpStream, 1024>`
               found struct `fluent_ai_async::AsyncStream<std::result::Result<TcpStream, std::string::String>, _>`

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:498:25
    |
497 |                         handle_error!("URI missing host", "HTTP connection");
    |                         ---------------------------------------------------- any code following this expression is unreachable
498 |                         return;
    |                         ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:516:25
    |
515 |                         handle_error!(e, "DNS resolution");
    |                         ---------------------------------- any code following this expression is unreachable
516 |                         return;
    |                         ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:522:21
    |
521 |                     handle_error!("No addresses resolved", "HTTP connection");
    |                     --------------------------------------------------------- any code following this expression is unreachable
522 |                     return;
    |                     ^^^^^^^ unreachable statement

error[E0308]: mismatched types
   --> packages/http3/src/hyper/connect.rs:533:36
    |
533 | ...                   return stream;
    |                              ^^^^^^ expected `()`, found `TcpStream`
    |
note: return type inferred to be `()` here
   --> packages/http3/src/hyper/connect.rs:497:25
    |
497 |                         handle_error!("URI missing host", "HTTP connection");
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in the macro `handle_error` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `(): fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/connect.rs:492:9
    |
492 | /         AsyncStream::with_channel(move |sender| {
493 | |             let task = spawn_task(move || {
494 | |                 let host = match dst.host() {
495 | |                     Some(h) => h,
...   |
546 | |         })
    | |__________^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `()`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `fluent_ai_async::stream::<impl fluent_ai_async::AsyncStream<T, CAP>>::with_channel`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/mod.rs:20:8
    |
 20 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `fluent_ai_async::stream::<impl AsyncStream<T, CAP>>::with_channel`
...
 27 |     pub fn with_channel<F>(producer: F) -> Self
    |            ------------ required by a bound in this associated function

error[E0277]: the trait bound `(): fluent_ai_async::prelude::MessageChunk` is not satisfied
   --> packages/http3/src/hyper/connect.rs:543:31
    |
543 |                 Ok(stream) => emit!(sender, stream),
    |                               ^^^^^^^^^^^^^^^^^^^^^ the trait `fluent_ai_async::prelude::MessageChunk` is not implemented for `()`
    |
note: there are multiple different versions of crate `sugars_builders` in the dependency graph
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/150c82d/packages/builders/src/chunk_handler.rs:8:1
    |
  8 | pub trait MessageChunk: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | |
    | this is the required trait
    | this is the found trait
    |
   ::: packages/http3/src/builder/methods.rs:7:5
    |
  7 | use fluent_ai_async::prelude::MessageChunk as FluentMessageChunk;
    |     --------------- one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    |
   ::: packages/http3/src/builder/core.rs:10:5
    |
 10 | use cyrup_sugars::prelude::{ChunkHandler, MessageChunk as CyrupMessageChunk};
    |     ------------ one version of crate `sugars_builders` used here, as a dependency of crate `cyrup_sugars`
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `AsyncStreamSender::<T, CAP>::send`
   --> /Volumes/samsung_t9/fluent-ai/packages/async-stream/src/stream/sender.rs:19:8
    |
 19 |     T: MessageChunk + Send + Default + 'static,
    |        ^^^^^^^^^^^^ required by this bound in `AsyncStreamSender::<T, CAP>::send`
...
 26 |     pub fn send(&self, value: T) -> Result<(), T> {
    |            ---- required by a bound in this associated function
    = note: this error originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/connect.rs:492:9
    |
488 |       pub fn connect(&mut self, dst: Uri) -> AsyncStream<TcpStream> {
    |                                              ---------------------- expected `fluent_ai_async::AsyncStream<TcpStream>` because of return type
...
492 | /         AsyncStream::with_channel(move |sender| {
493 | |             let task = spawn_task(move || {
494 | |                 let host = match dst.host() {
495 | |                     Some(h) => h,
...   |
546 | |         })
    | |__________^ expected `AsyncStream<TcpStream>`, found `AsyncStream<(), _>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<TcpStream, 1024>`
               found struct `fluent_ai_async::AsyncStream<(), _>`

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:652:37
    |
651 | ...                   handle_error!(e, "HTTPS TCP connection");
    |                       ---------------------------------------- any code following this expression is unreachable
652 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:659:37
    |
658 | ...                   handle_error!("HTTPS URI missing host", "TLS connection");
    |                       --------------------------------------------------------- any code following this expression is unreachable
659 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:668:37
    |
667 | ...                   handle_error!(e, "TLS handshake");
    |                       --------------------------------- any code following this expression is unreachable
668 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:684:37
    |
683 | ...                   handle_error!(e, "HTTP TCP connection");
    |                       --------------------------------------- any code following this expression is unreachable
684 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:689:33
    |
688 | ...                   handle_error!(e, "TCP socket configuration");
    |                       -------------------------------------------- any code following this expression is unreachable
689 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:708:37
    |
707 | ...                   handle_error!(e, "HTTPS TCP connection");
    |                       ---------------------------------------- any code following this expression is unreachable
708 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:715:37
    |
714 | ...                   handle_error!("HTTPS URI missing host", "TLS connection");
    |                       --------------------------------------------------------- any code following this expression is unreachable
715 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:724:37
    |
723 | ...                   handle_error!(e, "TLS handshake");
    |                       --------------------------------- any code following this expression is unreachable
724 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:740:37
    |
739 | ...                   handle_error!(e, "HTTP TCP connection");
    |                       --------------------------------------- any code following this expression is unreachable
740 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:745:33
    |
744 | ...                   handle_error!(e, "TCP socket configuration");
    |                       -------------------------------------------- any code following this expression is unreachable
745 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:791:25
    |
790 |                         handle_error!("Proxy URI missing host", "proxy connection");
    |                         ----------------------------------------------------------- any code following this expression is unreachable
791 |                         return;
    |                         ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:807:25
    |
806 |                         handle_error!(e, "proxy DNS resolution");
    |                         ---------------------------------------- any code following this expression is unreachable
807 |                         return;
    |                         ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:814:25
    |
813 |                         handle_error!(e, "proxy connection");
    |                         ------------------------------------ any code following this expression is unreachable
814 |                         return;
    |                         ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:824:29
    |
823 | ...                   handle_error!(e, "HTTPS tunnel establishment");
    |                       ---------------------------------------------- any code following this expression is unreachable
824 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:833:29
    |
832 | ...                   handle_error!("HTTPS URI missing host", "proxy TLS connection");
    |                       --------------------------------------------------------------- any code following this expression is unreachable
833 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:843:37
    |
842 | ...                   handle_error!(e, "proxy TLS handshake");
    |                       --------------------------------------- any code following this expression is unreachable
843 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:859:37
    |
858 | ...                   handle_error!(e, "proxy TLS handshake");
    |                       --------------------------------------- any code following this expression is unreachable
859 | ...                   return;
    |                       ^^^^^^^ unreachable statement

warning: unreachable statement
   --> packages/http3/src/hyper/connect.rs:879:25
    |
878 |                         handle_error!(e, "proxy TCP socket configuration");
    |                         -------------------------------------------------- any code following this expression is unreachable
879 |                         return;
    |                         ^^^^^^^ unreachable statement

error[E0599]: no variant or associated item named `Http` found for enum `hyper::connect::Inner` in the current scope
   --> packages/http3/src/hyper/connect.rs:911:27
    |
328 | enum Inner {
    | ---------- variant or associated item `Http` not found for this enum
...
911 |             inner: Inner::Http(http_connector),
    |                           ^^^^ variant or associated item not found in `hyper::connect::Inner`

warning: unreachable statement
   --> packages/http3/src/hyper/dns/resolve.rs:232:21
    |
231 |                     handle_error!("DNS resolver stream ended without producing addresses", "hostname DNS resolution");
    |                     ------------------------------------------------------------------------------------------------- any code following this expression is unreachable
232 |                     emit!(sender, DnsResult::new()); // Return empty result as error-as-data
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: this warning originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unreachable statement
   --> packages/http3/src/hyper/dns/resolve.rs:345:21
    |
344 |                     handle_error!("DNS resolver stream ended without producing addresses", "DNS resolution");
    |                     ---------------------------------------------------------------------------------------- any code following this expression is unreachable
345 |                     emit!(sender, DnsResult::new()); // Return empty result as error-as-data
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: this warning originates in the macro `emit` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http3/src/hyper/tls.rs:236:38
    |
236 |                 Err(e) => return Err(crate::error::builder(format!("invalid certificate encoding: {}", e))),
    |                                  --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HttpError`, found `Error`
    |                                  |
    |                                  arguments to this enum variant are incorrect
    |
help: the type constructed contains `hyper::error::Error` due to the type of the argument passed
   --> packages/http3/src/hyper/tls.rs:236:34
    |
236 |                 Err(e) => return Err(crate::error::builder(format!("invalid certificate encoding: {}", e))),
    |                                  ^^^^---------------------------------------------------------------------^
    |                                      |
    |                                      this argument influences the type of `Err`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:558:5
    |
558 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
help: call `Into::into` on this expression to convert `hyper::error::Error` into `HttpError`
    |
236 |                 Err(e) => return Err(crate::error::builder(format!("invalid certificate encoding: {}", e)).into()),
    |                                                                                                           +++++++

error[E0308]: mismatched types
   --> packages/http3/src/hyper/tls.rs:412:47
    |
410 |       ) -> crate::Result<rustls::ClientConfig> {
    |            ----------------------------------- expected `std::result::Result<rustls::ClientConfig, HttpError>` because of return type
411 |           match self.inner {
412 |               ClientCert::Pem { key, certs } => config_builder
    |  _______________________________________________^
413 | |                 .with_client_auth_cert(certs, key)
414 | |                 .map_err(|e| crate::error::builder(format!("TLS client cert error: {}", e))),
    | |____________________________________________________________________________________________^ expected `Result<ClientConfig, HttpError>`, found `Result<ClientConfig, Error>`
    |
    = note: expected enum `std::result::Result<_, HttpError>`
               found enum `std::result::Result<_, hyper::error::Error>`
help: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`
    |
412 ~             ClientCert::Pem { key, certs } => Ok(config_builder
413 |                 .with_client_auth_cert(certs, key)
414 ~                 .map_err(|e| crate::error::builder(format!("TLS client cert error: {}", e)))?),
    |

error[E0308]: mismatched types
   --> packages/http3/src/hyper/tls.rs:480:38
    |
480 |                 Err(e) => return Err(crate::error::builder(format!("invalid crl encoding: {}", e))),
    |                                  --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HttpError`, found `Error`
    |                                  |
    |                                  arguments to this enum variant are incorrect
    |
help: the type constructed contains `hyper::error::Error` due to the type of the argument passed
   --> packages/http3/src/hyper/tls.rs:480:34
    |
480 |                 Err(e) => return Err(crate::error::builder(format!("invalid crl encoding: {}", e))),
    |                                  ^^^^-------------------------------------------------------------^
    |                                      |
    |                                      this argument influences the type of `Err`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:558:5
    |
558 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
help: call `Into::into` on this expression to convert `hyper::error::Error` into `HttpError`
    |
480 |                 Err(e) => return Err(crate::error::builder(format!("invalid crl encoding: {}", e)).into()),
    |                                                                                                   +++++++

warning: unused import: `bytes::Buf`
  --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:10:5
   |
10 | use bytes::Buf;
   |     ^^^^^^^^^^

warning: variable does not need to be mutable
  --> packages/http3/src/client/execution.rs:73:21
   |
73 |                 let mut response_stream = client.execute(http3_request);
   |                     ----^^^^^^^^^^^^^^^
   |                     |
   |                     help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> packages/http3/src/client/execution.rs:163:21
    |
163 |                 let mut response_stream = client.execute(http3_request);
    |                     ----^^^^^^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> packages/http3/src/hyper/async_impl/body.rs:38:9
   |
38 |         mut self: std::pin::Pin<&mut Self>,
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `frame_stream`
   --> packages/http3/src/hyper/async_impl/body.rs:132:13
    |
132 |         let frame_stream = AsyncStream::with_channel(move |sender: fluent_ai_async::AsyncStreamSender<FrameWrapper, 1024>| {
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_frame_stream`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `body`
   --> packages/http3/src/hyper/async_impl/body.rs:439:24
    |
439 | pub(crate) fn boxed<B>(body: B) -> ResponseBody
    |                        ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `body`
   --> packages/http3/src/hyper/async_impl/body.rs:453:5
    |
453 |     body: B,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

error[E0310]: the parameter type `B` may not live long enough
   --> packages/http3/src/hyper/async_impl/body.rs:566:9
    |
566 |         AsyncStream::with_channel(move |sender| {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         the parameter type `B` must be valid for the static lifetime...
    |         ...so that the type `B` will meet its required lifetime bounds
    |
help: consider adding an explicit lifetime bound
    |
558 |     B: HttpBody<Data = Bytes> + Send + Unpin + 'static,
    |                                              +++++++++

error[E0310]: the parameter type `B` may not live long enough
   --> packages/http3/src/hyper/async_impl/body.rs:567:13
    |
567 | /             spawn_task(move || {
568 | |                 Self::stream_body_data(self.0, sender);
569 | |             });
    | |              ^
    | |              |
    | |______________the parameter type `B` must be valid for the static lifetime...
    |                ...so that the type `B` will meet its required lifetime bounds
    |
help: consider adding an explicit lifetime bound
    |
558 |     B: HttpBody<Data = Bytes> + Send + Unpin + 'static,
    |                                              +++++++++

warning: unused variable: `proxies_maybe_http_auth`
   --> packages/http3/src/hyper/async_impl/client.rs:369:13
    |
369 |         let proxies_maybe_http_auth: Option<bool> = None;
    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proxies_maybe_http_auth`

warning: unused variable: `proxies_maybe_http_custom_headers`
   --> packages/http3/src/hyper/async_impl/client.rs:370:13
    |
370 |         let proxies_maybe_http_custom_headers: HashMap<String, String> = HashMap::new();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proxies_maybe_http_custom_headers`

warning: unused variable: `resolver`
   --> packages/http3/src/hyper/async_impl/client.rs:376:13
    |
376 |         let resolver = {
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_resolver`

warning: unused variable: `tls_connector`
   --> packages/http3/src/hyper/async_impl/client.rs:468:28
    |
468 |                         Ok(tls_connector) => {
    |                            ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tls_connector`

warning: unused variable: `tls_config`
   --> packages/http3/src/hyper/async_impl/client.rs:555:60
    |
555 |                 crate::hyper::tls::TlsBackend::BuiltRustls(tls_config) => {
    |                                                            ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tls_config`

warning: unused variable: `connector`
   --> packages/http3/src/hyper/async_impl/client.rs:567:13
    |
567 |         let connector = connector_builder.build();
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connector`

error[E0596]: cannot borrow `tls_config` as mutable, as it is not declared as mutable
   --> packages/http3/src/hyper/async_impl/client.rs:515:25
    |
515 |                     let tls_config = match &config.identity {
    |                         ^^^^^^^^^^ not mutable
...
535 |                             let mut dangerous_config = tls_config.dangerous();
    |                                                        ---------- cannot borrow as mutable
...
541 |                             let mut dangerous_config = tls_config.dangerous();
    |                                                        ---------- cannot borrow as mutable
    |
help: consider changing this to be mutable
    |
515 |                     let mut tls_config = match &config.identity {
    |                         +++

error[E0382]: use of moved value: `root_store`
   --> packages/http3/src/hyper/async_impl/client.rs:543:53
    |
484 |                     let mut root_store = RootCertStore::empty();
    |                         -------------- move occurs because `root_store` has type `RootCertStore`, which does not implement the `Copy` trait
...
512 |                         .with_root_certificates(root_store);
    |                                                 ---------- value moved here
...
543 |                                 IgnoreHostname::new(root_store, signature_algorithms)
    |                                                     ^^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
512 |                         .with_root_certificates(root_store.clone());
    |                                                           ++++++++

warning: unused variable: `error`
  --> packages/http3/src/hyper/async_impl/decoder.rs:89:18
   |
89 |     fn bad_chunk(error: String) -> Self {
   |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `stream`
   --> packages/http3/src/hyper/async_impl/decoder.rs:295:39
    |
295 |             Inner::Compressed(ref mut stream) => {
    |                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_stream`

warning: variable does not need to be mutable
   --> packages/http3/src/hyper/async_impl/decoder.rs:359:5
    |
359 |     mut body: ResponseBody,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `error`
  --> packages/http3/src/hyper/async_impl/h3_client/connect.rs:31:18
   |
31 |     fn bad_chunk(error: String) -> Self {
   |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `connecting`
   --> packages/http3/src/hyper/async_impl/h3_client/connect.rs:212:28
    |
212 |     fn wait_for_connection(connecting: quinn::Connecting, timeout: Duration) -> Result<quinn::Connection, std::io::Error> {
    |                            ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connecting`

warning: unused variable: `error`
  --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:34:18
   |
34 |     fn bad_chunk(error: String) -> Self {
   |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `error`
   --> packages/http3/src/hyper/async_impl/h3_client/dns.rs:127:18
    |
127 |     fn bad_chunk(error: String) -> Self {
    |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `error`
  --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:26:18
   |
26 |     fn bad_chunk(error: String) -> Self {
   |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: variable does not need to be mutable
   --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:116:20
    |
116 |     pub fn receive(mut self) -> AsyncStream<PoolClientWrapper> {
    |                    ----^^^^
    |                    |
    |                    help: remove this `mut`

warning: unused variable: `cx`
   --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:403:9
    |
403 |         cx: &mut Context,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: variable does not need to be mutable
   --> packages/http3/src/hyper/async_impl/h3_client/pool.rs:402:9
    |
402 |         mut self: Pin<&mut Self>,
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `converted_handler`
   --> packages/http3/src/stream.rs:465:13
    |
465 |         let converted_handler = move |chunk: HttpChunk| {
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_converted_handler`

warning: unused variable: `sender`
   --> packages/http3/src/stream.rs:471:82
    |
471 |         let new_inner = fluent_ai_async::AsyncStream::<HttpChunk>::with_channel(|sender| {
    |                                                                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_sender`

warning: unused variable: `error_message`
   --> packages/http3/src/wrappers.rs:236:18
    |
236 |     fn bad_chunk(error_message: String) -> Self {
    |                  ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_error_message`

warning: unused variable: `error`
   --> packages/http3/src/wrappers.rs:268:18
    |
268 |     fn bad_chunk(error: String) -> Self {
    |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

Some errors have detailed explanations: E0046, E0117, E0271, E0277, E0308, E0310, E0382, E0596, E0599...
For more information about an error, try `rustc --explain E0046`.
warning: `fluent_ai_http3` (lib) generated 84 warnings
error: could not compile `fluent_ai_http3` (lib) due to 77 previous errors; 84 warnings emitted
