use serde :: { Serialize , Deserialize } ; use std :: sync :: Arc ; use once_cell :: sync :: Lazy ; # [derive (Debug , Clone , PartialEq , Eq , Hash , Serialize , Deserialize)] pub enum Models { Ai21Jamba16Large , Ai21Jamba16Mini , AmazonNovaLiteV1 , AmazonNovaMicroV1 , AmazonNovaProV1 , AnthropicClaude35Haiku , AnthropicClaude35Sonnet , AnthropicClaude37Sonnet , AnthropicClaude37Sonnetthinking , AnthropicClaudeOpus4 , AnthropicClaudeSonnet4 , Chatgpt4OLatest , CodestralLatest , CohereCommandA , CohereCommandR7b122024 , CompoundBeta , CompoundBetaMini , DeepseekChat , DeepseekDeepseekChatV30324 , DeepseekDeepseekR10528 , DeepseekReasoner , DevstralMediumLatest , DevstralSmallLatest , Gemini20Flash , Gemini20FlashLite , Gemini25Flash , Gemini25FlashLitePreview0617 , Gemini25Pro , Gemma327BIt , GoogleGemini20Flash001 , GoogleGemini20FlashLite001 , GoogleGemini25Flash , GoogleGemini25FlashLitePreview0617 , GoogleGemini25Pro , GoogleGemma327BIt , Gpt35Turbo , Gpt41 , Gpt41Mini , Gpt41Nano , Gpt4O , Gpt4OMini , Gpt4OMiniSearchPreview , Gpt4OSearchPreview , Gpt4Turbo , Grok3 , Grok3Fast , Grok3Mini , Grok3MiniFast , Grok4 , Llama3370BVersatile , MagistralMediumLatest , MagistralSmallLatest , MetaLlamaLlama3370BInstruct , MetaLlamaLlama4Maverick , MetaLlamaLlama4Maverick17B128EInstruct , MetaLlamaLlama4Scout , MetaLlamaLlama4Scout17B16EInstruct , MinimaxMinimax01 , MistralEmbed , MistralMediumLatest , MistralSmallLatest , MistralaiCodestral2501 , MistralaiDevstralMedium , MistralaiDevstralSmall2505 , MistralaiMagistralMedium2506 , MistralaiMagistralMedium2506Thinking , MistralaiMagistralSmall2506 , MistralaiMistralMedium3 , MistralaiMistralSmall3224BInstruct , MoonshotaiKimiK2 , O3 , O3Mini , O3MiniHigh , O4Mini , O4MiniHigh , OpenaiChatgpt4OLatest , OpenaiGpt41 , OpenaiGpt41Mini , OpenaiGpt41Nano , OpenaiGpt4O , OpenaiGpt4OMini , OpenaiGpt4OMiniSearchPreview , OpenaiGpt4OSearchPreview , OpenaiO3 , OpenaiO3Mini , OpenaiO3MiniHigh , OpenaiO3Pro , OpenaiO4Mini , OpenaiO4MiniHigh , PerplexityR11776 , PerplexitySonar , PerplexitySonarDeepResearch , PerplexitySonarPro , PerplexitySonarReasoning , PerplexitySonarReasoningPro , QwenQwen2572BInstruct , QwenQwen25Coder32BInstruct , QwenQwen25Vl72BInstruct , QwenQwen3235BA22b , QwenQwen330BA3b , QwenQwen332B , QwenQwenMax , QwenQwenPlus , QwenQwenTurbo , QwenQwenVlPlus , QwenQwq32B , R11776 , Sonar , SonarDeepResearch , SonarPro , SonarReasoning , SonarReasoningPro , TextEmbedding004 , TextEmbedding3Large , TextEmbedding3Small , XAiGrok3 , XAiGrok3Mini , XAiGrok4 , } impl Models { # [doc = r" Get model info with zero allocation - blazing fast lookup"] # [inline] pub fn info (& self) -> crate :: model_info :: ModelInfoData { match self { Models :: Ai21Jamba16Large => { let function_name = format ! ("get_{}_info" , stringify ! (Ai21Jamba16Large) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Ai21Jamba16Large)) } , Models :: Ai21Jamba16Mini => { let function_name = format ! ("get_{}_info" , stringify ! (Ai21Jamba16Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Ai21Jamba16Mini)) } , Models :: AmazonNovaLiteV1 => { let function_name = format ! ("get_{}_info" , stringify ! (AmazonNovaLiteV1) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AmazonNovaLiteV1)) } , Models :: AmazonNovaMicroV1 => { let function_name = format ! ("get_{}_info" , stringify ! (AmazonNovaMicroV1) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AmazonNovaMicroV1)) } , Models :: AmazonNovaProV1 => { let function_name = format ! ("get_{}_info" , stringify ! (AmazonNovaProV1) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AmazonNovaProV1)) } , Models :: AnthropicClaude35Haiku => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude35Haiku) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude35Haiku)) } , Models :: AnthropicClaude35Sonnet => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude35Sonnet) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude35Sonnet)) } , Models :: AnthropicClaude37Sonnet => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude37Sonnet) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude37Sonnet)) } , Models :: AnthropicClaude37Sonnetthinking => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude37Sonnetthinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude37Sonnetthinking)) } , Models :: AnthropicClaudeOpus4 => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaudeOpus4) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaudeOpus4)) } , Models :: AnthropicClaudeSonnet4 => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaudeSonnet4) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaudeSonnet4)) } , Models :: Chatgpt4OLatest => { let function_name = format ! ("get_{}_info" , stringify ! (Chatgpt4OLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Chatgpt4OLatest)) } , Models :: CodestralLatest => { let function_name = format ! ("get_{}_info" , stringify ! (CodestralLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CodestralLatest)) } , Models :: CohereCommandA => { let function_name = format ! ("get_{}_info" , stringify ! (CohereCommandA) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CohereCommandA)) } , Models :: CohereCommandR7b122024 => { let function_name = format ! ("get_{}_info" , stringify ! (CohereCommandR7b122024) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CohereCommandR7b122024)) } , Models :: CompoundBeta => { let function_name = format ! ("get_{}_info" , stringify ! (CompoundBeta) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CompoundBeta)) } , Models :: CompoundBetaMini => { let function_name = format ! ("get_{}_info" , stringify ! (CompoundBetaMini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CompoundBetaMini)) } , Models :: DeepseekChat => { let function_name = format ! ("get_{}_info" , stringify ! (DeepseekChat) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DeepseekChat)) } , Models :: DeepseekDeepseekChatV30324 => { let function_name = format ! ("get_{}_info" , stringify ! (DeepseekDeepseekChatV30324) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DeepseekDeepseekChatV30324)) } , Models :: DeepseekDeepseekR10528 => { let function_name = format ! ("get_{}_info" , stringify ! (DeepseekDeepseekR10528) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DeepseekDeepseekR10528)) } , Models :: DeepseekReasoner => { let function_name = format ! ("get_{}_info" , stringify ! (DeepseekReasoner) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DeepseekReasoner)) } , Models :: DevstralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (DevstralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DevstralMediumLatest)) } , Models :: DevstralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (DevstralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DevstralSmallLatest)) } , Models :: Gemini20Flash => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini20Flash) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini20Flash)) } , Models :: Gemini20FlashLite => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini20FlashLite) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini20FlashLite)) } , Models :: Gemini25Flash => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25Flash) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25Flash)) } , Models :: Gemini25FlashLitePreview0617 => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25FlashLitePreview0617) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25FlashLitePreview0617)) } , Models :: Gemini25Pro => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25Pro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25Pro)) } , Models :: Gemma327BIt => { let function_name = format ! ("get_{}_info" , stringify ! (Gemma327BIt) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemma327BIt)) } , Models :: GoogleGemini20Flash001 => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemini20Flash001) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemini20Flash001)) } , Models :: GoogleGemini20FlashLite001 => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemini20FlashLite001) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemini20FlashLite001)) } , Models :: GoogleGemini25Flash => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemini25Flash) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemini25Flash)) } , Models :: GoogleGemini25FlashLitePreview0617 => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemini25FlashLitePreview0617) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemini25FlashLitePreview0617)) } , Models :: GoogleGemini25Pro => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemini25Pro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemini25Pro)) } , Models :: GoogleGemma327BIt => { let function_name = format ! ("get_{}_info" , stringify ! (GoogleGemma327BIt) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (GoogleGemma327BIt)) } , Models :: Gpt35Turbo => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt35Turbo) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt35Turbo)) } , Models :: Gpt41 => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41)) } , Models :: Gpt41Mini => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41Mini)) } , Models :: Gpt41Nano => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41Nano) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41Nano)) } , Models :: Gpt4O => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4O) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4O)) } , Models :: Gpt4OMini => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OMini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OMini)) } , Models :: Gpt4OMiniSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OMiniSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OMiniSearchPreview)) } , Models :: Gpt4OSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OSearchPreview)) } , Models :: Gpt4Turbo => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4Turbo) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4Turbo)) } , Models :: Grok3 => { let function_name = format ! ("get_{}_info" , stringify ! (Grok3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Grok3)) } , Models :: Grok3Fast => { let function_name = format ! ("get_{}_info" , stringify ! (Grok3Fast) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Grok3Fast)) } , Models :: Grok3Mini => { let function_name = format ! ("get_{}_info" , stringify ! (Grok3Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Grok3Mini)) } , Models :: Grok3MiniFast => { let function_name = format ! ("get_{}_info" , stringify ! (Grok3MiniFast) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Grok3MiniFast)) } , Models :: Grok4 => { let function_name = format ! ("get_{}_info" , stringify ! (Grok4) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Grok4)) } , Models :: Llama3370BVersatile => { let function_name = format ! ("get_{}_info" , stringify ! (Llama3370BVersatile) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Llama3370BVersatile)) } , Models :: MagistralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MagistralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MagistralMediumLatest)) } , Models :: MagistralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MagistralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MagistralSmallLatest)) } , Models :: MetaLlamaLlama3370BInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (MetaLlamaLlama3370BInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MetaLlamaLlama3370BInstruct)) } , Models :: MetaLlamaLlama4Maverick => { let function_name = format ! ("get_{}_info" , stringify ! (MetaLlamaLlama4Maverick) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MetaLlamaLlama4Maverick)) } , Models :: MetaLlamaLlama4Maverick17B128EInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (MetaLlamaLlama4Maverick17B128EInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MetaLlamaLlama4Maverick17B128EInstruct)) } , Models :: MetaLlamaLlama4Scout => { let function_name = format ! ("get_{}_info" , stringify ! (MetaLlamaLlama4Scout) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MetaLlamaLlama4Scout)) } , Models :: MetaLlamaLlama4Scout17B16EInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (MetaLlamaLlama4Scout17B16EInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MetaLlamaLlama4Scout17B16EInstruct)) } , Models :: MinimaxMinimax01 => { let function_name = format ! ("get_{}_info" , stringify ! (MinimaxMinimax01) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MinimaxMinimax01)) } , Models :: MistralEmbed => { let function_name = format ! ("get_{}_info" , stringify ! (MistralEmbed) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralEmbed)) } , Models :: MistralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MistralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralMediumLatest)) } , Models :: MistralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MistralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralSmallLatest)) } , Models :: MistralaiCodestral2501 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiCodestral2501) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiCodestral2501)) } , Models :: MistralaiDevstralMedium => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiDevstralMedium) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiDevstralMedium)) } , Models :: MistralaiDevstralSmall2505 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiDevstralSmall2505) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiDevstralSmall2505)) } , Models :: MistralaiMagistralMedium2506 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiMagistralMedium2506) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiMagistralMedium2506)) } , Models :: MistralaiMagistralMedium2506Thinking => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiMagistralMedium2506Thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiMagistralMedium2506Thinking)) } , Models :: MistralaiMagistralSmall2506 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiMagistralSmall2506) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiMagistralSmall2506)) } , Models :: MistralaiMistralMedium3 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiMistralMedium3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiMistralMedium3)) } , Models :: MistralaiMistralSmall3224BInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (MistralaiMistralSmall3224BInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralaiMistralSmall3224BInstruct)) } , Models :: MoonshotaiKimiK2 => { let function_name = format ! ("get_{}_info" , stringify ! (MoonshotaiKimiK2) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MoonshotaiKimiK2)) } , Models :: O3 => { let function_name = format ! ("get_{}_info" , stringify ! (O3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3)) } , Models :: O3Mini => { let function_name = format ! ("get_{}_info" , stringify ! (O3Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3Mini)) } , Models :: O3MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (O3MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3MiniHigh)) } , Models :: O4Mini => { let function_name = format ! ("get_{}_info" , stringify ! (O4Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O4Mini)) } , Models :: O4MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (O4MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O4MiniHigh)) } , Models :: OpenaiChatgpt4OLatest => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiChatgpt4OLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiChatgpt4OLatest)) } , Models :: OpenaiGpt41 => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt41) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt41)) } , Models :: OpenaiGpt41Mini => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt41Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt41Mini)) } , Models :: OpenaiGpt41Nano => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt41Nano) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt41Nano)) } , Models :: OpenaiGpt4O => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt4O) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt4O)) } , Models :: OpenaiGpt4OMini => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt4OMini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt4OMini)) } , Models :: OpenaiGpt4OMiniSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt4OMiniSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt4OMiniSearchPreview)) } , Models :: OpenaiGpt4OSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiGpt4OSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiGpt4OSearchPreview)) } , Models :: OpenaiO3 => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO3)) } , Models :: OpenaiO3Mini => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO3Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO3Mini)) } , Models :: OpenaiO3MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO3MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO3MiniHigh)) } , Models :: OpenaiO3Pro => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO3Pro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO3Pro)) } , Models :: OpenaiO4Mini => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO4Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO4Mini)) } , Models :: OpenaiO4MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (OpenaiO4MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (OpenaiO4MiniHigh)) } , Models :: PerplexityR11776 => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexityR11776) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexityR11776)) } , Models :: PerplexitySonar => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexitySonar) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexitySonar)) } , Models :: PerplexitySonarDeepResearch => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexitySonarDeepResearch) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexitySonarDeepResearch)) } , Models :: PerplexitySonarPro => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexitySonarPro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexitySonarPro)) } , Models :: PerplexitySonarReasoning => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexitySonarReasoning) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexitySonarReasoning)) } , Models :: PerplexitySonarReasoningPro => { let function_name = format ! ("get_{}_info" , stringify ! (PerplexitySonarReasoningPro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (PerplexitySonarReasoningPro)) } , Models :: QwenQwen2572BInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen2572BInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen2572BInstruct)) } , Models :: QwenQwen25Coder32BInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen25Coder32BInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen25Coder32BInstruct)) } , Models :: QwenQwen25Vl72BInstruct => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen25Vl72BInstruct) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen25Vl72BInstruct)) } , Models :: QwenQwen3235BA22b => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen3235BA22b) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen3235BA22b)) } , Models :: QwenQwen330BA3b => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen330BA3b) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen330BA3b)) } , Models :: QwenQwen332B => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwen332B) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwen332B)) } , Models :: QwenQwenMax => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwenMax) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwenMax)) } , Models :: QwenQwenPlus => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwenPlus) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwenPlus)) } , Models :: QwenQwenTurbo => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwenTurbo) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwenTurbo)) } , Models :: QwenQwenVlPlus => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwenVlPlus) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwenVlPlus)) } , Models :: QwenQwq32B => { let function_name = format ! ("get_{}_info" , stringify ! (QwenQwq32B) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (QwenQwq32B)) } , Models :: R11776 => { let function_name = format ! ("get_{}_info" , stringify ! (R11776) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (R11776)) } , Models :: Sonar => { let function_name = format ! ("get_{}_info" , stringify ! (Sonar) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Sonar)) } , Models :: SonarDeepResearch => { let function_name = format ! ("get_{}_info" , stringify ! (SonarDeepResearch) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (SonarDeepResearch)) } , Models :: SonarPro => { let function_name = format ! ("get_{}_info" , stringify ! (SonarPro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (SonarPro)) } , Models :: SonarReasoning => { let function_name = format ! ("get_{}_info" , stringify ! (SonarReasoning) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (SonarReasoning)) } , Models :: SonarReasoningPro => { let function_name = format ! ("get_{}_info" , stringify ! (SonarReasoningPro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (SonarReasoningPro)) } , Models :: TextEmbedding004 => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding004) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding004)) } , Models :: TextEmbedding3Large => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding3Large) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding3Large)) } , Models :: TextEmbedding3Small => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding3Small) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding3Small)) } , Models :: XAiGrok3 => { let function_name = format ! ("get_{}_info" , stringify ! (XAiGrok3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (XAiGrok3)) } , Models :: XAiGrok3Mini => { let function_name = format ! ("get_{}_info" , stringify ! (XAiGrok3Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (XAiGrok3Mini)) } , Models :: XAiGrok4 => { let function_name = format ! ("get_{}_info" , stringify ! (XAiGrok4) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (XAiGrok4)) } , } } # [doc = r" Get model name as static string - zero allocation"] # [inline] pub fn name (& self) -> & 'static str { match self { Models :: Ai21Jamba16Large => stringify ! (Ai21Jamba16Large) , Models :: Ai21Jamba16Mini => stringify ! (Ai21Jamba16Mini) , Models :: AmazonNovaLiteV1 => stringify ! (AmazonNovaLiteV1) , Models :: AmazonNovaMicroV1 => stringify ! (AmazonNovaMicroV1) , Models :: AmazonNovaProV1 => stringify ! (AmazonNovaProV1) , Models :: AnthropicClaude35Haiku => stringify ! (AnthropicClaude35Haiku) , Models :: AnthropicClaude35Sonnet => stringify ! (AnthropicClaude35Sonnet) , Models :: AnthropicClaude37Sonnet => stringify ! (AnthropicClaude37Sonnet) , Models :: AnthropicClaude37Sonnetthinking => stringify ! (AnthropicClaude37Sonnetthinking) , Models :: AnthropicClaudeOpus4 => stringify ! (AnthropicClaudeOpus4) , Models :: AnthropicClaudeSonnet4 => stringify ! (AnthropicClaudeSonnet4) , Models :: Chatgpt4OLatest => stringify ! (Chatgpt4OLatest) , Models :: CodestralLatest => stringify ! (CodestralLatest) , Models :: CohereCommandA => stringify ! (CohereCommandA) , Models :: CohereCommandR7b122024 => stringify ! (CohereCommandR7b122024) , Models :: CompoundBeta => stringify ! (CompoundBeta) , Models :: CompoundBetaMini => stringify ! (CompoundBetaMini) , Models :: DeepseekChat => stringify ! (DeepseekChat) , Models :: DeepseekDeepseekChatV30324 => stringify ! (DeepseekDeepseekChatV30324) , Models :: DeepseekDeepseekR10528 => stringify ! (DeepseekDeepseekR10528) , Models :: DeepseekReasoner => stringify ! (DeepseekReasoner) , Models :: DevstralMediumLatest => stringify ! (DevstralMediumLatest) , Models :: DevstralSmallLatest => stringify ! (DevstralSmallLatest) , Models :: Gemini20Flash => stringify ! (Gemini20Flash) , Models :: Gemini20FlashLite => stringify ! (Gemini20FlashLite) , Models :: Gemini25Flash => stringify ! (Gemini25Flash) , Models :: Gemini25FlashLitePreview0617 => stringify ! (Gemini25FlashLitePreview0617) , Models :: Gemini25Pro => stringify ! (Gemini25Pro) , Models :: Gemma327BIt => stringify ! (Gemma327BIt) , Models :: GoogleGemini20Flash001 => stringify ! (GoogleGemini20Flash001) , Models :: GoogleGemini20FlashLite001 => stringify ! (GoogleGemini20FlashLite001) , Models :: GoogleGemini25Flash => stringify ! (GoogleGemini25Flash) , Models :: GoogleGemini25FlashLitePreview0617 => stringify ! (GoogleGemini25FlashLitePreview0617) , Models :: GoogleGemini25Pro => stringify ! (GoogleGemini25Pro) , Models :: GoogleGemma327BIt => stringify ! (GoogleGemma327BIt) , Models :: Gpt35Turbo => stringify ! (Gpt35Turbo) , Models :: Gpt41 => stringify ! (Gpt41) , Models :: Gpt41Mini => stringify ! (Gpt41Mini) , Models :: Gpt41Nano => stringify ! (Gpt41Nano) , Models :: Gpt4O => stringify ! (Gpt4O) , Models :: Gpt4OMini => stringify ! (Gpt4OMini) , Models :: Gpt4OMiniSearchPreview => stringify ! (Gpt4OMiniSearchPreview) , Models :: Gpt4OSearchPreview => stringify ! (Gpt4OSearchPreview) , Models :: Gpt4Turbo => stringify ! (Gpt4Turbo) , Models :: Grok3 => stringify ! (Grok3) , Models :: Grok3Fast => stringify ! (Grok3Fast) , Models :: Grok3Mini => stringify ! (Grok3Mini) , Models :: Grok3MiniFast => stringify ! (Grok3MiniFast) , Models :: Grok4 => stringify ! (Grok4) , Models :: Llama3370BVersatile => stringify ! (Llama3370BVersatile) , Models :: MagistralMediumLatest => stringify ! (MagistralMediumLatest) , Models :: MagistralSmallLatest => stringify ! (MagistralSmallLatest) , Models :: MetaLlamaLlama3370BInstruct => stringify ! (MetaLlamaLlama3370BInstruct) , Models :: MetaLlamaLlama4Maverick => stringify ! (MetaLlamaLlama4Maverick) , Models :: MetaLlamaLlama4Maverick17B128EInstruct => stringify ! (MetaLlamaLlama4Maverick17B128EInstruct) , Models :: MetaLlamaLlama4Scout => stringify ! (MetaLlamaLlama4Scout) , Models :: MetaLlamaLlama4Scout17B16EInstruct => stringify ! (MetaLlamaLlama4Scout17B16EInstruct) , Models :: MinimaxMinimax01 => stringify ! (MinimaxMinimax01) , Models :: MistralEmbed => stringify ! (MistralEmbed) , Models :: MistralMediumLatest => stringify ! (MistralMediumLatest) , Models :: MistralSmallLatest => stringify ! (MistralSmallLatest) , Models :: MistralaiCodestral2501 => stringify ! (MistralaiCodestral2501) , Models :: MistralaiDevstralMedium => stringify ! (MistralaiDevstralMedium) , Models :: MistralaiDevstralSmall2505 => stringify ! (MistralaiDevstralSmall2505) , Models :: MistralaiMagistralMedium2506 => stringify ! (MistralaiMagistralMedium2506) , Models :: MistralaiMagistralMedium2506Thinking => stringify ! (MistralaiMagistralMedium2506Thinking) , Models :: MistralaiMagistralSmall2506 => stringify ! (MistralaiMagistralSmall2506) , Models :: MistralaiMistralMedium3 => stringify ! (MistralaiMistralMedium3) , Models :: MistralaiMistralSmall3224BInstruct => stringify ! (MistralaiMistralSmall3224BInstruct) , Models :: MoonshotaiKimiK2 => stringify ! (MoonshotaiKimiK2) , Models :: O3 => stringify ! (O3) , Models :: O3Mini => stringify ! (O3Mini) , Models :: O3MiniHigh => stringify ! (O3MiniHigh) , Models :: O4Mini => stringify ! (O4Mini) , Models :: O4MiniHigh => stringify ! (O4MiniHigh) , Models :: OpenaiChatgpt4OLatest => stringify ! (OpenaiChatgpt4OLatest) , Models :: OpenaiGpt41 => stringify ! (OpenaiGpt41) , Models :: OpenaiGpt41Mini => stringify ! (OpenaiGpt41Mini) , Models :: OpenaiGpt41Nano => stringify ! (OpenaiGpt41Nano) , Models :: OpenaiGpt4O => stringify ! (OpenaiGpt4O) , Models :: OpenaiGpt4OMini => stringify ! (OpenaiGpt4OMini) , Models :: OpenaiGpt4OMiniSearchPreview => stringify ! (OpenaiGpt4OMiniSearchPreview) , Models :: OpenaiGpt4OSearchPreview => stringify ! (OpenaiGpt4OSearchPreview) , Models :: OpenaiO3 => stringify ! (OpenaiO3) , Models :: OpenaiO3Mini => stringify ! (OpenaiO3Mini) , Models :: OpenaiO3MiniHigh => stringify ! (OpenaiO3MiniHigh) , Models :: OpenaiO3Pro => stringify ! (OpenaiO3Pro) , Models :: OpenaiO4Mini => stringify ! (OpenaiO4Mini) , Models :: OpenaiO4MiniHigh => stringify ! (OpenaiO4MiniHigh) , Models :: PerplexityR11776 => stringify ! (PerplexityR11776) , Models :: PerplexitySonar => stringify ! (PerplexitySonar) , Models :: PerplexitySonarDeepResearch => stringify ! (PerplexitySonarDeepResearch) , Models :: PerplexitySonarPro => stringify ! (PerplexitySonarPro) , Models :: PerplexitySonarReasoning => stringify ! (PerplexitySonarReasoning) , Models :: PerplexitySonarReasoningPro => stringify ! (PerplexitySonarReasoningPro) , Models :: QwenQwen2572BInstruct => stringify ! (QwenQwen2572BInstruct) , Models :: QwenQwen25Coder32BInstruct => stringify ! (QwenQwen25Coder32BInstruct) , Models :: QwenQwen25Vl72BInstruct => stringify ! (QwenQwen25Vl72BInstruct) , Models :: QwenQwen3235BA22b => stringify ! (QwenQwen3235BA22b) , Models :: QwenQwen330BA3b => stringify ! (QwenQwen330BA3b) , Models :: QwenQwen332B => stringify ! (QwenQwen332B) , Models :: QwenQwenMax => stringify ! (QwenQwenMax) , Models :: QwenQwenPlus => stringify ! (QwenQwenPlus) , Models :: QwenQwenTurbo => stringify ! (QwenQwenTurbo) , Models :: QwenQwenVlPlus => stringify ! (QwenQwenVlPlus) , Models :: QwenQwq32B => stringify ! (QwenQwq32B) , Models :: R11776 => stringify ! (R11776) , Models :: Sonar => stringify ! (Sonar) , Models :: SonarDeepResearch => stringify ! (SonarDeepResearch) , Models :: SonarPro => stringify ! (SonarPro) , Models :: SonarReasoning => stringify ! (SonarReasoning) , Models :: SonarReasoningPro => stringify ! (SonarReasoningPro) , Models :: TextEmbedding004 => stringify ! (TextEmbedding004) , Models :: TextEmbedding3Large => stringify ! (TextEmbedding3Large) , Models :: TextEmbedding3Small => stringify ! (TextEmbedding3Small) , Models :: XAiGrok3 => stringify ! (XAiGrok3) , Models :: XAiGrok3Mini => stringify ! (XAiGrok3Mini) , Models :: XAiGrok4 => stringify ! (XAiGrok4) , } } # [doc = r" Get provider name from model info - zero allocation"] # [inline] pub fn provider (& self) -> String { self . info () . provider_name } }