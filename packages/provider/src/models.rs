use serde :: { Serialize , Deserialize } ; use std :: sync :: Arc ; use once_cell :: sync :: Lazy ; # [derive (Debug , Clone , PartialEq , Eq , Hash , Serialize , Deserialize)] pub enum Models { AnthropicClaude35Haiku20241022V10 , AnthropicClaude35Sonnet20241022V20 , Chatgpt4OLatest , Claude35Haiku20241022 , Claude35Sonnet20241022 , Claude35SonnetV220241022 , Claude37Sonnet20250219 , Claude37Sonnet20250219Thinking , ClaudeOpus420250514 , ClaudeOpus420250514Thinking , ClaudeSonnet420250514 , ClaudeSonnet420250514Thinking , Codestral2501 , CodestralLatest , CohereEmbedEnglishV3 , CohereEmbedMultilingualV3 , CommandA032025 , CommandR7b122024 , DevstralMediumLatest , DevstralSmallLatest , EmbedEnglishV30 , EmbedMultilingualV30 , EmbedV40 , Gemini20Flash001 , Gemini20FlashLite001 , Gemini25Flash , Gemini25FlashLitePreview0617 , Gemini25Pro , Gpt35Turbo , Gpt41 , Gpt41Mini , Gpt41Nano , Gpt4O , Gpt4OMini , Gpt4OMiniSearchPreview , Gpt4OSearchPreview , Gpt4Turbo , JambaLarge , JambaMini , MagistralMediumLatest , MagistralSmallLatest , MistralEmbed , MistralMediumLatest , MistralSmall2503 , MistralSmallLatest , O3 , O3Mini , O3MiniHigh , O4Mini , O4MiniHigh , RerankEnglishV30 , RerankMultilingualV30 , RerankV35 , TextEmbedding005 , TextEmbedding3Large , TextEmbedding3Small , TextMultilingualEmbedding002 , UsAmazonNovaLiteV10 , UsAmazonNovaMicroV10 , UsAmazonNovaPremierV10 , UsAmazonNovaProV10 , UsAnthropicClaude37Sonnet20250219V10 , UsAnthropicClaude37Sonnet20250219V10thinking , UsAnthropicClaudeOpus420250514V10 , UsAnthropicClaudeOpus420250514V10thinking , UsAnthropicClaudeSonnet420250514V10 , UsAnthropicClaudeSonnet420250514V10thinking , UsDeepseekR1V10 , UsMetaLlama3370BInstructV10 , UsMetaLlama4Maverick17BInstructV10 , UsMetaLlama4Scout17BInstructV10 , } impl Models { # [doc = r" Get model info with zero allocation - blazing fast lookup"] # [inline] pub fn info (& self) -> crate :: model_info :: ModelInfoData { match self { Models :: AnthropicClaude35Haiku20241022V10 => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude35Haiku20241022V10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude35Haiku20241022V10)) } , Models :: AnthropicClaude35Sonnet20241022V20 => { let function_name = format ! ("get_{}_info" , stringify ! (AnthropicClaude35Sonnet20241022V20) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (AnthropicClaude35Sonnet20241022V20)) } , Models :: Chatgpt4OLatest => { let function_name = format ! ("get_{}_info" , stringify ! (Chatgpt4OLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Chatgpt4OLatest)) } , Models :: Claude35Haiku20241022 => { let function_name = format ! ("get_{}_info" , stringify ! (Claude35Haiku20241022) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Claude35Haiku20241022)) } , Models :: Claude35Sonnet20241022 => { let function_name = format ! ("get_{}_info" , stringify ! (Claude35Sonnet20241022) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Claude35Sonnet20241022)) } , Models :: Claude35SonnetV220241022 => { let function_name = format ! ("get_{}_info" , stringify ! (Claude35SonnetV220241022) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Claude35SonnetV220241022)) } , Models :: Claude37Sonnet20250219 => { let function_name = format ! ("get_{}_info" , stringify ! (Claude37Sonnet20250219) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Claude37Sonnet20250219)) } , Models :: Claude37Sonnet20250219Thinking => { let function_name = format ! ("get_{}_info" , stringify ! (Claude37Sonnet20250219Thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Claude37Sonnet20250219Thinking)) } , Models :: ClaudeOpus420250514 => { let function_name = format ! ("get_{}_info" , stringify ! (ClaudeOpus420250514) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (ClaudeOpus420250514)) } , Models :: ClaudeOpus420250514Thinking => { let function_name = format ! ("get_{}_info" , stringify ! (ClaudeOpus420250514Thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (ClaudeOpus420250514Thinking)) } , Models :: ClaudeSonnet420250514 => { let function_name = format ! ("get_{}_info" , stringify ! (ClaudeSonnet420250514) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (ClaudeSonnet420250514)) } , Models :: ClaudeSonnet420250514Thinking => { let function_name = format ! ("get_{}_info" , stringify ! (ClaudeSonnet420250514Thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (ClaudeSonnet420250514Thinking)) } , Models :: Codestral2501 => { let function_name = format ! ("get_{}_info" , stringify ! (Codestral2501) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Codestral2501)) } , Models :: CodestralLatest => { let function_name = format ! ("get_{}_info" , stringify ! (CodestralLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CodestralLatest)) } , Models :: CohereEmbedEnglishV3 => { let function_name = format ! ("get_{}_info" , stringify ! (CohereEmbedEnglishV3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CohereEmbedEnglishV3)) } , Models :: CohereEmbedMultilingualV3 => { let function_name = format ! ("get_{}_info" , stringify ! (CohereEmbedMultilingualV3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CohereEmbedMultilingualV3)) } , Models :: CommandA032025 => { let function_name = format ! ("get_{}_info" , stringify ! (CommandA032025) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CommandA032025)) } , Models :: CommandR7b122024 => { let function_name = format ! ("get_{}_info" , stringify ! (CommandR7b122024) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (CommandR7b122024)) } , Models :: DevstralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (DevstralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DevstralMediumLatest)) } , Models :: DevstralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (DevstralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (DevstralSmallLatest)) } , Models :: EmbedEnglishV30 => { let function_name = format ! ("get_{}_info" , stringify ! (EmbedEnglishV30) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (EmbedEnglishV30)) } , Models :: EmbedMultilingualV30 => { let function_name = format ! ("get_{}_info" , stringify ! (EmbedMultilingualV30) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (EmbedMultilingualV30)) } , Models :: EmbedV40 => { let function_name = format ! ("get_{}_info" , stringify ! (EmbedV40) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (EmbedV40)) } , Models :: Gemini20Flash001 => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini20Flash001) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini20Flash001)) } , Models :: Gemini20FlashLite001 => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini20FlashLite001) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini20FlashLite001)) } , Models :: Gemini25Flash => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25Flash) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25Flash)) } , Models :: Gemini25FlashLitePreview0617 => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25FlashLitePreview0617) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25FlashLitePreview0617)) } , Models :: Gemini25Pro => { let function_name = format ! ("get_{}_info" , stringify ! (Gemini25Pro) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gemini25Pro)) } , Models :: Gpt35Turbo => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt35Turbo) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt35Turbo)) } , Models :: Gpt41 => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41)) } , Models :: Gpt41Mini => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41Mini)) } , Models :: Gpt41Nano => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt41Nano) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt41Nano)) } , Models :: Gpt4O => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4O) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4O)) } , Models :: Gpt4OMini => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OMini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OMini)) } , Models :: Gpt4OMiniSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OMiniSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OMiniSearchPreview)) } , Models :: Gpt4OSearchPreview => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4OSearchPreview) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4OSearchPreview)) } , Models :: Gpt4Turbo => { let function_name = format ! ("get_{}_info" , stringify ! (Gpt4Turbo) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (Gpt4Turbo)) } , Models :: JambaLarge => { let function_name = format ! ("get_{}_info" , stringify ! (JambaLarge) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (JambaLarge)) } , Models :: JambaMini => { let function_name = format ! ("get_{}_info" , stringify ! (JambaMini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (JambaMini)) } , Models :: MagistralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MagistralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MagistralMediumLatest)) } , Models :: MagistralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MagistralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MagistralSmallLatest)) } , Models :: MistralEmbed => { let function_name = format ! ("get_{}_info" , stringify ! (MistralEmbed) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralEmbed)) } , Models :: MistralMediumLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MistralMediumLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralMediumLatest)) } , Models :: MistralSmall2503 => { let function_name = format ! ("get_{}_info" , stringify ! (MistralSmall2503) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralSmall2503)) } , Models :: MistralSmallLatest => { let function_name = format ! ("get_{}_info" , stringify ! (MistralSmallLatest) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (MistralSmallLatest)) } , Models :: O3 => { let function_name = format ! ("get_{}_info" , stringify ! (O3) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3)) } , Models :: O3Mini => { let function_name = format ! ("get_{}_info" , stringify ! (O3Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3Mini)) } , Models :: O3MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (O3MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O3MiniHigh)) } , Models :: O4Mini => { let function_name = format ! ("get_{}_info" , stringify ! (O4Mini) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O4Mini)) } , Models :: O4MiniHigh => { let function_name = format ! ("get_{}_info" , stringify ! (O4MiniHigh) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (O4MiniHigh)) } , Models :: RerankEnglishV30 => { let function_name = format ! ("get_{}_info" , stringify ! (RerankEnglishV30) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (RerankEnglishV30)) } , Models :: RerankMultilingualV30 => { let function_name = format ! ("get_{}_info" , stringify ! (RerankMultilingualV30) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (RerankMultilingualV30)) } , Models :: RerankV35 => { let function_name = format ! ("get_{}_info" , stringify ! (RerankV35) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (RerankV35)) } , Models :: TextEmbedding005 => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding005) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding005)) } , Models :: TextEmbedding3Large => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding3Large) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding3Large)) } , Models :: TextEmbedding3Small => { let function_name = format ! ("get_{}_info" , stringify ! (TextEmbedding3Small) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextEmbedding3Small)) } , Models :: TextMultilingualEmbedding002 => { let function_name = format ! ("get_{}_info" , stringify ! (TextMultilingualEmbedding002) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (TextMultilingualEmbedding002)) } , Models :: UsAmazonNovaLiteV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAmazonNovaLiteV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAmazonNovaLiteV10)) } , Models :: UsAmazonNovaMicroV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAmazonNovaMicroV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAmazonNovaMicroV10)) } , Models :: UsAmazonNovaPremierV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAmazonNovaPremierV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAmazonNovaPremierV10)) } , Models :: UsAmazonNovaProV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAmazonNovaProV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAmazonNovaProV10)) } , Models :: UsAnthropicClaude37Sonnet20250219V10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaude37Sonnet20250219V10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaude37Sonnet20250219V10)) } , Models :: UsAnthropicClaude37Sonnet20250219V10thinking => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaude37Sonnet20250219V10thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaude37Sonnet20250219V10thinking)) } , Models :: UsAnthropicClaudeOpus420250514V10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaudeOpus420250514V10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaudeOpus420250514V10)) } , Models :: UsAnthropicClaudeOpus420250514V10thinking => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaudeOpus420250514V10thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaudeOpus420250514V10thinking)) } , Models :: UsAnthropicClaudeSonnet420250514V10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaudeSonnet420250514V10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaudeSonnet420250514V10)) } , Models :: UsAnthropicClaudeSonnet420250514V10thinking => { let function_name = format ! ("get_{}_info" , stringify ! (UsAnthropicClaudeSonnet420250514V10thinking) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsAnthropicClaudeSonnet420250514V10thinking)) } , Models :: UsDeepseekR1V10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsDeepseekR1V10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsDeepseekR1V10)) } , Models :: UsMetaLlama3370BInstructV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsMetaLlama3370BInstructV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsMetaLlama3370BInstructV10)) } , Models :: UsMetaLlama4Maverick17BInstructV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsMetaLlama4Maverick17BInstructV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsMetaLlama4Maverick17BInstructV10)) } , Models :: UsMetaLlama4Scout17BInstructV10 => { let function_name = format ! ("get_{}_info" , stringify ! (UsMetaLlama4Scout17BInstructV10) . to_lowercase ()) ; crate :: model_info :: get_model_info_by_name (stringify ! (UsMetaLlama4Scout17BInstructV10)) } , } } # [doc = r" Get model name as static string - zero allocation"] # [inline] pub fn name (& self) -> & 'static str { match self { Models :: AnthropicClaude35Haiku20241022V10 => stringify ! (AnthropicClaude35Haiku20241022V10) , Models :: AnthropicClaude35Sonnet20241022V20 => stringify ! (AnthropicClaude35Sonnet20241022V20) , Models :: Chatgpt4OLatest => stringify ! (Chatgpt4OLatest) , Models :: Claude35Haiku20241022 => stringify ! (Claude35Haiku20241022) , Models :: Claude35Sonnet20241022 => stringify ! (Claude35Sonnet20241022) , Models :: Claude35SonnetV220241022 => stringify ! (Claude35SonnetV220241022) , Models :: Claude37Sonnet20250219 => stringify ! (Claude37Sonnet20250219) , Models :: Claude37Sonnet20250219Thinking => stringify ! (Claude37Sonnet20250219Thinking) , Models :: ClaudeOpus420250514 => stringify ! (ClaudeOpus420250514) , Models :: ClaudeOpus420250514Thinking => stringify ! (ClaudeOpus420250514Thinking) , Models :: ClaudeSonnet420250514 => stringify ! (ClaudeSonnet420250514) , Models :: ClaudeSonnet420250514Thinking => stringify ! (ClaudeSonnet420250514Thinking) , Models :: Codestral2501 => stringify ! (Codestral2501) , Models :: CodestralLatest => stringify ! (CodestralLatest) , Models :: CohereEmbedEnglishV3 => stringify ! (CohereEmbedEnglishV3) , Models :: CohereEmbedMultilingualV3 => stringify ! (CohereEmbedMultilingualV3) , Models :: CommandA032025 => stringify ! (CommandA032025) , Models :: CommandR7b122024 => stringify ! (CommandR7b122024) , Models :: DevstralMediumLatest => stringify ! (DevstralMediumLatest) , Models :: DevstralSmallLatest => stringify ! (DevstralSmallLatest) , Models :: EmbedEnglishV30 => stringify ! (EmbedEnglishV30) , Models :: EmbedMultilingualV30 => stringify ! (EmbedMultilingualV30) , Models :: EmbedV40 => stringify ! (EmbedV40) , Models :: Gemini20Flash001 => stringify ! (Gemini20Flash001) , Models :: Gemini20FlashLite001 => stringify ! (Gemini20FlashLite001) , Models :: Gemini25Flash => stringify ! (Gemini25Flash) , Models :: Gemini25FlashLitePreview0617 => stringify ! (Gemini25FlashLitePreview0617) , Models :: Gemini25Pro => stringify ! (Gemini25Pro) , Models :: Gpt35Turbo => stringify ! (Gpt35Turbo) , Models :: Gpt41 => stringify ! (Gpt41) , Models :: Gpt41Mini => stringify ! (Gpt41Mini) , Models :: Gpt41Nano => stringify ! (Gpt41Nano) , Models :: Gpt4O => stringify ! (Gpt4O) , Models :: Gpt4OMini => stringify ! (Gpt4OMini) , Models :: Gpt4OMiniSearchPreview => stringify ! (Gpt4OMiniSearchPreview) , Models :: Gpt4OSearchPreview => stringify ! (Gpt4OSearchPreview) , Models :: Gpt4Turbo => stringify ! (Gpt4Turbo) , Models :: JambaLarge => stringify ! (JambaLarge) , Models :: JambaMini => stringify ! (JambaMini) , Models :: MagistralMediumLatest => stringify ! (MagistralMediumLatest) , Models :: MagistralSmallLatest => stringify ! (MagistralSmallLatest) , Models :: MistralEmbed => stringify ! (MistralEmbed) , Models :: MistralMediumLatest => stringify ! (MistralMediumLatest) , Models :: MistralSmall2503 => stringify ! (MistralSmall2503) , Models :: MistralSmallLatest => stringify ! (MistralSmallLatest) , Models :: O3 => stringify ! (O3) , Models :: O3Mini => stringify ! (O3Mini) , Models :: O3MiniHigh => stringify ! (O3MiniHigh) , Models :: O4Mini => stringify ! (O4Mini) , Models :: O4MiniHigh => stringify ! (O4MiniHigh) , Models :: RerankEnglishV30 => stringify ! (RerankEnglishV30) , Models :: RerankMultilingualV30 => stringify ! (RerankMultilingualV30) , Models :: RerankV35 => stringify ! (RerankV35) , Models :: TextEmbedding005 => stringify ! (TextEmbedding005) , Models :: TextEmbedding3Large => stringify ! (TextEmbedding3Large) , Models :: TextEmbedding3Small => stringify ! (TextEmbedding3Small) , Models :: TextMultilingualEmbedding002 => stringify ! (TextMultilingualEmbedding002) , Models :: UsAmazonNovaLiteV10 => stringify ! (UsAmazonNovaLiteV10) , Models :: UsAmazonNovaMicroV10 => stringify ! (UsAmazonNovaMicroV10) , Models :: UsAmazonNovaPremierV10 => stringify ! (UsAmazonNovaPremierV10) , Models :: UsAmazonNovaProV10 => stringify ! (UsAmazonNovaProV10) , Models :: UsAnthropicClaude37Sonnet20250219V10 => stringify ! (UsAnthropicClaude37Sonnet20250219V10) , Models :: UsAnthropicClaude37Sonnet20250219V10thinking => stringify ! (UsAnthropicClaude37Sonnet20250219V10thinking) , Models :: UsAnthropicClaudeOpus420250514V10 => stringify ! (UsAnthropicClaudeOpus420250514V10) , Models :: UsAnthropicClaudeOpus420250514V10thinking => stringify ! (UsAnthropicClaudeOpus420250514V10thinking) , Models :: UsAnthropicClaudeSonnet420250514V10 => stringify ! (UsAnthropicClaudeSonnet420250514V10) , Models :: UsAnthropicClaudeSonnet420250514V10thinking => stringify ! (UsAnthropicClaudeSonnet420250514V10thinking) , Models :: UsDeepseekR1V10 => stringify ! (UsDeepseekR1V10) , Models :: UsMetaLlama3370BInstructV10 => stringify ! (UsMetaLlama3370BInstructV10) , Models :: UsMetaLlama4Maverick17BInstructV10 => stringify ! (UsMetaLlama4Maverick17BInstructV10) , Models :: UsMetaLlama4Scout17BInstructV10 => stringify ! (UsMetaLlama4Scout17BInstructV10) , } } # [doc = r" Get provider name from model info - zero allocation"] # [inline] pub fn provider (& self) -> String { self . info () . provider_name } }