use serde :: { Serialize , Deserialize } ; # [derive (Debug , Clone , PartialEq , Eq , Hash , Serialize , Deserialize)] pub enum Providers { Ai21 , Bedrock , Claude , Cohere , Deepseek , Gemini , Groq , Mistral , Openai , Openrouter , Perplexity , Vertexai , Xai , }
// AUTO-GENERATED START
use crate :: models :: Models ; use cyrup_sugars :: ZeroOneOrMany ; impl Providers { # [doc = r" Get provider name as static string - zero allocation"] pub fn name (& self) -> & 'static str { match self { Providers :: Openai => "openai" , Providers :: Gemini => "gemini" , Providers :: Claude => "claude" , Providers :: Mistral => "mistral" , Providers :: Ai21 => "ai21" , Providers :: Cohere => "cohere" , Providers :: Xai => "xai" , Providers :: Perplexity => "perplexity" , Providers :: Groq => "groq" , Providers :: Vertexai => "vertexai" , Providers :: Bedrock => "bedrock" , Providers :: Deepseek => "deepseek" , Providers :: Openrouter => "openrouter" , } } # [doc = r" Get models for this provider - zero allocation"] pub fn models (& self) -> ZeroOneOrMany < Models > { match self { Providers :: Openai => ZeroOneOrMany :: Many (vec ! [Models :: Gpt41 , Models :: Gpt41Mini , Models :: Gpt41Nano , Models :: Gpt4O , Models :: Gpt4OSearchPreview , Models :: Gpt4OMini , Models :: Gpt4OMiniSearchPreview , Models :: Chatgpt4OLatest , Models :: O4Mini , Models :: O4MiniHigh , Models :: O3 , Models :: O3Mini , Models :: O3MiniHigh , Models :: Gpt4Turbo , Models :: Gpt35Turbo , Models :: TextEmbedding3Large , Models :: TextEmbedding3Small]) , Providers :: Gemini => ZeroOneOrMany :: Many (vec ! [Models :: Gemini25Flash , Models :: Gemini25Pro , Models :: Gemini25FlashLitePreview0617 , Models :: Gemini20Flash , Models :: Gemini20FlashLite , Models :: Gemma327BIt , Models :: TextEmbedding004]) , Providers :: Claude => ZeroOneOrMany :: Many (vec ! [Models :: ClaudeOpus420250514 , Models :: ClaudeOpus420250514Thinking , Models :: ClaudeSonnet420250514 , Models :: ClaudeSonnet420250514Thinking , Models :: Claude37Sonnet20250219 , Models :: Claude37Sonnet20250219Thinking , Models :: Claude35Sonnet20241022 , Models :: Claude35Haiku20241022]) , Providers :: Mistral => ZeroOneOrMany :: Many (vec ! [Models :: MistralMediumLatest , Models :: MistralSmallLatest , Models :: MagistralMediumLatest , Models :: MagistralSmallLatest , Models :: DevstralMediumLatest , Models :: DevstralSmallLatest , Models :: CodestralLatest , Models :: MistralEmbed]) , Providers :: Ai21 => ZeroOneOrMany :: Many (vec ! [Models :: JambaLarge , Models :: JambaMini]) , Providers :: Cohere => ZeroOneOrMany :: Many (vec ! [Models :: CommandA032025 , Models :: CommandR7b122024 , Models :: EmbedV40 , Models :: EmbedEnglishV30 , Models :: EmbedMultilingualV30 , Models :: RerankV35 , Models :: RerankEnglishV30 , Models :: RerankMultilingualV30]) , Providers :: Xai => ZeroOneOrMany :: Many (vec ! [Models :: Grok3 , Models :: Grok3Fast , Models :: Grok3Mini , Models :: Grok3MiniFast , Models :: Grok4]) , Providers :: Perplexity => ZeroOneOrMany :: Many (vec ! [Models :: SonarPro , Models :: Sonar , Models :: SonarReasoningPro , Models :: SonarReasoning , Models :: SonarDeepResearch , Models :: R11776]) , Providers :: Groq => ZeroOneOrMany :: Many (vec ! [Models :: MetaLlamaLlama4Maverick17B128EInstruct , Models :: MetaLlamaLlama4Scout17B16EInstruct , Models :: Llama3370BVersatile , Models :: QwenQwq32B , Models :: QwenQwen332B , Models :: CompoundBeta , Models :: CompoundBetaMini]) , Providers :: Vertexai => ZeroOneOrMany :: Many (vec ! [Models :: Gemini25Flash , Models :: Gemini25Pro , Models :: Gemini25FlashLitePreview0617 , Models :: Gemini20Flash001 , Models :: Gemini20FlashLite001 , Models :: ClaudeOpus420250514 , Models :: ClaudeOpus420250514Thinking , Models :: ClaudeSonnet420250514 , Models :: ClaudeSonnet420250514Thinking , Models :: Claude37Sonnet20250219 , Models :: Claude37Sonnet20250219Thinking , Models :: Claude35SonnetV220241022 , Models :: Claude35Haiku20241022 , Models :: MistralSmall2503 , Models :: Codestral2501 , Models :: TextEmbedding005 , Models :: TextMultilingualEmbedding002]) , Providers :: Bedrock => ZeroOneOrMany :: Many (vec ! [Models :: UsAnthropicClaudeOpus420250514V10 , Models :: UsAnthropicClaudeOpus420250514V10thinking , Models :: UsAnthropicClaudeSonnet420250514V10 , Models :: UsAnthropicClaudeSonnet420250514V10thinking , Models :: UsAnthropicClaude37Sonnet20250219V10 , Models :: UsAnthropicClaude37Sonnet20250219V10thinking , Models :: AnthropicClaude35Sonnet20241022V20 , Models :: AnthropicClaude35Haiku20241022V10 , Models :: UsMetaLlama4Maverick17BInstructV10 , Models :: UsMetaLlama4Scout17BInstructV10 , Models :: UsMetaLlama3370BInstructV10 , Models :: UsAmazonNovaPremierV10 , Models :: UsAmazonNovaProV10 , Models :: UsAmazonNovaLiteV10 , Models :: UsAmazonNovaMicroV10 , Models :: CohereEmbedEnglishV3 , Models :: CohereEmbedMultilingualV3 , Models :: UsDeepseekR1V10]) , Providers :: Deepseek => ZeroOneOrMany :: Many (vec ! [Models :: DeepseekChat , Models :: DeepseekReasoner]) , Providers :: Openrouter => ZeroOneOrMany :: Many (vec ! [Models :: OpenaiGpt41 , Models :: OpenaiGpt41Mini , Models :: OpenaiGpt41Nano , Models :: OpenaiGpt4O , Models :: OpenaiGpt4OSearchPreview , Models :: OpenaiGpt4OMini , Models :: OpenaiGpt4OMiniSearchPreview , Models :: OpenaiChatgpt4OLatest , Models :: OpenaiO4Mini , Models :: OpenaiO4MiniHigh , Models :: OpenaiO3Pro , Models :: OpenaiO3 , Models :: OpenaiO3Mini , Models :: OpenaiO3MiniHigh , Models :: GoogleGemini25Flash , Models :: GoogleGemini25Pro , Models :: GoogleGemini25FlashLitePreview0617 , Models :: GoogleGemini20Flash001 , Models :: GoogleGemini20FlashLite001 , Models :: GoogleGemma327BIt , Models :: AnthropicClaudeOpus4 , Models :: AnthropicClaudeSonnet4 , Models :: AnthropicClaude37Sonnet , Models :: AnthropicClaude37Sonnetthinking , Models :: AnthropicClaude35Sonnet , Models :: AnthropicClaude35Haiku , Models :: MetaLlamaLlama4Maverick , Models :: MetaLlamaLlama4Scout , Models :: MetaLlamaLlama3370BInstruct , Models :: MistralaiMistralMedium3 , Models :: MistralaiMistralSmall3224BInstruct , Models :: MistralaiMagistralMedium2506 , Models :: MistralaiMagistralMedium2506Thinking , Models :: MistralaiMagistralSmall2506 , Models :: MistralaiDevstralMedium , Models :: MistralaiDevstralSmall2505 , Models :: MistralaiCodestral2501 , Models :: Ai21Jamba16Large , Models :: Ai21Jamba16Mini , Models :: CohereCommandA , Models :: CohereCommandR7b122024 , Models :: DeepseekDeepseekChatV30324 , Models :: DeepseekDeepseekR10528 , Models :: QwenQwenMax , Models :: QwenQwenPlus , Models :: QwenQwenTurbo , Models :: QwenQwenVlPlus , Models :: QwenQwen3235BA22b , Models :: QwenQwen330BA3b , Models :: QwenQwen332B , Models :: QwenQwq32B , Models :: QwenQwen2572BInstruct , Models :: QwenQwen25Vl72BInstruct , Models :: QwenQwen25Coder32BInstruct , Models :: MoonshotaiKimiK2 , Models :: XAiGrok4 , Models :: XAiGrok3 , Models :: XAiGrok3Mini , Models :: AmazonNovaProV1 , Models :: AmazonNovaLiteV1 , Models :: AmazonNovaMicroV1 , Models :: PerplexitySonarPro , Models :: PerplexitySonar , Models :: PerplexitySonarReasoningPro , Models :: PerplexitySonarReasoning , Models :: PerplexitySonarDeepResearch , Models :: PerplexityR11776 , Models :: MinimaxMinimax01]) , } } # [doc = r" Create a Providers enum from a name string - only implemented providers"] pub fn from_name (name : & str) -> Option < Self > { match name { "openai" => Some (Providers :: Openai) , "gpt" => Some (Providers :: Openai) , "gemini" => Some (Providers :: Gemini) , "google" => Some (Providers :: Gemini) , "claude" => Some (Providers :: Claude) , "mistral" => Some (Providers :: Mistral) , "ai21" => Some (Providers :: Ai21) , "cohere" => Some (Providers :: Cohere) , "xai" => Some (Providers :: Xai) , "perplexity" => Some (Providers :: Perplexity) , "groq" => Some (Providers :: Groq) , "vertexai" => Some (Providers :: Vertexai) , "bedrock" => Some (Providers :: Bedrock) , "deepseek" => Some (Providers :: Deepseek) , "openrouter" => Some (Providers :: Openrouter) , _ => None , } } }
// AUTO-GENERATED END
