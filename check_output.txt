    Blocking waiting for file lock on build directory
    Checking fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
   Compiling fluent_ai_provider v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/provider)
warning: fluent_ai_provider@0.1.0: Build script simplified to unblock compilation
error[E0277]: `ChatSearchIndex` doesn't implement `std::fmt::Debug`
    --> packages/domain/src/chat/search.rs:1794:5
     |
1791 | #[derive(Debug)]
     |          ----- in this derive macro expansion
...
1794 |     search_index: Arc<ChatSearchIndex>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `ChatSearchIndex`
     |
     = note: add `#[derive(Debug)]` to `ChatSearchIndex` or manually `impl std::fmt::Debug for ChatSearchIndex`
     = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`
help: consider annotating `ChatSearchIndex` with `#[derive(Debug)]`
     |
158  + #[derive(Debug)]
159  | pub struct ChatSearchIndex {
     |

error[E0277]: the trait bound `CompiledTemplate: Serialize` is not satisfied
    --> packages/domain/src/chat/templates.rs:147:24
     |
147  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `CompiledTemplate`
...
163  | /     /// Compiled template
164  | |     compiled: Option<CompiledTemplate>,
     | |______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/templates.rs:164:15
     |
164  |     compiled: Option<CompiledTemplate>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1198 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/templates.rs:164:15
     |
164  |     compiled: Option<CompiledTemplate>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1198 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/templates.rs:147:35
    |
147 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1198 others
    = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:692:41
    |
692 |             "if" => self.parse_if_block(parts),
    |                          -------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                          |
    |                          arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:703:8
    |
703 |     fn parse_if_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
692 |             "if" => self.parse_if_block(&parts),
    |                                         +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:693:45
    |
693 |             "each" => self.parse_each_block(parts),
    |                            ---------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                            |
    |                            arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:723:8
    |
723 |     fn parse_each_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
693 |             "each" => self.parse_each_block(&parts),
    |                                             +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:694:45
    |
694 |             "with" => self.parse_with_block(parts),
    |                            ---------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                            |
    |                            arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:746:8
    |
746 |     fn parse_with_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
694 |             "with" => self.parse_with_block(&parts),
    |                                             +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:774:41
    |
774 |             "if" => self.parse_if_block(parts),
    |                          -------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                          |
    |                          arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:703:8
    |
703 |     fn parse_if_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
774 |             "if" => self.parse_if_block(&parts),
    |                                         +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:775:43
    |
775 |             "for" => self.parse_for_block(parts),
    |                           --------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                           |
    |                           arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:786:8
    |
786 |     fn parse_for_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
775 |             "for" => self.parse_for_block(&parts),
    |                                           +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:776:51
    |
776 |             "include" => self.parse_include_block(parts),
    |                               ------------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                               |
    |                               arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:805:8
    |
805 |     fn parse_include_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
776 |             "include" => self.parse_include_block(&parts),
    |                                                   +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:777:47
    |
777 |             "macro" => self.parse_macro_block(parts),
    |                             ----------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                             |
    |                             arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:823:8
    |
823 |     fn parse_macro_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
777 |             "macro" => self.parse_macro_block(&parts),
    |                                               +

error[E0308]: mismatched types
    --> packages/domain/src/chat/templates.rs:1153:49
     |
1153 |                         Ok(value.to_string() == right)
     |                            -----------------    ^^^^^ expected `Arc<str>`, found `&str`
     |                            |
     |                            expected because this is `Arc<str>`
     |
     = note: expected struct `Arc<str>`
             found reference `&str`
help: call `Into::into` on this expression to convert `&str` into `Arc<str>`
     |
1153 |                         Ok(value.to_string() == right.into())
     |                                                      +++++++

error[E0308]: mismatched types
    --> packages/domain/src/chat/templates.rs:1167:49
     |
1167 |                         Ok(value.to_string() != right)
     |                            -----------------    ^^^^^ expected `Arc<str>`, found `&str`
     |                            |
     |                            expected because this is `Arc<str>`
     |
     = note: expected struct `Arc<str>`
             found reference `&str`
help: call `Into::into` on this expression to convert `&str` into `Arc<str>`
     |
1167 |                         Ok(value.to_string() != right.into())
     |                                                      +++++++

error[E0277]: `TemplateManager` doesn't implement `std::fmt::Debug`
    --> packages/domain/src/chat/templates.rs:1713:5
     |
1710 | #[derive(Debug, Clone)]
     |          ----- in this derive macro expansion
...
1713 |     template_manager: Arc<TemplateManager>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `TemplateManager`
     |
     = note: add `#[derive(Debug)]` to `TemplateManager` or manually `impl std::fmt::Debug for TemplateManager`
     = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`
help: consider annotating `TemplateManager` with `#[derive(Debug)]`
     |
1304 + #[derive(Debug)]
1305 | pub struct TemplateManager {
     |

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:222:17
    |
221 |             return Err(CompletionCoreError::InvalidRequest(
    |                        ----------------------------------- arguments to this enum variant are incorrect
222 |                 "prompt cannot be empty",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:42:5
    |
42  |     InvalidRequest(String),
    |     ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:228:17
    |
227 |             return Err(CompletionCoreError::InvalidRequest(
    |                        ----------------------------------- arguments to this enum variant are incorrect
228 |                 "max_tokens must be > 0",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:42:5
    |
42  |     InvalidRequest(String),
    |     ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:274:56
    |
274 |             .map_err(|_| CompletionCoreError::Internal("invalid UTF-8 in response"))
    |                          ----------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                          |                             |
    |                          |                             expected `String`, found `&str`
    |                          arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:63:5
    |
63  |     Internal(String),
    |     ^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:403:17
    |
402 |             return Err(CompletionCoreError::Internal(
    |                        ----------------------------- arguments to this enum variant are incorrect
403 |                 "response text cannot be empty",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:63:5
    |
63  |     Internal(String),
    |     ^^^^^^^^

error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied
   --> packages/domain/src/completion/candle.rs:500:23
    |
500 |     let mut buffer = [std::mem::MaybeUninit::uninit(); 1024];
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`
    |
    = note: required for `MaybeUninit<T>` to implement `std::marker::Copy`
    = note: the `Copy` trait is required because this value will be copied for each element of the array
help: consider further restricting type parameter `T` with trait `Copy`
    |
498 |     F: FnOnce(&mut [std::mem::MaybeUninit<T>]) -> R, T: std::marker::Copy
    |                                                      ++++++++++++++++++++
help: create an inline `const` block
    |
500 |     let mut buffer = [const { std::mem::MaybeUninit::uninit() }; 1024];
    |                       +++++++                                 +

error[E0277]: the trait bound `&'a serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:35:28
     |
35   |     pub additional_params: Option<&'a Value>,
     |                            ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&'a serde_json::Value` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
             but it is implemented for `serde_json::Value`
     = help: for that trait implementation, expected `serde_json::Value`, found `&'a serde_json::Value`
     = note: required for `std::option::Option<&'a serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `&'a serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:35:28
     |
35   |     pub additional_params: Option<&'a Value>,
     |                            ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&'a serde_json::Value` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
             but it is implemented for `serde_json::Value`
     = help: for that trait implementation, expected `serde_json::Value`, found `&'a serde_json::Value`
     = note: required for `std::option::Option<&'a serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `&serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/completion/request.rs:17:35
   |
17 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&serde_json::Value`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&serde_json::Value` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&serde_json::Value`
           but it is implemented for `serde_json::Value`
   = help: for that trait implementation, expected `serde_json::Value`, found `&serde_json::Value`
   = note: required for `std::option::Option<&serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `SurrealDBMemoryManager` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/context/provider.rs:106:5
    |
104 | #[derive(Debug)]
    |          ----- in this derive macro expansion
105 | pub struct MemoryIntegration {
106 |     memory_manager: Arc<SurrealDBMemoryManager>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `SurrealDBMemoryManager`
    |
    = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`

error[E0277]: `(dyn fluent_ai_memory::vector::EmbeddingModel + 'static)` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/context/provider.rs:107:5
    |
104 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
107 |     embedding_model: Arc<dyn EmbeddingModel>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `(dyn fluent_ai_memory::vector::EmbeddingModel + 'static)`
    |
    = help: the following other types implement trait `std::fmt::Debug`:
              &dyn protobuf::reflect::message::generated::MessageFactory
              dyn ammonia::AttributeFilter
              dyn std::any::Any + std::marker::Send + Sync
              dyn std::any::Any + std::marker::Send
              dyn std::any::Any
              dyn tracing::Value

error[E0277]: the trait bound `std::string::String: From<T>` is not satisfied
   --> packages/domain/src/embedding/config.rs:136:43
    |
136 |         EmbeddingConfig::new().with_model(self)
    |                                ---------- ^^^^ the trait `From<T>` is not implemented for `std::string::String`
    |                                |
    |                                required by a bound introduced by this call
    |
    = note: required for `T` to implement `Into<std::string::String>`
note: required by a bound in `embedding::config::EmbeddingConfig::with_model`
   --> packages/domain/src/embedding/config.rs:75:45
    |
75  |     pub fn with_model(mut self, model: impl Into<String>) -> Self {
    |                                             ^^^^^^^^^^^^ required by this bound in `EmbeddingConfig::with_model`
help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement
    |
134 | impl<T: AsRef<str>> IntoEmbeddingConfig for T where std::string::String: From<T> {
    |                                               ++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> packages/domain/src/embedding/usage.rs:57:18
   |
57 |         self.add(&rhs)
   |              --- ^^^^ expected `EmbeddingUsage`, found `&EmbeddingUsage`
   |              |
   |              arguments to this method are incorrect
   |
help: the return type of this call is `&EmbeddingUsage` due to the type of the argument passed
  --> packages/domain/src/embedding/usage.rs:57:9
   |
57 |         self.add(&rhs)
   |         ^^^^^^^^^----^
   |                  |
   |                  this argument influences the return type of `add`
note: method defined here
  --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:93:8
   |
93 |     fn add(self, rhs: Rhs) -> Self::Output;
   |        ^^^
help: consider removing the borrow
   |
57 -         self.add(&rhs)
57 +         self.add(rhs)
   |

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:112:28
    |
112 |             system_prompt: system_prompt.clone(),
    |                            ^^^^^^^^^^^^^^^^^^^^^ expected `Cow<'_, str>`, found `String`
    |
    = note: expected enum `Cow<'_, str>`
             found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Cow<'_, str>`
    |
112 |             system_prompt: system_prompt.clone().into(),
    |                                                 +++++++

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:113:46
    |
113 |             chat_history: ZeroOneOrMany::One(SearchChatMessage::new("user", text)),
    |                           ------------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Message`, found `SearchChatMessage`
    |                           |
    |                           arguments to this enum variant are incorrect
    |
    = note: expected struct `message::Message`
               found struct `SearchChatMessage`
help: the type constructed contains `SearchChatMessage` due to the type of the argument passed
   --> packages/domain/src/extractor.rs:113:27
    |
113 |             chat_history: ZeroOneOrMany::One(SearchChatMessage::new("user", text)),
    |                           ^^^^^^^^^^^^^^^^^^^------------------------------------^
    |                                              |
    |                                              this argument influences the type of `One`
note: tuple variant defined here
   --> /Users/davidmaple/.cargo/git/checkouts/cyrup-sugars-291ac2b5c478a1ed/abb4fdb/packages/collections/src/zero_one_or_many.rs:54:5
    |
54  |     One(T),
    |     ^^^

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:116:26
    |
116 |             temperature: self.agent.temperature,
    |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `Option<f64>`
    |
    = note: expected type `f64`
               found enum `std::option::Option<f64>`
help: consider using `Option::expect` to unwrap the `std::option::Option<f64>` value, panicking if the value is an `Option::None`
    |
116 |             temperature: self.agent.temperature.expect("REASON"),
    |                                                +++++++++++++++++

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:117:25
    |
117 |             max_tokens: self.agent.max_tokens,
    |                         ^^^^^^^^^^^^^^^^^^^^^ expected `Option<NonZero<u64>>`, found `Option<u64>`
    |
    = note: expected enum `std::option::Option<NonZero<u64>>`
               found enum `std::option::Option<u64>`

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:119:32
    |
119 |             additional_params: self.agent.additional_params.clone(),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&Value>`, found `Option<Value>`
    |
    = note: expected enum `std::option::Option<&serde_json::Value>`
               found enum `std::option::Option<serde_json::Value>`
help: try using `.as_ref()` to convert `std::option::Option<serde_json::Value>` to `std::option::Option<&serde_json::Value>`
    |
119 |             additional_params: self.agent.additional_params.clone().as_ref(),
    |                                                                    +++++++++

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:291:9
    |
264 |     ) -> crate::async_task::AsyncStream<CompletionChunk> {
    |          ----------------------------------------------- expected `async_task::AsyncStream<CompletionChunk>` because of return type
...
291 |         Box::pin(tokio_stream::wrappers::UnboundedReceiverStream::new(rx))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `AsyncStream<CompletionChunk>`, found `Pin<Box<UnboundedReceiverStream<...>>>`
    |
    = note: expected struct `async_task::AsyncStream<CompletionChunk>`
               found struct `Pin<Box<UnboundedReceiverStream<CompletionChunk>>>`

error[E0308]: mismatched types
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ expected `&Vec<_, _>`, found `&AlignedActivationPattern`
...
22   |     #[serde(skip_serializing_if = "Vec::is_empty")]
     |                                   --------------- arguments to this function are incorrect
     |
     = note: expected reference `&Vec<_, _>`
                found reference `&AlignedActivationPattern`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2762:18
     |
2762 |     pub const fn is_empty(&self) -> bool {
     |                  ^^^^^^^^
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `CachePadded<AtomicAttentionWeights>`
...
25   | /     /// Atomic attention weights for concurrent updates
26   | |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     | |_______________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<CachePadded<AtomicAttentionWeights>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SegQueue<WorkingMemoryItem>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `SegQueue<WorkingMemoryItem>`
...
28   | /     /// Lock-free working memory queue
29   | |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     | |____________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SegQueue<WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<SegQueue<WorkingMemoryItem>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `SkipMap<Uuid, CognitiveMemoryEntry>`
...
31   | /     /// Long-term memory skip-list for O(log n) access
32   | |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     | |______________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SkipMap<Uuid, CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<memory::cognitive::types::TemporalContext>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
...
34   | /     /// Temporal context with optimized time operations
35   | |     temporal_context: Arc<CachePadded<TemporalContext>>,
     | |_______________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicF32>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `CachePadded<AtomicF32>`
...
37   | /     /// Atomic uncertainty and confidence tracking
38   | |     uncertainty: Arc<CachePadded<AtomicF32>>,
     | |____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<CognitiveStats>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `CachePadded<CognitiveStats>`
...
42   | /     /// Statistics for monitoring cognitive performance
43   | |     stats: Arc<CachePadded<CognitiveStats>>,
     | |___________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:26:24
     |
26   |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicAttentionWeights>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `SegQueue<WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:29:21
     |
29   |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<WorkingMemoryItem>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:32:23
     |
32   |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, CognitiveMemoryEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:35:23
     |
35   |     temporal_context: Arc<CachePadded<TemporalContext>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-9fdf17205760d6c7.long-type-3691011905771936976.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:38:18
     |
38   |     uncertainty: Arc<CachePadded<AtomicF32>>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:39:17
     |
39   |     confidence: Arc<CachePadded<AtomicF32>>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:40:21
     |
40   |     meta_awareness: Arc<CachePadded<AtomicF32>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:43:12
     |
43   |     stats: Arc<CachePadded<CognitiveStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:26:24
     |
26   |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicAttentionWeights>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `SegQueue<WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:29:21
     |
29   |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<WorkingMemoryItem>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:32:23
     |
32   |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, CognitiveMemoryEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:35:23
     |
35   |     temporal_context: Arc<CachePadded<TemporalContext>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-9fdf17205760d6c7.long-type-9401618490444029224.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:38:18
     |
38   |     uncertainty: Arc<CachePadded<AtomicF32>>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:39:17
     |
39   |     confidence: Arc<CachePadded<AtomicF32>>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:40:21
     |
40   |     meta_awareness: Arc<CachePadded<AtomicF32>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:43:12
     |
43   |     stats: Arc<CachePadded<CognitiveStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicAttentionWeights>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicAttentionWeights>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SegQueue<WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<WorkingMemoryItem>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<WorkingMemoryItem>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<SegQueue<WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, CognitiveMemoryEntry>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, CognitiveMemoryEntry>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<SkipMap<Uuid, CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-9fdf17205760d6c7.long-type-11247581397221567613.txt'
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1204 others
   = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ expected `&Vec<_, _>`, found `&AlignedCoherenceFingerprint`
...
397  |     #[serde(skip_serializing_if = "Vec::is_empty")]
     |                                   --------------- arguments to this function are incorrect
     |
     = note: expected reference `&Vec<_, _>`
                found reference `&AlignedCoherenceFingerprint`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2762:18
     |
2762 |     pub const fn is_empty(&self) -> bool {
     |                  ^^^^^^^^
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF32: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `AtomicF32`
...
406  | /     /// Atomic collapse probability tracking
407  | |     collapse_probability: Arc<AtomicF32>,
     | |________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<AtomicF32>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF64: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `AtomicF64`
...
409  | /     /// Quantum entropy measurement
410  | |     quantum_entropy: Arc<AtomicF64>,
     | |___________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
     = note: required for `Arc<AtomicF64>` to implement `Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:407:27
     |
407  |     collapse_probability: Arc<AtomicF32>,
     |                           ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:410:22
     |
410  |     quantum_entropy: Arc<AtomicF64>,
     |                      ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:407:27
     |
407  |     collapse_probability: Arc<AtomicF32>,
     |                           ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:410:22
     |
410  |     quantum_entropy: Arc<AtomicF64>,
     |                      ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1204 others
     = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/cognitive/types.rs:394:35
    |
394 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1204 others
    = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/cognitive/types.rs:394:35
    |
394 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1204 others
    = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0615]: attempted to take value of method `content` on type `Box<memory::primitives::node::MemoryNode>`
   --> packages/domain/src/memory/manager.rs:158:10
    |
158 |     node.content = String::new();
    |          ^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0308]: mismatched types
   --> packages/domain/src/memory/manager.rs:159:21
    |
159 |     node.metadata = MemoryMetadata::default();
    |     -------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<CachePadded<MemoryNodeMetadata>>`, found `MemoryMetadata`
    |     |
    |     expected due to the type of this binding
    |
    = note: expected struct `Arc<CachePadded<MemoryNodeMetadata>>`
               found struct `fluent_ai_memory::MemoryMetadata`

error[E0277]: `SurrealDBMemoryManager` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/memory/manager.rs:245:5
    |
242 | #[derive(Debug, Clone)]
    |          ----- in this derive macro expansion
...
245 |     memory: Arc<SurrealDBMemoryManager>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `SurrealDBMemoryManager`
    |
    = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`

error[E0308]: mismatched types
   --> packages/domain/src/memory/manager.rs:293:48
    |
293 |             let pending = memory.create_memory(memory_node);
    |                                  ------------- ^^^^^^^^^^^ expected `fluent_ai_memory::MemoryNode`, found `memory::primitives::node::MemoryNode`
    |                                  |
    |                                  arguments to this method are incorrect
    |
    = note: `memory::primitives::node::MemoryNode` and `fluent_ai_memory::MemoryNode` have similar names, but are actually distinct types
note: `memory::primitives::node::MemoryNode` is defined in the current crate
   --> packages/domain/src/memory/primitives/node.rs:28:1
    |
28  | pub struct MemoryNode {
    | ^^^^^^^^^^^^^^^^^^^^^
note: `fluent_ai_memory::MemoryNode` is defined in crate `fluent_ai_memory`
   --> /Volumes/samsung_t9/fluent-ai/packages/memory/src/memory/primitives/node.rs:14:1
    |
14  | pub struct MemoryNode {
    | ^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/memory/src/memory/manager/surreal.rs:239:8
    |
239 |     fn create_memory(&self, memory: MemoryNode) -> PendingMemory;
    |        ^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `StorageError` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/manager.rs:296:43
    |
296 |                 .map_err(|e| MemoryError::StorageError(e.to_string()))
    |                                           ^^^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:568:1
    |
568 | pub enum MemoryError {
    | -------------------- variant or associated item `StorageError` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
      memory::primitives::types::MemoryError::validation
   --> packages/domain/src/memory/primitives/types.rs:586:5
    |
586 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
592 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
598 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
604 |     pub fn validation(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing field `server` in initializer of `McpToolData`
   --> packages/domain/src/memory/tool.rs:112:20
    |
112 |         let data = McpToolData {
    |                    ^^^^^^^^^^^ missing `server`

error[E0277]: the trait bound `CompatibilityMode: Serialize` is not satisfied
    --> packages/domain/src/memory/mod.rs:101:24
     |
101  |   #[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
     |                          ^^^^^^^^^^^^^^^^ the trait `Serialize` is not implemented for `CompatibilityMode`
...
111  | /     /// Compatibility mode for legacy systems
112  | |     pub compatibility_mode: CompatibilityMode,
     | |_____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1221 others
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `serde::Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/mod.rs:112:29
     |
112  |     pub compatibility_mode: CompatibilityMode,
     |                             ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompatibilityMode`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1189 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/mod.rs:112:29
     |
112  |     pub compatibility_mode: CompatibilityMode,
     |                             ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompatibilityMode`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1189 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/mod.rs:101:42
    |
101 | #[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
    |                                          ^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompatibilityMode`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompatibilityMode` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1189 others
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `serde::Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CompatibilityMode: std::default::Default` is not satisfied
   --> packages/domain/src/memory/mod.rs:163:5
    |
157 | #[derive(Debug, Default)]
    |                 ------- in this derive macro expansion
...
163 |     compatibility_mode: CompatibilityMode,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `CompatibilityMode`

error[E0599]: no method named `with_performance_config` found for struct `memory::config::vector::VectorStoreConfig` in the current scope
   --> packages/domain/src/memory/mod.rs:260:22
    |
259 | /                 VectorStoreConfig::new(VectorStoreType::Memory, EmbeddingConfig::default(), 1536)?
260 | |                     .with_performance_config(PerformanceConfig::minimal()),
    | |_____________________-^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/domain/src/memory/config/vector.rs:18:1
    |
18  |   pub struct VectorStoreConfig {
    |   ---------------------------- method `with_performance_config` not found for this struct
    |
help: there is a method `with_index_config` with a similar name
    |
260 -                     .with_performance_config(PerformanceConfig::minimal()),
260 +                     .with_index_config(PerformanceConfig::minimal()),
    |

error[E0599]: no method named `with_performance_config` found for struct `memory::config::vector::VectorStoreConfig` in the current scope
   --> packages/domain/src/memory/mod.rs:282:22
    |
280 | /                 VectorStoreConfig::new(VectorStoreType::FAISS, EmbeddingConfig::default(), 1536)?
281 | |                     .with_index_config(IndexConfig::optimized(IndexType::IVFPQ, 1536, 1000000))
282 | |                     .with_performance_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
    | |_____________________-^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/domain/src/memory/config/vector.rs:18:1
    |
18  |   pub struct VectorStoreConfig {
    |   ---------------------------- method `with_performance_config` not found for this struct
    |
help: there is a method `with_index_config` with a similar name
    |
282 -                     .with_performance_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
282 +                     .with_index_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
    |

error[E0063]: missing field `timestamp` in initializer of `LegacyMessage`
   --> packages/domain/src/message.rs:205:9
    |
205 |         LegacyMessage {
    |         ^^^^^^^^^^^^^ missing `timestamp`

error[E0063]: missing field `timestamp` in initializer of `LegacyMessage`
   --> packages/domain/src/message.rs:214:9
    |
214 |         LegacyMessage {
    |         ^^^^^^^^^^^^^ missing `timestamp`

error[E0063]: missing field `timestamp` in initializer of `LegacyMessage`
   --> packages/domain/src/message.rs:223:9
    |
223 |         LegacyMessage {
    |         ^^^^^^^^^^^^^ missing `timestamp`

error[E0063]: missing field `timestamp` in initializer of `LegacyMessage`
   --> packages/domain/src/message.rs:232:9
    |
232 |         LegacyMessage {
    |         ^^^^^^^^^^^^^ missing `timestamp`

error[E0308]: mismatched types
   --> packages/domain/src/model/registry.rs:193:17
    |
193 |             for (provider, name) in type_entries.iter() {
    |                 ^^^^^^^^^^^^^^^^    ------------------- this is an iterator with items of type `dashmap::setref::multiple::RefMulti<'_, (&'static str, &'static str)>`
    |                 |
    |                 expected `RefMulti<'_, (&str, &str)>`, found `(_, _)`
    |
    = note: expected struct `dashmap::setref::multiple::RefMulti<'_, (&'static str, &'static str)>`
                found tuple `(_, _)`

error: binding modifiers may only be written when the default binding mode is `move`
   --> packages/domain/src/lib.rs:530:32
    |
530 |             ZeroOneOrMany::One(ref item) => Some(item),
    |                                ^^^ binding modifier not allowed under `ref` default binding mode
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: matching on a reference type with a non-reference pattern changes the default binding mode
   --> packages/domain/src/lib.rs:530:13
    |
530 |             ZeroOneOrMany::One(ref item) => Some(item),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this matches on type `&_`
help: remove the unnecessary binding modifier
    |
530 -             ZeroOneOrMany::One(ref item) => Some(item),
530 +             ZeroOneOrMany::One(item) => Some(item),
    |

error: binding modifiers may only be written when the default binding mode is `move`
   --> packages/domain/src/lib.rs:538:32
    |
538 |             ZeroOneOrMany::One(ref item) => vec![item],
    |                                ^^^ binding modifier not allowed under `ref` default binding mode
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: matching on a reference type with a non-reference pattern changes the default binding mode
   --> packages/domain/src/lib.rs:538:13
    |
538 |             ZeroOneOrMany::One(ref item) => vec![item],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this matches on type `&_`
help: remove the unnecessary binding modifier
    |
538 -             ZeroOneOrMany::One(ref item) => vec![item],
538 +             ZeroOneOrMany::One(item) => vec![item],
    |

error: binding modifiers may only be written when the default binding mode is `move`
   --> packages/domain/src/lib.rs:539:33
    |
539 |             ZeroOneOrMany::Many(ref items) => items.iter().collect(),
    |                                 ^^^ binding modifier not allowed under `ref` default binding mode
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: matching on a reference type with a non-reference pattern changes the default binding mode
   --> packages/domain/src/lib.rs:539:13
    |
539 |             ZeroOneOrMany::Many(ref items) => items.iter().collect(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this matches on type `&_`
help: remove the unnecessary binding modifier
    |
539 -             ZeroOneOrMany::Many(ref items) => items.iter().collect(),
539 +             ZeroOneOrMany::Many(items) => items.iter().collect(),
    |

warning: unused variable: `message`
   --> packages/domain/src/agent/chat.rs:146:9
    |
146 |         message: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `memory_node`
   --> packages/domain/src/agent/chat.rs:147:9
    |
147 |         memory_node: &MemoryNode,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_node`

warning: unused variable: `command`
   --> packages/domain/src/chat/commands/types.rs:478:24
    |
478 |     fn validate(&self, command: &ChatCommand, context: &CommandContext) -> CommandResult<()> {
    |                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_command`

warning: unused variable: `context`
   --> packages/domain/src/chat/commands/types.rs:478:47
    |
478 |     fn validate(&self, command: &ChatCommand, context: &CommandContext) -> CommandResult<()> {
    |                                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `variable`
   --> packages/domain/src/chat/templates.rs:881:17
    |
881 |                 variable,
    |                 ^^^^^^^^ help: try ignoring the field: `variable: _`

warning: unused variable: `variables`
    --> packages/domain/src/chat/templates.rs:1065:17
     |
1065 |                 variables,
     |                 ^^^^^^^^^ help: try ignoring the field: `variables: _`

warning: unused variable: `args`
    --> packages/domain/src/chat/templates.rs:1070:40
     |
1070 |             TemplateAst::Macro { name, args } => {
     |                                        ^^^^ help: try ignoring the field: `args: _`

warning: variable does not need to be mutable
    --> packages/domain/src/chat/templates.rs:1584:21
     |
1584 |         if let Some(mut stats) = self.usage_stats.get(name) {
     |                     ----^^^^^
     |                     |
     |                     help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `embedding_dim`
   --> packages/domain/src/memory/manager.rs:117:57
    |
117 | pub fn initialize_memory_node_pool(initial_size: usize, embedding_dim: usize) {
    |                                                         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_embedding_dim`

warning: unused variable: `handle`
   --> packages/domain/src/model/registry.rs:231:13
    |
231 |         let handle = match provider_models.get(name) {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_handle`

warning: unused variable: `handle`
   --> packages/domain/src/model/registry.rs:265:13
    |
265 |         let handle = match provider_models.get(name) {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_handle`

Some errors have detailed explanations: E0063, E0277, E0308, E0599, E0615.
For more information about an error, try `rustc --explain E0063`.
warning: `fluent_ai_domain` (lib) generated 11 warnings
error: could not compile `fluent_ai_domain` (lib) due to 92 previous errors; 11 warnings emitted
    |
231 |         let handle = match provider_models.get(name) {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_handle`

warning: unused variable: `handle`
   --> packages/domain/src/model/registry.rs:265:13
    |
265 |         let handle = match provider_models.get(name) {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_handle`

Some errors have detailed explanations: E0063, E0277, E0308, E0599, E0615.
For more information about an error, try `rustc --explain E0063`.
warning: `fluent_ai_domain` (lib) generated 11 warnings
error: could not compile `fluent_ai_domain` (lib) due to 94 previous errors; 11 warnings emitted
