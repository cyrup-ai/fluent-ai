   Compiling fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
    Checking fluent_ai_http_structs v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/http-structs)
error[E0599]: no method named `clone` found for struct `SkipMap` in the current scope
    --> packages/domain/src/chat/search.rs:1092:46
     |
1092 |         let message_tags = self.message_tags.clone();
     |                                              ^^^^^ method not found in `SkipMap<Arc<str>, Vec<Arc<str>>>`

error[E0599]: no method named `clone` found for struct `SkipMap` in the current scope
    --> packages/domain/src/chat/search.rs:1093:46
     |
1093 |         let tag_messages = self.tag_messages.clone();
     |                                              ^^^^^ method not found in `SkipMap<Arc<str>, Vec<Arc<str>>>`

error[E0599]: no method named `clone` found for struct `SkipMap` in the current scope
    --> packages/domain/src/chat/search.rs:1094:30
     |
1094 |         let tags = self.tags.clone();
     |                              ^^^^^ method not found in `SkipMap<Arc<str>, ConversationTag>`

warning: unreachable statement
   --> packages/domain/src/context/provider.rs:441:17
    |
438 |                   fluent_ai_async::handle_error!(error, "File context validation failed");
    |                   ----------------------------------------------------------------------- any code following this expression is unreachable
...
441 | /                 if let Some(ref events) = event_sender {
442 | |                     let _ = events.send(ContextEvent::ValidationFailed {
443 | |                         validation_type: "FileContext".to_string(),
444 | |                         error: error.to_string(),
445 | |                         timestamp: SystemTime::now(),
446 | |                     });
447 | |                 }
    | |_________________^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unreachable expression
   --> packages/domain/src/context/provider.rs:472:21
    |
469 |                       fluent_ai_async::handle_error!(error, "File document loading failed");
    |                       --------------------------------------------------------------------- any code following this expression is unreachable
...
472 | /                     if let Some(ref events) = event_sender {
473 | |                         let _ = events.send(ContextEvent::ContextLoadFailed {
474 | |                             context_type: "File".to_string(),
475 | |                             source: context.path.clone(),
...   |
478 | |                         });
479 | |                     }
    | |_____________________^ unreachable expression

warning: unreachable statement
   --> packages/domain/src/context/provider.rs:852:25
    |
851 | ...   fluent_ai_async::handle_error!(ContextError::ContextNotFound("GitHub repository URL is required".to_string()), "GitHub repository URL missing");
    |       ----------------------------------------------------------------------------------------------------------------------------------------------- any code following this expression is unreachable
852 | ...   return;
    |       ^^^^^^^ unreachable statement

error[E0277]: the trait bound `OpenAIChoice: Clone` is not satisfied
  --> packages/http-structs/src/perplexity.rs:98:5
   |
95 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
98 |     pub message: PerplexityResponseMessage,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIChoice`

error[E0277]: the trait bound `OpenAIDelta: Clone` is not satisfied
   --> packages/http-structs/src/perplexity.rs:100:5
    |
95  | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
100 |     pub delta: Option<PerplexityStreamingDelta>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIDelta`
    |
    = note: required for `std::option::Option<OpenAIDelta>` to implement `Clone`

error[E0277]: the trait bound `OpenAIChoice: Serialize` is not satisfied
    --> packages/http-structs/src/perplexity.rs:95:24
     |
95   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIChoice`
...
98   |     pub message: PerplexityResponseMessage,
     |     -------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIChoice` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `OpenAIDelta: Serialize` is not satisfied
    --> packages/http-structs/src/perplexity.rs:95:24
     |
95   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIDelta`
...
100  |     pub delta: Option<PerplexityStreamingDelta>,
     |     ------------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIDelta` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
     = note: required for `std::option::Option<OpenAIDelta>` to implement `Serialize`
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http-structs/src/perplexity.rs:230:17
    |
230 |                 content,
    |                 ^^^^^^^ expected `Option<OpenAIMessageContent<'_>>`, found `OpenAIMessageContent<'_>`
    |
    = note: expected enum `std::option::Option<OpenAIMessageContent<'_>>`
               found enum `OpenAIMessageContent<'a>`
help: try wrapping the expression in `Some`
    |
230 |                 content: Some(content),
    |                 ++++++++++++++       +

error[E0277]: the trait bound `OpenAIChoice: Clone` is not satisfied
   --> packages/http-structs/src/openrouter.rs:123:5
    |
120 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
123 |     pub message: OpenRouterResponseMessage,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIChoice`

error[E0277]: the trait bound `OpenAIChoice: Serialize` is not satisfied
    --> packages/http-structs/src/openrouter.rs:120:24
     |
120  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIChoice`
...
123  |     pub message: OpenRouterResponseMessage,
     |     -------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIChoice` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `OpenAIDelta: Clone` is not satisfied
   --> packages/http-structs/src/openrouter.rs:283:5
    |
280 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
283 |     pub delta: OpenRouterStreamingDelta,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIDelta`

error[E0277]: the trait bound `OpenAIDelta: Serialize` is not satisfied
    --> packages/http-structs/src/openrouter.rs:280:24
     |
280  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIDelta`
...
283  |     pub delta: OpenRouterStreamingDelta,
     |     ----------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIDelta` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http-structs/src/openrouter.rs:321:17
    |
321 |                 content,
    |                 ^^^^^^^ expected `Option<OpenAIMessageContent<'_>>`, found `OpenAIMessageContent<'_>`
    |
    = note: expected enum `std::option::Option<OpenAIMessageContent<'_>>`
               found enum `OpenAIMessageContent<'a>`
help: try wrapping the expression in `Some`
    |
321 |                 content: Some(content),
    |                 ++++++++++++++       +

error[E0071]: expected struct, variant or union type, found `Value`
   --> packages/http-structs/src/openrouter.rs:375:37
    |
375 |         self.response_format = Some(OpenRouterResponseFormat {
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^ not a struct

error[E0277]: the trait bound `OpenAIChoice: Clone` is not satisfied
   --> packages/http-structs/src/together.rs:105:5
    |
102 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
105 |     pub message: TogetherResponseMessage,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIChoice`

error[E0277]: the trait bound `OpenAIChoice: Serialize` is not satisfied
    --> packages/http-structs/src/together.rs:102:24
     |
102  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIChoice`
...
105  |     pub message: TogetherResponseMessage,
     |     ------------------------------------ required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIChoice` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http-structs/src/together.rs:412:17
    |
412 |                 content,
    |                 ^^^^^^^ expected `Option<OpenAIMessageContent<'_>>`, found `OpenAIMessageContent<'_>`
    |
    = note: expected enum `std::option::Option<OpenAIMessageContent<'_>>`
               found enum `OpenAIMessageContent<'a>`
help: try wrapping the expression in `Some`
    |
412 |                 content: Some(content),
    |                 ++++++++++++++       +

error[E0071]: expected struct, variant or union type, found `Value`
   --> packages/http-structs/src/together.rs:471:37
    |
471 |         self.response_format = Some(TogetherResponseFormat {
    |                                     ^^^^^^^^^^^^^^^^^^^^^^ not a struct

error[E0277]: the trait bound `OpenAIChoice: Clone` is not satisfied
   --> packages/http-structs/src/xai.rs:111:5
    |
108 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
111 |     pub message: XAIResponseMessage,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIChoice`

error[E0277]: the trait bound `OpenAIChoice: Serialize` is not satisfied
    --> packages/http-structs/src/xai.rs:108:24
     |
108  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIChoice`
...
111  |     pub message: XAIResponseMessage,
     |     ------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIChoice` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `OpenAIDelta: Clone` is not satisfied
   --> packages/http-structs/src/xai.rs:291:5
    |
288 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                 ----- in this derive macro expansion
...
291 |     pub delta: XAIStreamingDelta,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `OpenAIDelta`

error[E0277]: the trait bound `OpenAIDelta: Serialize` is not satisfied
    --> packages/http-structs/src/xai.rs:288:24
     |
288  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `OpenAIDelta`
...
291  |     pub delta: XAIStreamingDelta,
     |     ---------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `OpenAIDelta` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 618 others
note: required by a bound in `openai::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/http-structs/src/xai.rs:325:17
    |
325 |                 content,
    |                 ^^^^^^^ expected `Option<OpenAIMessageContent<'_>>`, found `OpenAIMessageContent<'_>`
    |
    = note: expected enum `std::option::Option<OpenAIMessageContent<'_>>`
               found enum `OpenAIMessageContent<'a>`
help: try wrapping the expression in `Some`
    |
325 |                 content: Some(content),
    |                 ++++++++++++++       +

error[E0071]: expected struct, variant or union type, found `Value`
   --> packages/http-structs/src/xai.rs:379:37
    |
379 |         self.response_format = Some(XAIResponseFormat {
    |                                     ^^^^^^^^^^^^^^^^^ not a struct

error[E0063]: missing fields `name`, `tool_call_id` and `tool_calls` in initializer of `OpenAIMessage<'_>`
   --> packages/http-structs/src/deepseek.rs:168:27
    |
168 |             messages.push(DeepSeekMessage { role, content: Some(content) });
    |                           ^^^^^^^^^^^^^^^ missing `name`, `tool_call_id` and `tool_calls`

error[E0071]: expected struct, variant or union type, found `Value`
   --> packages/http-structs/src/deepseek.rs:230:37
    |
230 |         self.response_format = Some(DeepSeekResponseFormat {
    |                                     ^^^^^^^^^^^^^^^^^^^^^^ not a struct

warning: unused variable: `config`
    --> packages/domain/src/chat/commands/types.rs:1019:13
     |
1019 |         let config: std::collections::HashMap<String, String> = std::collections::HashMap::new(); // Empty config for now
     |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `context`
  --> packages/domain/src/chat/commands/mod.rs:31:36
   |
31 | pub fn initialize_command_executor(context: CommandContext) {
   |                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `config`
   --> packages/domain/src/chat/config.rs:231:13
    |
231 |         let config = self.clone();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:212:28
    |
212 |         request.messages = self.messages.clone();
    |         ----------------   ^^^^^^^^^^^^^^^^^^^^^ expected `ArrayVec<OpenAIMessage<'_>, 128>`, found `ArrayVec<String, 128>`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected struct `ArrayVec<OpenAIMessage<'_>, _>`
               found struct `ArrayVec<std::string::String, _>`

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:213:31
    |
213 |         request.temperature = self.temperature;
    |         -------------------   ^^^^^^^^^^^^^^^^ expected `Option<f64>`, found `Option<f32>`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected enum `std::option::Option<f64>`
               found enum `std::option::Option<f32>`

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:215:26
    |
215 |         request.stream = self.stream;
    |         --------------   ^^^^^^^^^^^ expected `bool`, found `Option<bool>`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected type `bool`
               found enum `std::option::Option<bool>`
help: consider using `Option::expect` to unwrap the `std::option::Option<bool>` value, panicking if the value is an `Option::None`
    |
215 |         request.stream = self.stream.expect("REASON");
    |                                     +++++++++++++++++

error[E0277]: the trait bound `ChatBuilder<OpenAI, builders::Complete>: HttpRequestBuilder<_, _>` is not satisfied
   --> packages/http-structs/src/builders.rs:458:49
    |
458 |         let request = HttpRequestBuilder::build(self.clone())?;
    |                       ------------------------- ^^^^^^^^^^^^ the trait `HttpRequestBuilder<_, _>` is not implemented for `ChatBuilder<OpenAI, builders::Complete>`
    |                       |
    |                       required by a bound introduced by this call
    |
    = help: the following other types implement trait `HttpRequestBuilder<P, S>`:
              `ChatBuilder<Anthropic>` implements `HttpRequestBuilder<Anthropic>`
              `ChatBuilder<OpenAI>` implements `HttpRequestBuilder<OpenAI>`

error[E0533]: expected value, found struct variant `HttpStructError::SerializationError`
   --> packages/http-structs/src/builders.rs:460:26
    |
460 |             .map_err(|e| HttpStructError::SerializationError(e.to_string()))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
460 -             .map_err(|e| HttpStructError::SerializationError(e.to_string()))?;
460 +             .map_err(|e| HttpStructError::SerializationError { message: /* value */, detail: /* value */ })?;
    |

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:558:26
    |
558 |                 message: e,
    |                          ^ expected `ArrayString<256>`, found `&str`
    |
    = note: expected struct `ArrayString<256>`
            found reference `&str`

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:569:26
    |
569 |                 message: e,
    |                          ^ expected `ArrayString<256>`, found `&str`
    |
    = note: expected struct `ArrayString<256>`
            found reference `&str`

error[E0308]: mismatched types
   --> packages/http-structs/src/builders.rs:597:26
    |
597 |                 message: e,
    |                          ^ expected `ArrayString<256>`, found `&str`
    |
    = note: expected struct `ArrayString<256>`
            found reference `&str`

error[E0599]: no method named `clone` found for struct `GeminiGenerateContentRequest` in the current scope
   --> packages/http-structs/src/builders.rs:633:35
    |
633 |             request: self.request.clone(),
    |                                   ^^^^^ method not found in `GeminiGenerateContentRequest`
    |
   ::: packages/http-structs/src/google.rs:26:1
    |
26  | pub struct GeminiGenerateContentRequest {
    | --------------------------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0308]: arguments to this function are incorrect
   --> packages/http-structs/src/common.rs:686:17
    |
686 |                 HttpStructError::http("Content-Type header too long", None)
    |                 ^^^^^^^^^^^^^^^^^^^^^ ------------------------------  ---- unexpected argument #2 of type `std::option::Option<_>`
    |                                       |
    |                                       argument #1 of type `u16` is missing
    |
note: associated function defined here
   --> packages/http-structs/src/errors.rs:72:12
    |
72  |     pub fn http(status: u16, message: &str) -> Self {
    |            ^^^^ -----------
help: did you mean
    |
686 -                 HttpStructError::http("Content-Type header too long", None)
686 +                 HttpStructError::http(/* u16 */, "Content-Type header too long")
    |

warning: unused import: `validation::ValidateRequest`
  --> packages/http-structs/src/builders.rs:10:5
   |
10 |     validation::ValidateRequest,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error: lifetime may not live long enough
   --> packages/http-structs/src/openai.rs:106:5
    |
99  |   #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                     ----------- lifetime `'de` defined here
...
106 | /     /// Tool calls made by the assistant
107 | |     #[serde(skip_serializing_if = "Option::is_none")]
108 | |     pub tool_calls: Option<ArrayVec<OpenAIToolCall<'a>, MAX_TOOLS>>,
    | |___________________________________________________________________^ requires that `'de` must outlive `'static`

warning: variable does not need to be mutable
  --> packages/domain/src/chat/search.rs:45:17
   |
45 |             let mut results = Vec::new();
   |                 ----^^^^^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `index`
   --> packages/domain/src/chat/search.rs:279:17
    |
279 |             let index = self_clone.document_count.fetch_add(1, Ordering::Relaxed);
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `query_time`
   --> packages/domain/src/chat/search.rs:398:17
    |
398 |             let query_time = start_time.elapsed().as_millis() as f64;
    |                 ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_query_time`

warning: unused variable: `fuzzy`
   --> packages/domain/src/chat/search.rs:498:52
    |
498 |     fn search_or_stream(&self, terms: &[Arc<str>], fuzzy: bool) -> AsyncStream<SearchResult> {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_fuzzy`

warning: variable does not need to be mutable
   --> packages/domain/src/chat/search.rs:836:17
    |
836 |             for mut result in results {
    |                 ----^^^^^^
    |                 |
    |                 help: remove this `mut`

error[E0521]: borrowed data escapes outside of method
    --> packages/domain/src/chat/search.rs:1235:9
     |
1229 |           &self,
     |           -----
     |           |
     |           `self` is a reference that is only valid in the method body
     |           let's call the lifetime of this reference `'1`
...
1235 | /         AsyncStream::with_channel(move |sender| {
1236 | |             let mut rules = self_clone.auto_tagging_rules.try_write().unwrap_or_else(|_| {
1237 | |                 std::thread::sleep(std::time::Duration::from_millis(1));
1238 | |                 self_clone.auto_tagging_rules.try_write().expect("Auto-tagging rules lock recovery failed")
...    |
1241 | |             let _ = sender.send(());
1242 | |         })
     | |          ^
     | |          |
     | |__________`self` escapes the method body here
     |            argument requires that `'1` must outlive `'static`

error[E0521]: borrowed data escapes outside of method
    --> packages/domain/src/chat/search.rs:1262:9
     |
1259 |       pub fn remove_auto_tagging_rule_stream(&self, pattern: Arc<str>) -> AsyncStream<()> {
     |                                              -----
     |                                              |
     |                                              `self` is a reference that is only valid in the method body
     |                                              let's call the lifetime of this reference `'1`
...
1262 | /         AsyncStream::with_channel(move |sender| {
1263 | |             let mut rules = self_clone.auto_tagging_rules.try_write().unwrap_or_else(|_| {
1264 | |                 std::thread::sleep(std::time::Duration::from_millis(1));
1265 | |                 self_clone.auto_tagging_rules.try_write().expect("Auto-tagging rules lock recovery failed")
...    |
1268 | |             let _ = sender.send(());
1269 | |         })
     | |          ^
     | |          |
     | |__________`self` escapes the method body here
     |            argument requires that `'1` must outlive `'static`

error[E0004]: non-exhaustive patterns: `message::types::MessageRole::System` and `message::types::MessageRole::Tool` not covered
    --> packages/domain/src/chat/search.rs:1434:46
     |
1434 | ...                   let role = match message.message.role {
     |                                        ^^^^^^^^^^^^^^^^^^^^ patterns `message::types::MessageRole::System` and `message::types::MessageRole::Tool` not covered
     |
note: `message::types::MessageRole` defined here
    --> packages/domain/src/chat/message/mod.rs:33:14
     |
33   |     pub enum MessageRole {
     |              ^^^^^^^^^^^
34   |         /// Message from the system
35   |         System,
     |         ------ not covered
...
41   |         Tool,
     |         ---- not covered
     = note: the matched value is of type `message::types::MessageRole`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
     |
1436 ~                                 MessageRole::Assistant => "**Assistant**",
1437 ~                                 message::types::MessageRole::System | message::types::MessageRole::Tool => todo!(),
     |

warning: unused variable: `self_clone`
    --> packages/domain/src/chat/search.rs:1882:87
     |
1882 |     pub fn get_statistics_stream(&self) -> AsyncStream<ExportStatistics> {        let self_clone = self.clone();
     |                                                                                       ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_self_clone`

warning: unused variable: `agent`
  --> packages/domain/src/context/extraction/extractor.rs:70:13
   |
70 |         let agent = self.agent.clone();
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_agent`

warning: unused variable: `agent`
   --> packages/domain/src/context/extraction/extractor.rs:195:13
    |
195 |         let agent = self.agent.clone();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_agent`

warning: unused variable: `params`
   --> packages/domain/src/context/extraction/extractor.rs:196:13
    |
196 |         let params = params.clone();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_params`

warning: unused variable: `sender`
   --> packages/domain/src/context/provider.rs:845:41
    |
845 |         AsyncStream::with_channel(move |sender| {
    |                                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_sender`

warning: variable does not need to be mutable
  --> packages/domain/src/embedding/core.rs:26:13
   |
26 |         let mut embedding_task = self.embed(text);
   |             ----^^^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/http-structs/src/mistral.rs:554:29
    |
554 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> packages/http-structs/src/groq.rs:473:29
    |
473 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/http-structs/src/perplexity.rs:239:29
    |
239 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

Some errors have detailed explanations: E0004, E0521, E0599.
For more information about an error, try `rustc --explain E0004`.
warning: `fluent_ai_domain` (lib) generated 17 warnings (3 duplicates)
error: could not compile `fluent_ai_domain` (lib) due to 6 previous errors; 17 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: variable does not need to be mutable
   --> packages/http-structs/src/openrouter.rs:330:29
    |
330 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/http-structs/src/together.rs:421:29
    |
421 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: `fluent_ai_domain` (lib) generated 17 warnings (14 duplicates)
error: could not compile `fluent_ai_domain` (lib) due to 6 previous errors; 17 warnings emitted
warning: variable does not need to be mutable
   --> packages/http-structs/src/xai.rs:334:29
    |
334 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/http-structs/src/deepseek.rs:185:29
    |
185 |     pub fn add_text_message(mut self, role: &'a str, text: &'a str) -> Self {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: unused variable: `complete`
   --> packages/http-structs/src/builders.rs:247:13
    |
247 |         let complete = self.complete().map_err(HttpStructError::Validation)?;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_complete`
    |
    = note: `#[warn(unused_variables)]` on by default

Some errors have detailed explanations: E0063, E0071, E0277, E0308, E0533, E0599.
For more information about an error, try `rustc --explain E0063`.
warning: `fluent_ai_http_structs` (lib) generated 9 warnings
error: could not compile `fluent_ai_http_structs` (lib) due to 35 previous errors; 9 warnings emitted
