   Compiling fluent_ai_provider v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/provider)
    Checking fluent_ai_candle v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/fluent-ai-candle)
warning: fluent_ai_provider@0.1.0: Starting provider generation...
warning: fluent_ai_provider@0.1.0: Generated providers.rs and models.rs with 6 providers
warning: fluent_ai_provider@0.1.0: Provider generation completed successfully
error[E0422]: cannot find struct, variant or union type `LlamaWrapper` in this scope
   --> packages/fluent-ai-candle/src/model.rs:485:29
    |
485 |         let model_wrapper = LlamaWrapper { model: llama_model };
    |                             ^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `argsort` found for struct `candle_core::Tensor` in the current scope
   --> packages/fluent-ai-candle/src/generator.rs:924:14
    |
923 |           let indices = probs
    |  _______________________-
924 | |             .argsort(candle_core::D::Minus1, true)  // true for descending
    | |             -^^^^^^^ method not found in `candle_core::Tensor`
    | |_____________|
    |

error[E0308]: mismatched types
   --> packages/fluent-ai-candle/src/model.rs:440:35
    |
440 |                       eos_token_id: parsed_config
    |  ___________________________________^
441 | |                         .get("eos_token_id")
442 | |                         .and_then(|v| v.as_u64())
443 | |                         .map(|v| v as u32),
    | |__________________________________________^ expected `Option<LlamaEosToks>`, found `Option<u32>`
    |
    = note: expected enum `Option<LlamaEosToks>`
               found enum `Option<u32>`

error[E0063]: missing field `tie_word_embeddings` in initializer of `candle_transformers::models::llama::Config`
   --> packages/fluent-ai-candle/src/model.rs:398:17
    |
398 |                 llama_models::Config {
    |                 ^^^^^^^^^^^^^^^^^^^^ missing `tie_word_embeddings`

error[E0308]: mismatched types
   --> packages/fluent-ai-candle/src/model.rs:460:40
    |
460 |                     eos_token_id: Some(2),
    |                                   ---- ^ expected `LlamaEosToks`, found integer
    |                                   |
    |                                   arguments to this enum variant are incorrect
    |
help: the type constructed contains `{integer}` due to the type of the argument passed
   --> packages/fluent-ai-candle/src/model.rs:460:35
    |
460 |                     eos_token_id: Some(2),
    |                                   ^^^^^-^
    |                                        |
    |                                        this argument influences the type of `Some`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: try wrapping the expression in `candle_transformers::models::llama::LlamaEosToks::Single`
    |
460 |                     eos_token_id: Some(candle_transformers::models::llama::LlamaEosToks::Single(2)),
    |                                        +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ +

error[E0063]: missing field `tie_word_embeddings` in initializer of `candle_transformers::models::llama::Config`
   --> packages/fluent-ai-candle/src/model.rs:448:17
    |
448 |                 llama_models::Config {
    |                 ^^^^^^^^^^^^^^^^^^^^ missing `tie_word_embeddings`

error[E0308]: mismatched types
   --> packages/fluent-ai-candle/src/model.rs:541:33
    |
541 |                       rope_theta: parsed_config
    |  _________________________________^
542 | |                         .get("rope_theta")
543 | |                         .and_then(|v| v.as_f64())
544 | |                         .unwrap_or(10000.0) as f32,
    | |__________________________________________________^ expected `f64`, found `f32`

error[E0063]: missing fields `head_dim`, `hidden_act` and `use_flash_attn` in initializer of `candle_transformers::models::mistral::Config`
   --> packages/fluent-ai-candle/src/model.rs:508:17
    |
508 |                 mistral_models::Config {
    |                 ^^^^^^^^^^^^^^^^^^^^^^ missing `head_dim`, `hidden_act` and `use_flash_attn`

error[E0063]: missing fields `head_dim`, `hidden_act` and `use_flash_attn` in initializer of `candle_transformers::models::mistral::Config`
   --> packages/fluent-ai-candle/src/model.rs:552:17
    |
552 |                 mistral_models::Config {
    |                 ^^^^^^^^^^^^^^^^^^^^^^ missing `head_dim`, `hidden_act` and `use_flash_attn`

error[E0599]: no function or associated item named `load` found for struct `candle_transformers::models::mistral::Model` in the current scope
   --> packages/fluent-ai-candle/src/model.rs:570:52
    |
570 |         let mistral_model = mistral_models::Model::load(&vs, &mistral_config).map_err(|e| {
    |                                                    ^^^^ function or associated item not found in `candle_transformers::models::mistral::Model`
    |
note: if you're trying to build a new `candle_transformers::models::mistral::Model`, consider using `candle_transformers::models::mistral::Model::new` which returns `Result<candle_transformers::models::mistral::Model, candle_core::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/candle-5b4d092929d18d36/1ef1341/candle-transformers/src/models/mistral.rs:373:5
    |
373 |     pub fn new(cfg: &Config, vb: VarBuilder) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0560]: struct `model::ModelConfig` has no field named `num_attention_heads`
   --> packages/fluent-ai-candle/src/model.rs:581:13
    |
581 |             num_attention_heads: mistral_config.num_attention_heads as u32,
    |             ^^^^^^^^^^^^^^^^^^^ `model::ModelConfig` does not have this field
    |
    = note: available fields are: `num_heads`, `rope_theta`, `rope_freq_base`, `use_flash_attn`, `quantization`

error[E0308]: mismatched types
   --> packages/fluent-ai-candle/src/model.rs:644:33
    |
644 |                       rope_theta: parsed_config
    |  _________________________________^
645 | |                         .get("rope_theta")
646 | |                         .and_then(|v| v.as_f64())
647 | |                         .unwrap_or(10000.0) as f32,
    | |__________________________________________________^ expected `f64`, found `f32`

error[E0560]: struct `candle_transformers::models::gemma::Config` has no field named `mlp_bias`
   --> packages/fluent-ai-candle/src/model.rs:652:21
    |
652 |                     mlp_bias: parsed_config
    |                     ^^^^^^^^ `candle_transformers::models::gemma::Config` does not have this field
    |
    = note: available fields are: `hidden_act`, `hidden_activation`

error[E0560]: struct `candle_transformers::models::gemma::Config` has no field named `mlp_bias`
   --> packages/fluent-ai-candle/src/model.rs:671:21
    |
671 |                     mlp_bias: false,
    |                     ^^^^^^^^ `candle_transformers::models::gemma::Config` does not have this field
    |
    = note: available fields are: `hidden_act`, `hidden_activation`

error[E0599]: no function or associated item named `load` found for struct `candle_transformers::models::gemma::Model` in the current scope
   --> packages/fluent-ai-candle/src/model.rs:679:48
    |
679 |         let gemma_model = gemma_models::Model::load(&vs, &gemma_config).map_err(|e| {
    |                                                ^^^^ function or associated item not found in `candle_transformers::models::gemma::Model`
    |
note: if you're trying to build a new `candle_transformers::models::gemma::Model`, consider using `candle_transformers::models::gemma::Model::new` which returns `Result<candle_transformers::models::gemma::Model, candle_core::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/candle-5b4d092929d18d36/1ef1341/candle-transformers/src/models/gemma.rs:346:5
    |
346 |     pub fn new(use_flash_attn: bool, cfg: &Config, vb: VarBuilder) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0560]: struct `model::ModelConfig` has no field named `num_attention_heads`
   --> packages/fluent-ai-candle/src/model.rs:690:13
    |
690 |             num_attention_heads: gemma_config.num_attention_heads as u32,
    |             ^^^^^^^^^^^^^^^^^^^ `model::ModelConfig` does not have this field
    |
    = note: available fields are: `num_heads`, `rope_theta`, `rope_freq_base`, `use_flash_attn`, `quantization`

error[E0308]: mismatched types
   --> packages/fluent-ai-candle/src/model.rs:737:42
    |
737 |                       num_key_value_heads: parsed_config
    |  __________________________________________^
738 | |                         .get("num_key_value_heads")
739 | |                         .and_then(|v| v.as_u64()),
    | |_________________________________________________^ expected `Option<usize>`, found `Option<u64>`
    |
    = note: expected enum `Option<usize>`
               found enum `Option<u64>`

error: cannot construct `candle_transformers::models::phi::Config` with struct literal syntax due to private fields
   --> packages/fluent-ai-candle/src/model.rs:716:17
    |
716 |                   phi_models::Config {
    |                   ^^^^^^^^^^^^^^^^^^
717 | /                     vocab_size: parsed_config
718 | |                         .get("vocab_size")
719 | |                         .and_then(|v| v.as_u64())
720 | |                         .unwrap_or(51200) as usize,
    | |__________________________________________________- private field
721 | /                     hidden_size: parsed_config
722 | |                         .get("hidden_size")
723 | |                         .and_then(|v| v.as_u64())
724 | |                         .unwrap_or(2560) as usize,
    | |_________________________________________________- private field
725 | /                     intermediate_size: parsed_config
726 | |                         .get("intermediate_size")
727 | |                         .and_then(|v| v.as_u64())
728 | |                         .unwrap_or(10240) as usize,
    | |__________________________________________________- private field
729 | /                     num_hidden_layers: parsed_config
730 | |                         .get("num_hidden_layers")
731 | |                         .and_then(|v| v.as_u64())
732 | |                         .unwrap_or(32) as usize,
    | |_______________________________________________- private field
733 | /                     num_attention_heads: parsed_config
734 | |                         .get("num_attention_heads")
735 | |                         .and_then(|v| v.as_u64())
736 | |                         .unwrap_or(32) as usize,
    | |_______________________________________________- private field
737 | /                     num_key_value_heads: parsed_config
738 | |                         .get("num_key_value_heads")
739 | |                         .and_then(|v| v.as_u64()),
    | |_________________________________________________- private field
740 | /                     max_position_embeddings: parsed_config
741 | |                         .get("max_position_embeddings")
742 | |                         .and_then(|v| v.as_u64())
743 | |                         .unwrap_or(2048) as usize,
    | |_________________________________________________- private field
744 | /                     layer_norm_eps: parsed_config
745 | |                         .get("layer_norm_eps")
746 | |                         .and_then(|v| v.as_f64())
747 | |                         .unwrap_or(1e-5) as f64,
    | |_______________________________________________- private field
748 | /                     rope_theta: parsed_config
749 | |                         .get("rope_theta")
750 | |                         .and_then(|v| v.as_f64())
751 | |                         .unwrap_or(10000.0) as f32,
    | |__________________________________________________- private field
752 | /                     partial_rotary_factor: parsed_config
753 | |                         .get("partial_rotary_factor")
754 | |                         .and_then(|v| v.as_f64())
755 | |                         .unwrap_or(0.5) as f64,
    | |______________________________________________- private field
756 | /                     qk_layernorm: parsed_config
757 | |                         .get("qk_layernorm")
758 | |                         .and_then(|v| v.as_bool())
759 | |                         .unwrap_or(false),
    | |_________________________________________- private field
    |
    = note: ...and other private fields `hidden_act` and `tie_word_embeddings` that were not provided

error: cannot construct `candle_transformers::models::phi::Config` with struct literal syntax due to private fields
   --> packages/fluent-ai-candle/src/model.rs:763:17
    |
763 |                 phi_models::Config {
    |                 ^^^^^^^^^^^^^^^^^^
764 |                     vocab_size: 32064,
    |                     ----------------- private field
765 |                     hidden_size: 3072,
    |                     ----------------- private field
766 |                     intermediate_size: 8192,
    |                     ----------------------- private field
767 |                     num_hidden_layers: 32,
    |                     --------------------- private field
768 |                     num_attention_heads: 32,
    |                     ----------------------- private field
769 |                     num_key_value_heads: Some(32),
    |                     ----------------------------- private field
770 |                     max_position_embeddings: 4096,
    |                     ----------------------------- private field
771 |                     layer_norm_eps: 1e-5,
    |                     -------------------- private field
772 |                     rope_theta: 10000.0,
    |                     ------------------- private field
773 |                     partial_rotary_factor: 0.5,
    |                     -------------------------- private field
774 |                     qk_layernorm: false,
    |                     ------------------- private field
    |
    = note: ...and other private fields `hidden_act` and `tie_word_embeddings` that were not provided

error[E0599]: no function or associated item named `load` found for struct `candle_transformers::models::phi::Model` in the current scope
   --> packages/fluent-ai-candle/src/model.rs:782:44
    |
782 |         let phi_model = phi_models::Model::load(&vs, &phi_config)
    |                                            ^^^^ function or associated item not found in `candle_transformers::models::phi::Model`
    |
note: if you're trying to build a new `candle_transformers::models::phi::Model`, consider using `candle_transformers::models::phi::Model::new` which returns `Result<candle_transformers::models::phi::Model, candle_core::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/candle-5b4d092929d18d36/1ef1341/candle-transformers/src/models/phi.rs:319:5
    |
319 |     pub fn new(cfg: &Config, vb: VarBuilder) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `max_position_embeddings` of struct `candle_transformers::models::phi::Config` is private
   --> packages/fluent-ai-candle/src/model.rs:788:40
    |
788 |             context_length: phi_config.max_position_embeddings as u32,
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `vocab_size` of struct `candle_transformers::models::phi::Config` is private
   --> packages/fluent-ai-candle/src/model.rs:789:36
    |
789 |             vocab_size: phi_config.vocab_size as u32,
    |                                    ^^^^^^^^^^ private field

error[E0616]: field `hidden_size` of struct `candle_transformers::models::phi::Config` is private
   --> packages/fluent-ai-candle/src/model.rs:790:37
    |
790 |             hidden_size: phi_config.hidden_size as u32,
    |                                     ^^^^^^^^^^^ private field

error[E0616]: field `num_hidden_layers` of struct `candle_transformers::models::phi::Config` is private
   --> packages/fluent-ai-candle/src/model.rs:791:36
    |
791 |             num_layers: phi_config.num_hidden_layers as u32,
    |                                    ^^^^^^^^^^^^^^^^^ private field

error[E0560]: struct `model::ModelConfig` has no field named `num_attention_heads`
   --> packages/fluent-ai-candle/src/model.rs:792:13
    |
792 |             num_attention_heads: phi_config.num_attention_heads as u32,
    |             ^^^^^^^^^^^^^^^^^^^ `model::ModelConfig` does not have this field
    |
    = note: available fields are: `num_heads`, `rope_theta`, `rope_freq_base`, `use_flash_attn`, `quantization`

error[E0616]: field `num_attention_heads` of struct `candle_transformers::models::phi::Config` is private
   --> packages/fluent-ai-candle/src/model.rs:792:45
    |
792 |             num_attention_heads: phi_config.num_attention_heads as u32,
    |                                             ^^^^^^^^^^^^^^^^^^^ private field

error[E0277]: the trait bound `candle_transformers::models::qwen2::Model: Module` is not satisfied
   --> packages/fluent-ai-candle/src/model.rs:913:13
    |
913 |         Ok((Box::new(qwen_model), model_config))
    |             ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Fn(&'a candle_core::Tensor)` is not implemented for `candle_transformers::models::qwen2::Model`
    |
    = help: the following other types implement trait `Module`:
              AttentionBlock
              AutoEncoder
              BeitVisionTransformer
              BertLMPredictionHead
              BertOnlyMLMHead
              ChineseClipVisionEmbeddings
              ChineseClipVisionTransformer
              ClipVisionTransformer
            and 119 others
    = note: required for `candle_transformers::models::qwen2::Model` to implement `Module`
    = note: required for the cast from `Box<candle_transformers::models::qwen2::Model>` to `Box<dyn Module + std::marker::Send + Sync>`

error[E0271]: expected `{async block@packages/fluent-ai-candle/src/client.rs:421:18: 421:28}` to be a future that resolves to `Result<CompletionResponse<'a>, CompletionCoreError>`, but it resolves to `Result<CompletionResponse<'_>, ExtractionError>`
   --> packages/fluent-ai-candle/src/client.rs:421:9
    |
421 | /         Box::pin(async move {
422 | |             let start_time = Instant::now();
...   |
456 | |         })
    | |__________^ expected `CompletionCoreError`, found `ExtractionError`
    |
    = note: expected enum `Result<CompletionResponse<'a>, CompletionCoreError>`
               found enum `Result<CompletionResponse<'_>, ExtractionError>`
    = note: required for the cast from `Pin<Box<{async block@packages/fluent-ai-candle/src/client.rs:421:18: 421:28}>>` to `Pin<Box<dyn Future<Output = Result<..., ...>> + Send>>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_candle-11e45490bb72085c.long-type-18004080973305981134.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0271]: expected `{async block@packages/fluent-ai-candle/src/client.rs:464:18: 464:28}` to be a future that resolves to `Result<StreamingCoreResponse, CompletionCoreError>`, but it resolves to `Result<StreamingCoreResponse, ExtractionError>`
   --> packages/fluent-ai-candle/src/client.rs:464:9
    |
464 | /         Box::pin(async move {
465 | |             let start_time = Instant::now();
...   |
496 | |         })
    | |__________^ expected `CompletionCoreError`, found `ExtractionError`
    |
    = note: expected enum `Result<_, CompletionCoreError>`
               found enum `Result<_, ExtractionError>`
    = note: required for the cast from `Pin<Box<{async block@packages/fluent-ai-candle/src/client.rs:464:18: 464:28}>>` to `Pin<Box<dyn Future<Output = Result<..., ...>> + Send>>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_candle-11e45490bb72085c.long-type-9879986729600483810.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0004]: non-exhaustive patterns: `CandleError::DeviceAllocation(_)`, `CandleError::HuggingFaceHub(_)`, `CandleError::CacheOverflow` and 1 more not covered
   --> packages/fluent-ai-candle/src/error.rs:428:15
    |
428 |         match err {
    |               ^^^ patterns `CandleError::DeviceAllocation(_)`, `CandleError::HuggingFaceHub(_)`, `CandleError::CacheOverflow` and 1 more not covered
    |
note: `CandleError` defined here
   --> packages/fluent-ai-candle/src/error.rs:13:10
    |
13  | pub enum CandleError {
    |          ^^^^^^^^^^^
...
23  |     DeviceAllocation(&'static str),
    |     ---------------- not covered
...
37  |     HuggingFaceHub(String),
    |     -------------- not covered
...
47  |     CacheOverflow,
    |     ------------- not covered
48  |     /// Invalid input data
49  |     InvalidInput(&'static str),
    |     ------------ not covered
    = note: the matched value is of type `CandleError`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms
    |
454 ~             CandleError::Configuration(msg) => CompletionCoreError::InvalidRequest(msg.to_string()),
455 ~             _ => todo!(),
    |

error[E0382]: use of moved value: `chunks`
    --> packages/fluent-ai-candle/src/generator.rs:65:22
     |
62   |         let chunks = logits.chunks_exact_mut(4);
     |             ------ move occurs because `chunks` has type `ChunksExactMut<'_, f32>`, which does not implement the `Copy` trait
63   |         let remainder = chunks.into_remainder();
     |                                ---------------- `chunks` moved due to this method call
64   |         
65   |         for chunk in chunks {
     |                      ^^^^^^ value used here after move
     |
note: `ChunksExactMut::<'a, T>::into_remainder` takes ownership of the receiver `self`, which moves `chunks`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter.rs:2059:27
     |
2059 |     pub fn into_remainder(self) -> &'a mut [T] {
     |                           ^^^^

Some errors have detailed explanations: E0004, E0063, E0271, E0277, E0308, E0382, E0422, E0560, E0599...
For more information about an error, try `rustc --explain E0004`.
error: could not compile `fluent_ai_candle` (lib) due to 31 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0432]: unresolved import `super::super::discovery`
  --> packages/provider/src/clients/openai/discovery.rs:12:19
   |
12 | use super::super::discovery::{DiscoveryError, DiscoveryResult, ProviderModelDiscovery};
   |                   ^^^^^^^^^ could not find `discovery` in `super`

error[E0432]: unresolved import `fluent_ai_http3::SseEvent`
  --> packages/provider/src/clients/openrouter/streaming.rs:30:46
   |
30 | use fluent_ai_http3::{HttpClient, HttpError, SseEvent};
   |                                              ^^^^^^^^ no `SseEvent` in the root
   |
   = help: consider importing this struct instead:
           fluent_ai_http3::stream::SseEvent

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/together/client.rs:18:18
   |
18 |     completion::{CompletionModel, LLAMA_3_2_11B_VISION_INSTRUCT_TURBO},
   |                  ^^^^^^^^^^^^^^^
   |                  |
   |                  no `CompletionModel` in `clients::together::completion`
   |                  help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these traits instead:
           crate::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/together/streaming.rs:3:5
  |
3 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::together::completion`
  |
help: a similar name exists in the module
  |
3 - use super::completion::CompletionModel;
3 + use super::completion::CompletionError;
  |
help: consider importing one of these traits instead
  |
3 - use super::completion::CompletionModel;
3 + use crate::CompletionModel;
  |
3 - use super::completion::CompletionModel;
3 + use crate::domain::CompletionModel;
  |
3 - use super::completion::CompletionModel;
3 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/together/mod.rs:21:30
   |
21 |     CODE_LLAMA_70B_INSTRUCT, CompletionModel, DBRX_INSTRUCT, DEEPSEEK_CODER_33B_INSTRUCT,
   |                              ^^^^^^^^^^^^^^^
   |                              |
   |                              no `CompletionModel` in `clients::together::completion`
   |                              help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these traits instead:
           crate::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/xai/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, GROK_3};
   |                         ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::together::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/xai/streaming.rs:4:5
  |
4 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
  |
help: consider importing one of these items instead
  |
4 - use super::completion::CompletionModel;
4 + use crate::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use crate::clients::together::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use crate::domain::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/xai/mod.rs:17:22
   |
17 | pub use completion::{CompletionModel, GROK_3, GROK_3_MINI};
   |                      ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::together::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `deepseek::Client`, `deepseek::DEEPSEEK_CHAT`, `deepseek::DEEPSEEK_REASONER`
  --> packages/provider/src/clients/mod.rs:32:5
   |
32 |     Client as DeepseekClient, DEEPSEEK_CHAT, DEEPSEEK_REASONER, DeepSeekCompletionBuilder,
   |     ------^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `DEEPSEEK_REASONER` in `clients::deepseek`
   |     |                         |
   |     |                         no `DEEPSEEK_CHAT` in `clients::deepseek`
   |     no `Client` in `clients::deepseek`
   |     help: a similar name exists in the module (notice the capitalization): `client`
   |
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client
           progresshub::Client
           progresshub::bandwidth::dns::Client

error[E0432]: unresolved imports `huggingface::Client`, `huggingface::GEMMA_2`, `huggingface::HuggingfaceCompletionBuilder`, `huggingface::META_LLAMA_3_1`, `huggingface::PHI_4`, `huggingface::QWEN_QVQ_PREVIEW`, `huggingface::QWEN2_5`, `huggingface::QWEN2_5_CODER`, `huggingface::QWEN2_VL`, `huggingface::SMALLTHINKER_PREVIEW`, `huggingface::SubProvider`
  --> packages/provider/src/clients/mod.rs:46:5
   |
46 |     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^ no `PHI_4` in `clients::huggingface`
   |     |                            |        |                             |
   |     |                            |        |                             no `META_LLAMA_3_1` in `clients::huggingface`
   |     |                            |        no `HuggingfaceCompletionBuilder` in `clients::huggingface`
   |     |                            no `GEMMA_2` in `clients::huggingface`
   |     no `Client` in `clients::huggingface`
47 |     QWEN_QVQ_PREVIEW, QWEN2_5, QWEN2_5_CODER, QWEN2_VL, SMALLTHINKER_PREVIEW, SubProvider,
   |     ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^
   |     |                 |        |              |         |
   |     |                 |        |              |         no `SMALLTHINKER_PREVIEW` in `clients::huggingface`
   |     |                 |        |              no `QWEN2_VL` in `clients::huggingface`
   |     |                 |        no `QWEN2_5_CODER` in `clients::huggingface`
   |     |                 no `QWEN2_5` in `clients::huggingface`
   |     no `QWEN_QVQ_PREVIEW` in `clients::huggingface`
   |
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client
           progresshub::Client
           progresshub::bandwidth::dns::Client
help: a similar name exists in the module (notice the capitalization difference)
   |
46 -     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
46 +     client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |
help: a similar name exists in the module (notice the capitalization difference)
   |
46 -     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
46 +     Client as HuggingfaceClient, GEMMA_2, HuggingFaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/anthropic/discovery.rs:10:12
   |
10 | use crate::model::{
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `fluent_ai_domain::model`

error[E0432]: unresolved imports `openai::OpenAICompletionRequest`, `openai::OpenAICompletionResponse`, `openai::OpenAIProvider`
  --> packages/provider/src/clients/mod.rs:62:19
   |
62 |     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
   |                   ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^               ^^^^^^^^^^^^^^ no `OpenAIProvider` in `clients::openai`
   |                   |                        |
   |                   |                        no `OpenAICompletionResponse` in `clients::openai`
   |                   no `OpenAICompletionRequest` in `clients::openai`
   |
note: struct `crate::clients::openai::completion::OpenAICompletionRequest` exists but is inaccessible
  --> packages/provider/src/clients/openai/completion.rs:89:1
   |
89 | pub struct OpenAICompletionRequest<'a> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a similar name exists in the module
   |
62 -     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
62 +     OpenAIClient, OpenAICompletionBuilder, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
   |
help: a similar name exists in the module
   |
62 -     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
62 +     OpenAIClient, OpenAICompletionRequest, OpenAICompletionBuilder, OpenAIError, OpenAIProvider,
   |

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/clients/anthropic/requests.rs:13:12
   |
13 | use crate::http::{HttpClient, HttpError, HttpRequest, HttpResponse};
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `super::completion::AnthropicCompletionResponse`
 --> packages/provider/src/clients/anthropic/responses.rs:9:5
  |
9 | use super::completion::AnthropicCompletionResponse;
  |     ^^^^^^^^^^^^^^^^^^^---------------------------
  |     |                  |
  |     |                  help: a similar name exists in the module: `AnthropicCompletionRequest`
  |     no `AnthropicCompletionResponse` in `clients::anthropic::completion`

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/clients/anthropic/responses.rs:12:12
   |
12 | use crate::http::HttpResponse;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::runtime`
  --> packages/provider/src/clients/anthropic/streaming.rs:17:12
   |
17 | use crate::runtime::AsyncStream;
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0432]: unresolved import `super::core::Tool`
  --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:45
   |
16 |     core::{AnthropicError, AnthropicResult, Tool},
   |                                             ^^^^ no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::chat::templates::TemplateCategory::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::chat::templates::TemplateCategory::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved import `super::core::Tool`
  --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:45
   |
15 |     core::{AnthropicError, AnthropicResult, Tool},
   |                                             ^^^^ no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::chat::templates::TemplateCategory::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::chat::templates::TemplateCategory::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved imports `super::core::Tool`, `super::core::ToolError`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:14:41
   |
14 |     Message, ResultHandler, SchemaType, Tool, ToolError,
   |                                         ^^^^  ^^^^^^^^^ no `ToolError` in `clients::anthropic::tools::core`
   |                                         |
   |                                         no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::chat::templates::TemplateCategory::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::chat::templates::TemplateCategory::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved imports `core::Tool`, `core::ToolError`
  --> packages/provider/src/clients/anthropic/tools/mod.rs:18:41
   |
18 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |                                         ^^^^  ^^^^^^^^^ no `ToolError` in `clients::anthropic::tools::core`
   |                                         |
   |                                         no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::chat::templates::TemplateCategory::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::chat::templates::TemplateCategory::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved import `function_calling::tool_builder`
  --> packages/provider/src/clients/anthropic/tools/mod.rs:25:9
   |
25 | pub use function_calling::tool_builder;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `tool_builder` in `clients::anthropic::tools::function_calling`
   |
   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined
help: a macro with this name exists at the root of the crate
   |
25 - pub use function_calling::tool_builder;
25 + pub use crate::tool_builder;
   |

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/azure/client.rs:23:5
   |
23 |     completion::{
   |     ^^^^^^^^^^ unresolved import
24 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
25 |     },
26 |     message::Message,
   |     ^^^^^^^ unresolved import
27 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
23 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::completion`, `crate::json_util`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/azure/completion.rs:18:5
   |
18 |     completion::CompletionRequest,
   |     ^^^^^^^^^^ unresolved import
19 |     completion::{self, CompletionError, StreamingCompletionResponse as RigStreaming},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
20 |     json_util::{self, merge},
   |     ^^^^^^^^^   ^^^^ no `json_util` in the root
   |     |
   |     could not find `json_util` in the crate root
21 |     message::{self, MessageError},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
22 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
23 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
18 |     fluent_ai_domain::completion::CompletionRequest,
   |     ++++++++++++++++++
help: a similar path exists
   |
19 |     fluent_ai_domain::completion::{self, CompletionError, StreamingCompletionResponse as RigStreaming},
   |     ++++++++++++++++++
help: a similar path exists
   |
21 |     fluent_ai_domain::message::{self, MessageError},
   |     ++++++++++++++++++
help: a similar path exists
   |
22 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
23 |     clients::anthropic::streaming::StreamingCompletionResponse,
   |     ++++++++++++++++++++

error[E0432]: unresolved import `crate::Models`
   --> packages/provider/src/clients/azure/completion.rs:71:9
    |
71  | pub use crate::Models as CompletionModel;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `Models` in the root
    |
note: variant `crate::clients::openai::error::EndpointType::Models` exists but is inaccessible
   --> packages/provider/src/clients/openai/error.rs:342:5
    |
342 |     Models,
    |     ^^^^^^ not accessible

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/azure/embedding.rs:15:5
   |
15 |     embeddings::{self, EmbeddingError},
   |     ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |     |
   |     unresolved import
16 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:50:1
   |
50 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
15 |     clients::openai::embeddings::{self, EmbeddingError},
   |     +++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::embeddings`
   --> packages/provider/src/clients/azure/embedding.rs:183:20
    |
183 |         use crate::embeddings::EmbeddingError;
    |                    ^^^^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `clients::openai::embeddings`

error[E0432]: unresolved import `crate::http`
   --> packages/provider/src/clients/azure/embedding.rs:184:20
    |
184 |         use crate::http::{HttpClient, HttpRequest};
    |                    ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::embeddings`
   --> packages/provider/src/clients/azure/embedding.rs:245:20
    |
245 |         use crate::embeddings::EmbeddingError;
    |                    ^^^^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `clients::openai::embeddings`

error[E0432]: unresolved import `crate::http`
   --> packages/provider/src/clients/azure/embedding.rs:246:20
    |
246 |         use crate::http::{HttpClient, HttpRequest};
    |                    ^^^^ could not find `http` in the crate root

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/clients/azure/transcription.rs:10:5
   |
10 | use reqwest::multipart::Part;
   |     ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::json_util`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/azure/streaming.rs:14:5
   |
14 |     completion::{CompletionError, CompletionRequest},
   |     ^^^^^^^^^^ unresolved import
15 |     json_util::merge,
   |     ^^^^^^^^^ could not find `json_util` in the crate root
16 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
17 |     streaming::StreamingCompletionResponse as RigStreaming,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::{CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
17 |     clients::anthropic::streaming::StreamingCompletionResponse as RigStreaming,
   |     ++++++++++++++++++++

error[E0432]: unresolved imports `crate::runtime`, `crate::runtime`, `crate::transcription`, `crate::transcription`
  --> packages/provider/src/clients/azure/transcription.rs:15:5
   |
15 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
16 |     transcription::{self, TranscriptionError},
   |     ^^^^^^^^^^^^^   ^^^^ no `transcription` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
   = help: consider importing one of these modules instead:
           crate::clients::azure::transcription
           crate::clients::gemini::transcription
           crate::clients::huggingface::transcription
help: a similar path exists
   |
15 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
16 |     clients::azure::transcription::{self, TranscriptionError},
   |     ++++++++++++++++

error[E0432]: unresolved imports `crate::completion_provider::CompletionResponse`, `crate::completion_provider::StreamingResponse`
  --> packages/provider/src/clients/bedrock/completion.rs:26:42
   |
26 |     CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |                                          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `StreamingResponse` in `completion_provider`
   |                                          |
   |                                          no `CompletionResponse` in `completion_provider`
   |
   = help: consider importing one of these structs instead:
           crate::clients::mistral::completion::CompletionResponse
           crate::clients::openrouter::completion::CompletionResponse
           crate::clients::perplexity::completion::CompletionResponse
           crate::clients::xai::completion::xai_api_types::CompletionResponse
           crate::domain::CompletionResponse
           fluent_ai_domain::CompletionResponse
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
  --> packages/provider/src/clients/ollama/completion.rs:55:1
   |
55 | pub struct CompletionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
   = help: consider importing one of these items instead:
           crate::clients::gemini::StreamingResponse
           crate::domain::completion::StreamingResponse
           fluent_ai_domain::completion::StreamingResponse

error[E0432]: unresolved imports `super::error::InferenceErrorCode`, `super::error::InferenceStage`
   --> packages/provider/src/clients/candle/client.rs:388:28
    |
388 |         use super::error::{InferenceErrorCode, InferenceStage};
    |                            ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `InferenceStage` in `clients::candle::error`
    |                            |
    |                            no `InferenceErrorCode` in `clients::candle::error`

error[E0432]: unresolved import `candle_core`
  --> packages/provider/src/clients/candle/device_manager.rs:12:5
   |
12 | use candle_core::Device;
   |     ^^^^^^^^^^^ use of unresolved module or unlinked crate `candle_core`
   |
   = help: if you wanted to use a crate named `candle_core`, use `cargo add candle_core` to add it to your `Cargo.toml`

error[E0432]: unresolved import `rand_pcg`
  --> packages/provider/src/clients/candle/generation.rs:11:5
   |
11 | use rand_pcg::Pcg64Mcg;
   |     ^^^^^^^^ use of unresolved module or unlinked crate `rand_pcg`
   |
   = help: if you wanted to use a crate named `rand_pcg`, use `cargo add rand_pcg` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rayon`
  --> packages/provider/src/clients/candle/performance.rs:13:5
   |
13 | use rayon::prelude::*;
   |     ^^^^^ use of unresolved module or unlinked crate `rayon`
   |
   = help: if you wanted to use a crate named `rayon`, use `cargo add rayon` to add it to your `Cargo.toml`

error[E0432]: unresolved import `memmap2`
  --> packages/provider/src/clients/candle/model_repo.rs:17:5
   |
17 | use memmap2::Mmap;
   |     ^^^^^^^ use of unresolved module or unlinked crate `memmap2`
   |
   = help: if you wanted to use a crate named `memmap2`, use `cargo add memmap2` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/deepseek/streaming.rs:13:5
   |
13 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
14 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
13 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
14 |     tokio::runtime::{self, AsyncStream},
   |     +++++++

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/gemini/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/gemini/client.rs:19:25
   |
19 | use super::completion::{CompletionModel, GEMINI_1_5_PRO};
   |                         ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::gemini::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::embedding::EmbeddingModel`
  --> packages/provider/src/clients/gemini/client.rs:20:5
   |
20 | use super::embedding::EmbeddingModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::gemini::embedding`
   |
help: consider importing one of these traits instead
   |
20 - use super::embedding::EmbeddingModel;
20 + use crate::EmbeddingModel;
   |
20 - use super::embedding::EmbeddingModel;
20 + use crate::domain::EmbeddingModel;
   |
20 - use super::embedding::EmbeddingModel;
20 + use fluent_ai_domain::EmbeddingModel;
   |

error[E0432]: unresolved import `super::transcription::TranscriptionModel`
  --> packages/provider/src/clients/gemini/client.rs:21:5
   |
21 | use super::transcription::TranscriptionModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^------------------
   |     |                     |
   |     |                     help: a similar name exists in the module: `TranscriptionError`
   |     no `TranscriptionModel` in `clients::gemini::transcription`

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/gemini/client.rs:24:5
   |
24 |     completion::{
   |     ^^^^^^^^^^ unresolved import
25 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
26 |     },
27 |     embeddings::{Embedding, EmbeddingBuilder},
   |     ^^^^^^^^^^ unresolved import
28 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
29 |     message::Message,
   |     ^^^^^^^ unresolved import
30 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
24 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     clients::openai::embeddings::{Embedding, EmbeddingBuilder},
   |     +++++++++++++++++
help: a similar path exists
   |
29 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
30 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0364]: `create_request_body` is only public within the crate, and cannot be re-exported outside
  --> packages/provider/src/clients/gemini/completion.rs:14:67
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |                                                                   ^^^^^^^^^^^^^^^^^^^
   |
note: consider marking `create_request_body` as `pub` in the imported module
  --> packages/provider/src/clients/gemini/completion.rs:14:67
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |                                                                   ^^^^^^^^^^^^^^^^^^^

error[E0432]: unresolved import `super::gemini_client::CompletionModel`
  --> packages/provider/src/clients/gemini/completion.rs:14:5
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |     ^^^^^^^^^^^^^^^
   |     |
   |     no `CompletionModel` in `clients::gemini::gemini_client`
   |     help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`
  --> packages/provider/src/clients/gemini/completion_old.rs:50:5
   |
50 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible

error[E0432]: unresolved imports `crate::completion`, `crate::message`, `crate::message`
   --> packages/provider/src/clients/gemini/completion_old.rs:857:9
    |
857 |         completion::CompletionError,
    |         ^^^^^^^^^^ unresolved import
858 |         message::{self, MimeType as _},
    |         ^^^^^^^   ^^^^ no `message` in the root
    |         |
    |         unresolved import
    |
    = help: consider importing one of these modules instead:
            crate::domain::message
            fluent_ai_domain::message
help: a similar path exists
    |
857 |         fluent_ai_domain::completion::CompletionError,
    |         ++++++++++++++++++
help: a similar path exists
    |
858 |         fluent_ai_domain::message::{self, MimeType as _},
    |         ++++++++++++++++++

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/gemini/embedding.rs:10:12
   |
10 | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:50:1
   |
50 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved imports `crate::completion`, `crate::streaming`
  --> packages/provider/src/clients/gemini/streaming.rs:7:5
   |
7  |     completion::{CompletionError, CompletionRequest},
   |     ^^^^^^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
8  |     streaming::{self},
   |                 ^^^^ no `streaming` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::streaming
           crate::clients::azure::streaming
           crate::clients::candle::streaming
           crate::clients::deepseek::streaming
           crate::clients::gemini::streaming
           crate::clients::huggingface::streaming
           crate::clients::openrouter::streaming
           crate::clients::perplexity::streaming
           crate::clients::together::streaming
           crate::clients::xai::streaming
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:49:1
   |
49 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::bedrock::streaming`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:55:1
   |
55 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible

error[E0432]: unresolved imports `crate::transcription`, `crate::transcription`
  --> packages/provider/src/clients/gemini/transcription.rs:12:12
   |
12 | use crate::transcription::{self, TranscriptionError};
   |            ^^^^^^^^^^^^^   ^^^^ no `transcription` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::azure::transcription`
   |
   = help: consider importing one of these modules instead:
           crate::clients::azure::transcription
           crate::clients::gemini::transcription
           crate::clients::huggingface::transcription

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::streaming`
  --> packages/provider/src/clients/gemini/gemini_client.rs:24:5
   |
24 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
25 |     completion_provider::{ChunkHandler, CompletionProvider, ModelConfig, ModelInfo},
26 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
   |
24 |     fluent_ai_domain::completion::{self, CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     clients::anthropic::streaming::StreamingCompletionResponse,
   |     ++++++++++++++++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::message`
  --> packages/provider/src/clients/gemini/gemini_types.rs:15:5
   |
15 |     completion::{self, CompletionError},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
16 |     message,
   |     ^^^^^^^ no `message` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/groq/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/groq/client.rs:17:25
   |
17 | use super::completion::{CompletionModel, LLAMA_3_70B_8192};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::groq::completion`
   |                         help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`
  --> packages/provider/src/clients/groq/client.rs:20:5
   |
20 |     completion::{
   |     ^^^^^^^^^^ unresolved import
21 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
22 |     },
23 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
24 |     message::Message,
   |     ^^^^^^^ unresolved import
25 |     runtime::AsyncTask,
   |     ^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::groq::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
   |
20 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
24 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     tokio::runtime::AsyncTask,
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/groq/completion.rs:22:5
   |
22 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
...
26 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
27 |     message::{self, MessageError},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
28 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
29 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::groq::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
22 |     fluent_ai_domain::completion::{self, CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     fluent_ai_domain::message::{self, MessageError},
   |     ++++++++++++++++++
help: a similar path exists
   |
28 |     tokio::runtime::{self, AsyncTask},
   |     +++++++
help: a similar path exists
   |
29 |     clients::anthropic::streaming::StreamingCompletionResponse,
   |     ++++++++++++++++++++

error[E0432]: unresolved import `crate::clients::openai::CompletionResponse`
   --> packages/provider/src/clients/groq/completion.rs:169:9
    |
169 | pub use crate::clients::openai::CompletionResponse;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionResponse` in `clients::openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs instead
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::mistral::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::openrouter::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::perplexity::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates

error[E0432]: unresolved imports `crate::clients::openai::CompletionResponse`, `crate::completion`, `crate::http`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/groq/streaming.rs:13:23
   |
13 |     clients::openai::{CompletionResponse, StreamingChoice, StreamingMessage},
   |                       ^^^^^^^^^^^^^^^^^^ no `CompletionResponse` in `clients::openai`
14 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
15 |     http::{HttpClient, HttpRequest},
   |     ^^^^ could not find `http` in the crate root
16 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these items instead:
           crate::clients::groq::completion::CompletionResponse
           crate::clients::mistral::completion::CompletionResponse
           crate::clients::openrouter::completion::CompletionResponse
           crate::clients::perplexity::completion::CompletionResponse
           crate::clients::xai::completion::xai_api_types::CompletionResponse
           crate::domain::CompletionResponse
           fluent_ai_domain::CompletionResponse
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
  --> packages/provider/src/clients/ollama/completion.rs:55:1
   |
55 | pub struct CompletionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self, AsyncStream},
   |     +++++++

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/groq/mod.rs:12:22
   |
12 | pub use completion::{CompletionModel, GroqCompletionBuilder as GroqProvider};
   |                      ^^^^^^^^^^^^^^^
   |                      |
   |                      no `CompletionModel` in `clients::groq::completion`
   |                      help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/huggingface/streaming.rs:8:5
  |
8 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::huggingface::completion`
  |
help: a similar name exists in the module
  |
8 - use super::completion::CompletionModel;
8 + use super::completion::CompletionChunk;
  |
help: consider importing one of these items instead
  |
8 - use super::completion::CompletionModel;
8 + use crate::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use crate::clients::xai::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use crate::domain::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/huggingface/streaming.rs:10:12
   |
10 | use crate::json_util::merge_inplace;
   |            ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved imports `crate::json_util`, `crate::streaming`
  --> packages/provider/src/clients/huggingface/streaming.rs:11:13
   |
11 | use crate::{json_util, streaming};
   |             ^^^^^^^^^  ^^^^^^^^^ no `streaming` in the root
   |             |
   |             no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::streaming
           crate::clients::azure::streaming
           crate::clients::candle::streaming
           crate::clients::deepseek::streaming
           crate::clients::gemini::streaming
           crate::clients::huggingface::streaming
           crate::clients::openrouter::streaming
           crate::clients::perplexity::streaming
           crate::clients::together::streaming
           crate::clients::xai::streaming
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:49:1
   |
49 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::bedrock::streaming`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:55:1
   |
55 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible

error[E0432]: unresolved import `super::completion::ApiResponse`
  --> packages/provider/src/clients/huggingface/transcription.rs:8:5
   |
8  | use super::completion::ApiResponse;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ApiResponse` in `clients::huggingface::completion`
   |
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
help: consider importing one of these items instead
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::anthropic::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::gemini::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::openrouter::client::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::perplexity::client::ApiResponse;
   |
     and 1 other candidate

error[E0432]: unresolved import `crate::transcription`
 --> packages/provider/src/clients/huggingface/transcription.rs:9:5
  |
9 | use crate::transcription;
  |     ^^^^^^^^^^^^^^^^^^^^ no `transcription` in the root
  |
help: consider importing one of these modules instead
  |
9 | use crate::clients::azure::transcription;
  |            ++++++++++++++++
9 | use crate::clients::gemini::transcription;
  |            +++++++++++++++++
9 | use crate::clients::huggingface::transcription;
  |            ++++++++++++++++++++++

error[E0432]: unresolved import `crate::transcription`
  --> packages/provider/src/clients/huggingface/transcription.rs:10:12
   |
10 | use crate::transcription::TranscriptionError;
   |            ^^^^^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::azure::transcription`

error[E0432]: unresolved imports `super::client::Client`, `super::client::Usage`
 --> packages/provider/src/clients/mistral/completion.rs:7:21
  |
7 | use super::client::{Client, Usage};
  |                     ^^^^^^  ^^^^^ no `Usage` in `clients::mistral::client`
  |                     |
  |                     no `Client` in `clients::mistral::client`
  |
  = help: consider importing one of these structs instead:
          crate::clients::azure::Client
          crate::clients::gemini::Client
          crate::clients::groq::Client
          crate::clients::ollama::Client
          crate::clients::openrouter::Client
          crate::clients::perplexity::Client
          crate::clients::together::Client
          crate::clients::xai::Client
          crate::domain::tool::mcp::Client
          fluent_ai_domain::tool::mcp::Client
          progresshub::Client
          progresshub::bandwidth::dns::Client
  = help: consider importing one of these items instead:
          crate::clients::azure::Usage
          crate::clients::openrouter::client::Usage
          crate::clients::perplexity::completion::Usage
          crate::clients::together::embedding::Usage
          crate::clients::xai::completion::xai_api_types::Usage
          crate::domain::chat::commands::StatsType::Usage
          crate::domain::usage::Usage
          fluent_ai_domain::chat::commands::StatsType::Usage
          fluent_ai_domain::usage::Usage

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/mistral/completion.rs:8:12
  |
8 | use crate::streaming::{RawStreamingChoice, StreamingCompletionResponse};
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `clients::anthropic::streaming`

error[E0432]: unresolved imports `crate::clients::mistral::client::ApiResponse`, `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`
  --> packages/provider/src/clients/mistral/completion.rs:11:5
   |
11 |     clients::mistral::client::ApiResponse,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ApiResponse` in `clients::mistral::client`
12 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
13 |     json_util, message,
   |     ^^^^^^^^^  ^^^^^^^ no `message` in the root
   |     |
   |     no `json_util` in the root
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::ApiResponse
           crate::clients::gemini::ApiResponse
           crate::clients::openrouter::client::ApiResponse
           crate::clients::perplexity::client::ApiResponse
           crate::clients::together::client::together_ai_api_types::ApiResponse
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved imports `super::client::ApiResponse`, `super::client::Client`, `super::client::Usage`
  --> packages/provider/src/clients/mistral/embedding.rs:5:21
   |
5  | use super::client::{ApiResponse, Client, Usage};
   |                     ^^^^^^^^^^^  ^^^^^^  ^^^^^ no `Usage` in `clients::mistral::client`
   |                     |            |
   |                     |            no `Client` in `clients::mistral::client`
   |                     no `ApiResponse` in `clients::mistral::client`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::ApiResponse
           crate::clients::gemini::ApiResponse
           crate::clients::openrouter::client::ApiResponse
           crate::clients::perplexity::client::ApiResponse
           crate::clients::together::client::together_ai_api_types::ApiResponse
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client
           progresshub::Client
           progresshub::bandwidth::dns::Client
   = help: consider importing one of these items instead:
           crate::clients::azure::Usage
           crate::clients::openrouter::client::Usage
           crate::clients::perplexity::completion::Usage
           crate::clients::together::embedding::Usage
           crate::clients::xai::completion::xai_api_types::Usage
           crate::domain::chat::commands::StatsType::Usage
           crate::domain::usage::Usage
           fluent_ai_domain::chat::commands::StatsType::Usage
           fluent_ai_domain::usage::Usage

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/mistral/embedding.rs:6:12
   |
6  | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:50:1
   |
50 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `client::Client`
 --> packages/provider/src/clients/mistral/mod.rs:6:18
  |
6 | pub use client::{Client, MistralCompletionBuilder};
  |                  ^^^^^^ no `Client` in `clients::mistral::client`
  |
  = help: consider importing one of these structs instead:
          crate::clients::azure::Client
          crate::clients::gemini::Client
          crate::clients::groq::Client
          crate::clients::ollama::Client
          crate::clients::openrouter::Client
          crate::clients::perplexity::Client
          crate::clients::together::Client
          crate::clients::xai::Client
          crate::domain::tool::mcp::Client
          fluent_ai_domain::tool::mcp::Client
          progresshub::Client
          progresshub::bandwidth::dns::Client

error[E0432]: unresolved import `completion::CompletionModel`
 --> packages/provider/src/clients/mistral/mod.rs:8:33
  |
8 |     CODESTRAL, CODESTRAL_MAMBA, CompletionModel, MINISTRAL_3B, MINISTRAL_8B, MISTRAL_LARGE,
  |                                 ^^^^^^^^^^^^^^^
  |                                 |
  |                                 no `CompletionModel` in `clients::mistral::completion`
  |                                 help: a similar name exists in the module: `CompletionChunk`
  |
  = help: consider importing one of these items instead:
          crate::CompletionModel
          crate::clients::xai::CompletionModel
          crate::domain::CompletionModel
          fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `embedding::EmbeddingModel`
  --> packages/provider/src/clients/mistral/mod.rs:13:21
   |
13 | pub use embedding::{EmbeddingModel, MISTRAL_EMBED};
   |                     ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::mistral::embedding`
   |
   = help: consider importing one of these traits instead:
           crate::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/ollama/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `super::completion::CompletionModel`, `super::completion::EmbeddingModel`
  --> packages/provider/src/clients/ollama/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, EmbeddingModel, MISTRAL_MAGISTRAR_SMALL};
   |                         ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::ollama::completion`
   |                         |
   |                         no `CompletionModel` in `clients::ollama::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::mistral::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/ollama/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     embeddings::{Embed, Embedding, EmbeddingBuilder},
   |     ^^^^^^^^^^ unresolved import
25 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
26 |     message::Message,
   |     ^^^^^^^ unresolved import
27 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::ollama::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
24 |     clients::openai::embeddings::{Embed, Embedding, EmbeddingBuilder},
   |     +++++++++++++++++
help: a similar path exists
   |
26 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/ollama/completion.rs:14:5
   |
14 |     completion::{
   |     ^^^^^^^^^^ unresolved import
15 |         self, AssistantContent, CompletionError, CompletionRequest, Message as CompletionMessage,
   |         ^^^^ no `completion` in the root
16 |     },
17 |     embeddings::{self, Embedding, EmbeddingError, EmbeddingModel as EmbeddingModelTrait},
   |     ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |     |
   |     unresolved import
18 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
19 |     message::{self, Message, MessageError, Text, ToolResultContent, UserContent},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
20 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
21 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::ollama::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:50:1
   |
50 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
17 |     clients::openai::embeddings::{self, Embedding, EmbeddingError, EmbeddingModel as EmbeddingModelTrait},
   |     +++++++++++++++++
help: a similar path exists
   |
19 |     fluent_ai_domain::message::{self, Message, MessageError, Text, ToolResultContent, UserContent},
   |     ++++++++++++++++++
help: a similar path exists
   |
20 |     tokio::runtime::{self, AsyncTask},
   |     +++++++
help: a similar path exists
   |
21 |     clients::anthropic::streaming::StreamingCompletionResponse,
   |     ++++++++++++++++++++

error[E0432]: unresolved imports `crate::completion`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/ollama/streaming.rs:13:5
   |
13 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
14 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
15 |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
13 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
14 |     tokio::runtime::{self, AsyncStream},
   |     +++++++
help: a similar path exists
   |
15 |     clients::anthropic::streaming::{RawStreamingChoice, StreamingCompletionResponse},
   |     ++++++++++++++++++++

error[E0432]: unresolved imports `completion::CompletionModel`, `completion::EmbeddingModel`
  --> packages/provider/src/clients/ollama/mod.rs:14:22
   |
14 | pub use completion::{CompletionModel, EmbeddingModel};
   |                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::ollama::completion`
   |                      |
   |                      no `CompletionModel` in `clients::ollama::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::mistral::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved import `audio::OpenAIAudioClient`
  --> packages/provider/src/clients/openai/mod.rs:31:17
   |
31 | pub use audio::{OpenAIAudioClient, TranscriptionResponse};
   |                 ^^^^^^^^^^^^^^^^^ no `OpenAIAudioClient` in `clients::openai::audio`

error[E0432]: unresolved import `completion::CompletionResponse`
  --> packages/provider/src/clients/openai/mod.rs:34:47
   |
34 | pub use completion::{OpenAICompletionBuilder, CompletionResponse};
   |                                               ^^^^^^^^^^^^^^^^^^ no `CompletionResponse` in `clients::openai::completion`
   |
   = help: consider importing one of these structs instead:
           crate::clients::mistral::completion::CompletionResponse
           crate::clients::openrouter::completion::CompletionResponse
           crate::clients::perplexity::completion::CompletionResponse
           crate::clients::xai::completion::xai_api_types::CompletionResponse
           crate::domain::CompletionResponse
           fluent_ai_domain::CompletionResponse
note: these items exist but are inaccessible:
      crate::clients::groq::completion::CompletionResponse
  --> packages/provider/src/clients/ollama/completion.rs:55:1
   |
55 | pub struct CompletionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::CompletionResponse`: not accessible

error[E0432]: unresolved import `embeddings::OpenAIEmbeddingClient`
  --> packages/provider/src/clients/openai/mod.rs:36:9
   |
36 | pub use embeddings::OpenAIEmbeddingClient;
   |         ^^^^^^^^^^^^---------------------
   |         |           |
   |         |           help: a similar name exists in the module: `OpenAIEmbeddingRequest`
   |         no `OpenAIEmbeddingClient` in `clients::openai::embeddings`

error[E0432]: unresolved import `streaming::OpenAIStream`
  --> packages/provider/src/clients/openai/mod.rs:39:21
   |
39 | pub use streaming::{OpenAIStream, StreamingCompletionResponse, StreamingChoice, StreamingMessage, send_compatible_streaming_request};
   |                     ^^^^^^^^^^^^ no `OpenAIStream` in `clients::openai::streaming`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/openai/discovery.rs:21:12
   |
21 | use crate::model::{
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `fluent_ai_domain::model`

error[E0432]: unresolved import `vision::OpenAIVisionClient`
  --> packages/provider/src/clients/openai/mod.rs:40:9
   |
40 | pub use vision::OpenAIVisionClient;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ no `OpenAIVisionClient` in `clients::openai::vision`

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/openrouter/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/openrouter/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, GPT_4_1};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::openrouter::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/openrouter/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`
  --> packages/provider/src/clients/openrouter/completion.rs:10:5
   |
10 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
11 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/openrouter/streaming.rs:24:5
   |
24 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crossbeam_skiplist`
  --> packages/provider/src/clients/openrouter/streaming.rs:25:5
   |
25 | use crossbeam_skiplist::SkipMap;
   |     ^^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_skiplist`
   |
help: there is a crate or module with a similar name
   |
25 - use crossbeam_skiplist::SkipMap;
25 + use crossbeam_utils::SkipMap;
   |

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/openrouter/mod.rs:18:24
   |
18 |     CLAUDE_3_7_SONNET, CompletionModel, GEMINI_FLASH_2_0, GPT_4_1, PERPLEXITY_SONAR_PRO,
   |                        ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::openrouter::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/perplexity/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/perplexity/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, SONAR_PRO};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::perplexity::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/perplexity/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`
  --> packages/provider/src/clients/perplexity/completion.rs:13:5
   |
13 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
14 |     json_util, message,
   |     ^^^^^^^^^  ^^^^^^^ no `message` in the root
   |     |
   |     no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/perplexity/mod.rs:17:22
   |
17 | pub use completion::{CompletionModel, SONAR, SONAR_PRO};
   |                      ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::perplexity::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/together/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::embedding::EmbeddingModel`
  --> packages/provider/src/clients/together/client.rs:19:17
   |
19 |     embedding::{EmbeddingModel, M2_BERT_80M_8K_RETRIEVAL},
   |                 ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::together::embedding`
   |
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::ollama::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/together/client.rs:23:5
   |
23 |     completion::{
   |     ^^^^^^^^^^ unresolved import
24 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
25 |     },
26 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
27 |     message::Message,
   |     ^^^^^^^ unresolved import
28 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
23 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
28 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::streaming`
  --> packages/provider/src/clients/together/completion.rs:10:12
   |
10 | use crate::streaming::StreamingCompletionResponse;
   |            ^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::anthropic::streaming`

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/together/completion.rs:11:30
   |
11 | use crate::{clients::openai, json_util};
   |                              ^^^^^^^^^ no `json_util` in the root

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/together/embedding.rs:13:12
   |
13 | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:50:1
   |
50 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/together/streaming.rs:6:12
  |
6 | use crate::streaming::StreamingCompletionResponse;
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `clients::anthropic::streaming`

error[E0432]: unresolved imports `crate::completion`, `crate::json_util`
 --> packages/provider/src/clients/together/streaming.rs:8:5
  |
8 |     completion::{CompletionError, CompletionRequest},
  |     ^^^^^^^^^^
  |     |
  |     unresolved import
  |     help: a similar path exists: `fluent_ai_domain::completion`
9 |     json_util::merge,
  |     ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/xai/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/xai/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:48:1
   |
48 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::streaming`
  --> packages/provider/src/clients/xai/completion.rs:13:12
   |
13 | use crate::streaming::StreamingCompletionResponse;
   |            ^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::anthropic::streaming`

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/xai/completion.rs:14:77
   |
14 | use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
   |                                                                             ^^^^^^^^^ no `json_util` in the root

error[E0432]: unresolved import `crate::json_util`
 --> packages/provider/src/clients/xai/streaming.rs:8:12
  |
8 | use crate::json_util::merge;
  |            ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/xai/streaming.rs:9:12
  |
9 | use crate::streaming::StreamingCompletionResponse;
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `clients::anthropic::streaming`

error[E0432]: unresolved import `anthropic::AnthropicCompletionResponse`
  --> packages/provider/src/clients/mod.rs:21:50
   |
21 |     AnthropicClient, AnthropicCompletionRequest, AnthropicCompletionResponse, AnthropicError,
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                                  |
   |                                                  no `AnthropicCompletionResponse` in `clients::anthropic`
   |                                                  help: a similar name exists in the module: `AnthropicCompletionRequest`

error[E0432]: unresolved import `candle_core`
 --> packages/provider/src/image_processing/candle_backend.rs:8:5
  |
8 | use candle_core::{DType, Device, Tensor};
  |     ^^^^^^^^^^^ use of unresolved module or unlinked crate `candle_core`
  |
  = help: if you wanted to use a crate named `candle_core`, use `cargo add candle_core` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/discovery.rs:15:12
   |
15 | use crate::model::{
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `fluent_ai_domain::model`

error[E0432]: unresolved import `candle_nn`
 --> packages/provider/src/image_processing/candle_backend.rs:9:5
  |
9 | use candle_nn::VarBuilder;
  |     ^^^^^^^^^ use of unresolved module or unlinked crate `candle_nn`
  |
  = help: if you wanted to use a crate named `candle_nn`, use `cargo add candle_nn` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/client_factory.rs:21:12
   |
21 | use crate::http::HttpRequest;
   |            ^^^^ could not find `http` in the crate root

error[E0365]: `CompletionCoreError` is private, and cannot be re-exported
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ re-export of private `CompletionCoreError`
   |
   = note: consider declaring type or module `CompletionCoreError` with `pub`

error[E0432]: unresolved import `crate::providers`
  --> packages/provider/src/client_factory.rs:22:12
   |
22 | use crate::providers::Providers;
   |            ^^^^^^^^^ could not find `providers` in the crate root

error[E0432]: unresolved import `zeroize`
  --> packages/provider/src/security/credentials.rs:19:5
   |
19 | use zeroize::{Zeroize, ZeroizeOnDrop};
   |     ^^^^^^^ use of unresolved module or unlinked crate `zeroize`
   |
   = help: if you wanted to use a crate named `zeroize`, use `cargo add zeroize` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `chacha20poly1305`
  --> packages/provider/src/security/encryption.rs:13:5
   |
13 | use chacha20poly1305::{
   |     ^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `chacha20poly1305`
   |
   = help: if you wanted to use a crate named `chacha20poly1305`, use `cargo add chacha20poly1305` to add it to your `Cargo.toml`

error[E0432]: unresolved import `chacha20poly1305`
  --> packages/provider/src/security/encryption.rs:13:5
   |
13 | use chacha20poly1305::{
   |     ^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `chacha20poly1305`
   |
   = help: if you wanted to use a crate named `chacha20poly1305`, use `cargo add chacha20poly1305` to add it to your `Cargo.toml`

error[E0432]: unresolved import `zeroize`
  --> packages/provider/src/security/encryption.rs:19:5
   |
19 | use zeroize::{Zeroize, ZeroizeOnDrop};
   |     ^^^^^^^ use of unresolved module or unlinked crate `zeroize`
   |
   = help: if you wanted to use a crate named `zeroize`, use `cargo add zeroize` to add it to your `Cargo.toml`

error: cannot find attribute `zeroize` in this scope
  --> packages/provider/src/security/credentials.rs:32:7
   |
32 |     #[zeroize(skip)]
   |       ^^^^^^^

error: cannot find attribute `zeroize` in this scope
  --> packages/provider/src/security/encryption.rs:30:7
   |
30 |     #[zeroize(skip)]
   |       ^^^^^^^

error: cannot find attribute `zeroize` in this scope
  --> packages/provider/src/security/encryption.rs:34:7
   |
34 |     #[zeroize(skip)]
   |       ^^^^^^^

error: cannot find attribute `zeroize` in this scope
  --> packages/provider/src/security/encryption.rs:38:7
   |
38 |     #[zeroize(skip)]
   |       ^^^^^^^

error: cannot find attribute `zeroize` in this scope
  --> packages/provider/src/security/encryption.rs:52:7
   |
52 |     #[zeroize(skip)]
   |       ^^^^^^^

error[E0433]: failed to resolve: could not find `util` in the crate root
  --> packages/provider/src/clients/anthropic/messages.rs:60:24
   |
60 |         #[serde(with = "crate::util::json_util::stringified_json")]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/anthropic/messages.rs:110:20
    |
110 |     #[serde(with = "crate::util::json_util::stringified_json")]
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: could not find `json_util` in the crate root
   --> packages/provider/src/clients/anthropic/messages.rs:404:30
    |
404 |             request = crate::json_util::merge(request, params);
    |                              ^^^^^^^^^ could not find `json_util` in the crate root

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/anthropic/requests.rs:82:19
   |
82 |         request: &AnthropicCompletionRequest,
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
82 |         request: &AnthropicCompletionRequest<'_>,
   |                                             ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:130:19
    |
130 |         request: &AnthropicCompletionRequest,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
130 |         request: &AnthropicCompletionRequest<'_>,
    |                                             ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:251:15
    |
251 |     request: &AnthropicCompletionRequest,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
251 |     request: &AnthropicCompletionRequest<'_>,
    |                                         ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:262:15
    |
262 |     request: &AnthropicCompletionRequest,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
262 |     request: &AnthropicCompletionRequest<'_>,
    |                                         ++++

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:148:17
    |
148 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:156:16
    |
156 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:157:39
    |
157 |             let (tx, stream) = crate::runtime::async_stream::<
    |                                       ^^^^^^^
    |                                       |
    |                                       unresolved import
    |                                       help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:162:20
    |
162 |             crate::runtime::spawn_async(async move {
    |                    ^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `tokio::runtime`

error[E0106]: missing lifetime specifier
  --> packages/provider/src/clients/anthropic/tools/core.rs:36:59
   |
36 |     dyn Fn(&Conversation, &Emitter, Req, &D) -> BoxFuture<'_, AnthropicResult<()>> + Send + Sync,
   |            -------------  --------       --               ^^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1, argument 2, or argument 4
   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html
help: consider making the bound lifetime-generic with a new `'a` lifetime
   |
36 -     dyn Fn(&Conversation, &Emitter, Req, &D) -> BoxFuture<'_, AnthropicResult<()>> + Send + Sync,
36 +     dyn for<'a> Fn(&'a Conversation, &'a Emitter, Req, &'a D) -> BoxFuture<'a, AnthropicResult<()>> + Send + Sync,
   |
help: consider introducing a named lifetime parameter
   |
35 ~ pub type InvocationHandler<'a, D, Req, Res> = Box<
36 ~     dyn Fn(&'a Conversation, &'a Emitter, Req, &'a D) -> BoxFuture<'a, AnthropicResult<()>> + Send + Sync,
   |

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:417:24
    |
417 |         conversation: &Conversation,
    |                        ^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
417 |         conversation: &Conversation<'_>,
    |                                    ++++

error[E0433]: failed to resolve: could not find `json_util` in the crate root
   --> packages/provider/src/clients/azure/client.rs:431:16
    |
431 |         crate::json_util::merge_inplace(&mut self.additional_params, p);
    |                ^^^^^^^^^ could not find `json_util` in the crate root

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:118:38
    |
118 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>
    |                                      ^^^^^^^^^^
    |                                      |
    |                                      unresolved import
    |                                      help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:118:69
    |
118 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>
    |                                                                     ^^^^^^^^^^
    |                                                                     |
    |                                                                     unresolved import
    |                                                                     help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:182:34
    |
182 |     ) -> Result<Vec<f64>, crate::embeddings::EmbeddingError> {
    |                                  ^^^^^^^^^^
    |                                  |
    |                                  unresolved import
    |                                  help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:244:28
    |
244 |     ) -> Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError> {
    |                            ^^^^^^^^^^
    |                            |
    |                            unresolved import
    |                            help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:244:59
    |
244 |     ) -> Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError> {
    |                                                           ^^^^^^^^^^
    |                                                           |
    |                                                           unresolved import
    |                                                           help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:317:33
    |
317 |             results.push(crate::embeddings::Embedding {
    |                                 ^^^^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/clients/azure/transcription.rs:77:24
   |
77 |         let mut body = reqwest::multipart::Form::new().part(
   |                        ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

error[E0437]: type `Response` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:385:5
    |
385 |     type Response = CompletionResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0437]: type `StreamingResponse` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:386:5
    |
386 |     type StreamingResponse = StreamingResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0437]: type `Error` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:387:5
    |
387 |     type Error = CompletionError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0407]: method `completion` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:418:5
    |
418 | /     fn completion(
419 | |         &self,
420 | |         request: CompletionRequest,
421 | |     ) -> AsyncTask<Result<Self::Response, Self::Error>> {
...   |
429 | |         })
430 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0407]: method `stream` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:432:5
    |
432 | /     fn stream(
433 | |         &self,
434 | |         request: CompletionRequest,
435 | |     ) -> AsyncTask<Result<AsyncStream<Self::StreamingResponse>, Self::Error>> {
...   |
447 | |         })
448 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:161:31
    |
161 |     hf_client: ArcSwap<Option<hf_hub::api::tokio::Api>>,
    |                               ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:185:19
    |
185 |         let api = hf_hub::api::tokio::Api::new()
    |                   ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:372:32
    |
372 |         let repo = hf_api.repo(hf_hub::Repo::with_revision(
    |                                ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:374:13
    |
374 |             hf_hub::RepoType::Model,
    |             ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:459:16
    |
459 |         repo: &hf_hub::api::tokio::ApiRepo,
    |                ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:20:13
   |
20 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:26:12
   |
26 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:84:17
   |
84 |     ) -> crate::runtime::AsyncTask<
   |                 ^^^^^^^
   |                 |
   |                 unresolved import
   |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:87:33
   |
87 |         let (tx, task) = crate::runtime::channel();
   |                                 ^^^^^^^
   |                                 |
   |                                 unresolved import
   |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:93:24
   |
93 |                 crate::runtime::spawn_async(async move {
   |                        ^^^^^^^
   |                        |
   |                        unresolved import
   |                        help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:150:17
    |
150 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:156:33
    |
156 |         let (tx, task) = crate::runtime::channel();
    |                                 ^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:160:16
    |
160 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/gemini/completion_old.rs:908:36
    |
908 |         #[serde(deserialize_with = "crate::util::string_or_one_or_many")]
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:59:17
   |
59 |     ) -> crate::runtime::AsyncTask<
   |                 ^^^^^^^
   |                 |
   |                 unresolved import
   |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:62:33
   |
62 |         let (tx, task) = crate::runtime::channel();
   |                                 ^^^^^^^
   |                                 |
   |                                 unresolved import
   |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:68:24
   |
68 |                 crate::runtime::spawn_async(async move {
   |                        ^^^^^^^
   |                        |
   |                        unresolved import
   |                        help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:126:17
    |
126 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:132:33
    |
132 |         let (tx, task) = crate::runtime::channel();
    |                                 ^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:136:16
    |
136 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0408]: variable `code` is not bound in all patterns
   --> packages/provider/src/clients/gemini/gemini_error.rs:162:13
    |
162 |             Self::HttpError { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
163 |             Self::RateLimited { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
164 |             Self::Timeout { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
165 |             Self::InternalError { code, .. } if *code >= 500
    |                                   ---- variable not in all patterns

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/gemini/gemini_types.rs:114:32
    |
114 |     #[serde(deserialize_with = "crate::util::string_or_one_or_many")]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0407]: method `execute_completion` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/groq/completion.rs:631:5
    |
631 | /     async fn execute_completion(
632 | |         mut builder: Self,
633 | |         prompt_text: String,
634 | |         api_key: String,
...   |
846 | |         Ok(())
847 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:23:13
   |
23 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:29:12
   |
29 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/huggingface/streaming.rs:61:29
   |
61 |         completion_request: CompletionRequest,
   |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
61 |         completion_request: CompletionRequest<'_>,
   |                                              ++++

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/ollama/streaming.rs:39:13
   |
39 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/ollama/streaming.rs:42:12
   |
42 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/streaming.rs:164:67
    |
164 | fn extract_usage_info(chunk: &serde_json::Value) -> Option<crate::streaming::UsageInfo> {
    |                                                                   ^^^^^^^^^
    |                                                                   |
    |                                                                   unresolved import
    |                                                                   help: a similar path exists: `clients::anthropic::streaming`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/streaming.rs:197:21
    |
197 |         Some(crate::streaming::UsageInfo {
    |                     ^^^^^^^^^
    |                     |
    |                     unresolved import
    |                     help: a similar path exists: `clients::anthropic::streaming`

error[E0726]: implicit elided lifetime not allowed here
    --> packages/provider/src/clients/openrouter/streaming.rs:1773:29
     |
1773 |         completion_request: CompletionRequest,
     |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
     |
help: indicate the anonymous lifetime
     |
1773 |         completion_request: CompletionRequest<'_>,
     |                                              ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/together/completion.rs:237:18
    |
237 |         request: CompletionRequest,
    |                  ^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
237 |         request: CompletionRequest<'_>,
    |                                   ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/xai/completion.rs:106:29
    |
106 |         completion_request: fluent_ai_domain::completion::CompletionRequest,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
106 |         completion_request: fluent_ai_domain::completion::CompletionRequest<'_>,
    |                                                                            ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/xai/completion.rs:130:18
    |
130 |         request: CompletionRequest,
    |                  ^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
130 |         request: CompletionRequest<'_>,
    |                                   ++++

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/xai/streaming.rs:14:29
   |
14 |         completion_request: CompletionRequest,
   |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
14 |         completion_request: CompletionRequest<'_>,
   |                                              ++++

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `candle_transformers`
  --> packages/provider/src/image_processing/candle_backend.rs:17:13
   |
17 |     config: candle_transformers::models::clip::ClipConfig,
   |             ^^^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `candle_transformers`
   |
   = help: if you wanted to use a crate named `candle_transformers`, use `cargo add candle_transformers` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `candle_transformers`
  --> packages/provider/src/image_processing/candle_backend.rs:29:22
   |
29 |         let config = candle_transformers::models::clip::ClipConfig::vit_base_patch32();
   |                      ^^^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `candle_transformers`
   |
   = help: if you wanted to use a crate named `candle_transformers`, use `cargo add candle_transformers` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `candle_transformers`
  --> packages/provider/src/image_processing/candle_backend.rs:42:22
   |
42 |         let config = candle_transformers::models::clip::ClipConfig::vit_base_patch32();
   |                      ^^^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `candle_transformers`
   |
   = help: if you wanted to use a crate named `candle_transformers`, use `cargo add candle_transformers` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: could not find `http` in the crate root
  --> packages/provider/src/client_factory.rs:46:24
   |
46 |         source: crate::http::HttpError,
   |                        ^^^^ could not find `http` in the crate root

error[E0433]: failed to resolve: could not find `OpenAIProvider` in `openai`
   --> packages/provider/src/client_factory.rs:740:40
    |
740 |                 let provider = openai::OpenAIProvider::new();
    |                                        ^^^^^^^^^^^^^^ could not find `OpenAIProvider` in `openai`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `tempfile`
   --> packages/provider/src/security/audit.rs:283:25
    |
283 |         let temp_file = tempfile::NamedTempFile::new().map_err(|e| SecurityError::AuditError {
    |                         ^^^^^^^^ use of unresolved module or unlinked crate `tempfile`
    |
    = help: if you wanted to use a crate named `tempfile`, use `cargo add tempfile` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `uuid`
   --> packages/provider/src/security/audit.rs:338:17
    |
338 |             id: uuid::Uuid::new_v4().to_string(),
    |                 ^^^^ use of unresolved module or unlinked crate `uuid`
    |
    = help: if you wanted to use a crate named `uuid`, use `cargo add uuid` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `uuid`
   --> packages/provider/src/security/audit.rs:585:21
    |
585 |                 id: uuid::Uuid::new_v4().to_string(),
    |                     ^^^^ use of unresolved module or unlinked crate `uuid`
    |
    = help: if you wanted to use a crate named `uuid`, use `cargo add uuid` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/client.rs:88:38
   |
88 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>;
   |                                      ^^^^^^^^^^
   |                                      |
   |                                      unresolved import
   |                                      help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/client.rs:88:69
   |
88 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>;
   |                                                                     ^^^^^^^^^^
   |                                                                     |
   |                                                                     unresolved import
   |                                                                     help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/anthropic/completion.rs:46:12
   |
46 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
note: module `crate::clients::openai::model_info` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:53:1
   |
53 | mod model_info;
   | ^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
   |
46 -     crate::model_info::get_model_config(model_name)
46 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
46 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
46 -     crate::model_info::get_model_config(model_name)
46 +     model_info::get_model_config(model_name)
   |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:350:41
    |
350 |     pub fn from_definition(def: &crate::completion::ToolDefinition) -> Self {
    |                                         ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
350 |     pub fn from_definition(def: &crate::fluent_ai_domain::completion::ToolDefinition) -> Self {
    |                                         ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 3 other candidates
help: if you import `completion`, refer to it directly
    |
350 -     pub fn from_definition(def: &crate::completion::ToolDefinition) -> Self {
350 +     pub fn from_definition(def: &completion::ToolDefinition) -> Self {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:360:19
    |
360 | impl From<&crate::message::Message> for Message {
    |                   ^^^^^^^ unresolved import
    |
help: a similar path exists
    |
360 | impl From<&crate::fluent_ai_domain::message::Message> for Message {
    |                   ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::message;
    |
6   + use fluent_ai_domain::message;
    |
help: if you import `message`, refer to it directly
    |
360 - impl From<&crate::message::Message> for Message {
360 + impl From<&message::Message> for Message {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:379:48
    |
379 |         messages: &crate::ZeroOneOrMany<crate::message::Message>,
    |                                                ^^^^^^^ unresolved import
    |
help: a similar path exists
    |
379 |         messages: &crate::ZeroOneOrMany<crate::fluent_ai_domain::message::Message>,
    |                                                ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::message;
    |
6   + use fluent_ai_domain::message;
    |
help: if you import `message`, refer to it directly
    |
379 -         messages: &crate::ZeroOneOrMany<crate::message::Message>,
379 +         messages: &crate::ZeroOneOrMany<message::Message>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:391:45
    |
391 |         tools: &crate::ZeroOneOrMany<crate::completion::ToolDefinition>,
    |                                             ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
391 |         tools: &crate::ZeroOneOrMany<crate::fluent_ai_domain::completion::ToolDefinition>,
    |                                             ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 3 other candidates
help: if you import `completion`, refer to it directly
    |
391 -         tools: &crate::ZeroOneOrMany<crate::completion::ToolDefinition>,
391 +         tools: &crate::ZeroOneOrMany<completion::ToolDefinition>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:412:49
    |
412 |         documents: &crate::ZeroOneOrMany<crate::completion::Document>,
    |                                                 ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
412 |         documents: &crate::ZeroOneOrMany<crate::fluent_ai_domain::completion::Document>,
    |                                                 ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
help: if you import `completion`, refer to it directly
    |
412 -         documents: &crate::ZeroOneOrMany<crate::completion::Document>,
412 +         documents: &crate::ZeroOneOrMany<completion::Document>,
    |

error[E0422]: cannot find struct, variant or union type `AnthropicMessage` in module `crate::clients::anthropic::messages`
   --> packages/provider/src/clients/anthropic/requests.rs:189:65
    |
189 |             messages: vec![crate::clients::anthropic::messages::AnthropicMessage {
    |                                                                 ^^^^^^^^^^^^^^^^ not found in `crate::clients::anthropic::messages`
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::clients::anthropic::AnthropicMessage;
    |
help: if you import `AnthropicMessage`, refer to it directly
    |
189 -             messages: vec![crate::clients::anthropic::messages::AnthropicMessage {
189 +             messages: vec![AnthropicMessage {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:130:20
    |
130 |             crate::providers::anthropic::AnthropicError::RequestError(format!(
    |                    ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
8   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
130 -             crate::providers::anthropic::AnthropicError::RequestError(format!(
130 +             AnthropicError::RequestError(format!(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:150:61
    |
150 |             AsyncStream<Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>>,
    |                                                             ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
150 -             AsyncStream<Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>>,
150 +             AsyncStream<Result<AnthropicStreamChunk, anthropic::AnthropicError>>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:151:20
    |
151 |             crate::providers::anthropic::AnthropicError,
    |                    ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
151 -             crate::providers::anthropic::AnthropicError,
151 +             anthropic::AnthropicError,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:158:53
    |
158 |                 Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>,
    |                                                     ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
158 -                 Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>,
158 +                 Result<AnthropicStreamChunk, anthropic::AnthropicError>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:168:36
    |
168 | ...                   crate::providers::anthropic::AnthropicError::RequestError(
    |                              ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
8   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
168 -                             crate::providers::anthropic::AnthropicError::RequestError(
168 +                             AnthropicError::RequestError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:172:48
    |
172 |                         return Ok::<(), crate::providers::anthropic::AnthropicError>(());
    |                                                ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
172 -                         return Ok::<(), crate::providers::anthropic::AnthropicError>(());
172 +                         return Ok::<(), anthropic::AnthropicError>(());
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:195:68
    |
195 | ...                   let _ = tx.try_send(Err(crate::providers::anthropic::AnthropicError::DeserializationError(
    |                                                      ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
8   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
195 -                                     let _ = tx.try_send(Err(crate::providers::anthropic::AnthropicError::DeserializationError(
195 +                                     let _ = tx.try_send(Err(AnthropicError::DeserializationError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:225:40
    |
225 | ...                   crate::providers::anthropic::AnthropicError::RequestError(
    |                              ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
8   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
225 -                                 crate::providers::anthropic::AnthropicError::RequestError(
225 +                                 AnthropicError::RequestError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:234:33
    |
234 |                 Ok::<(), crate::providers::anthropic::AnthropicError>(())
    |                                 ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
234 -                 Ok::<(), crate::providers::anthropic::AnthropicError>(())
234 +                 Ok::<(), anthropic::AnthropicError>(())
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:267:50
    |
267 | ) -> Result<Option<AnthropicStreamChunk>, crate::providers::anthropic::AnthropicError> {
    |                                                  ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
8   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
267 - ) -> Result<Option<AnthropicStreamChunk>, crate::providers::anthropic::AnthropicError> {
267 + ) -> Result<Option<AnthropicStreamChunk>, anthropic::AnthropicError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/client.rs:497:20
    |
497 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
497 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
9   + use crate::clients::azure::streaming;
    |
9   + use crate::clients::deepseek::streaming;
    |
9   + use crate::clients::gemini::streaming;
    |
9   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
497 -             crate::streaming::StreamingCompletionResponse<
497 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/azure/client.rs:609:18
    |
609 |     type Model = EmbeddingModel;
    |                  ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/azure/client.rs:612:47
    |
612 |     fn embedding_model(&self, model: &str) -> EmbeddingModel {
    |                                               ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0433]: failed to resolve: use of undeclared type `EmbeddingModel`
   --> packages/provider/src/clients/azure/client.rs:620:9
    |
620 |         EmbeddingModel::new(self.clone(), model, ndims)
    |         ^^^^^^^^^^^^^^ use of undeclared type `EmbeddingModel`
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/azure/client.rs:624:72
    |
624 |     fn embedding_model_with_ndims(&self, model: &str, ndims: usize) -> EmbeddingModel {
    |                                                                        ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0433]: failed to resolve: use of undeclared type `EmbeddingModel`
   --> packages/provider/src/clients/azure/client.rs:625:9
    |
625 |         EmbeddingModel::new(self.clone(), model, ndims)
    |         ^^^^^^^^^^^^^^ use of undeclared type `EmbeddingModel`
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `TranscriptionModel` in this scope
   --> packages/provider/src/clients/azure/client.rs:630:18
    |
630 |     type Model = TranscriptionModel;
    |                  ^^^^^^^^^^^^^^^^^^ help: a trait with a similar name exists: `TranscriptionClient`
    |
   ::: packages/provider/src/client.rs:43:1
    |
43  | pub trait TranscriptionClient: Send + Sync + Clone {
    | -------------------------------------------------- similarly named trait `TranscriptionClient` defined here

error[E0412]: cannot find type `TranscriptionModel` in this scope
   --> packages/provider/src/clients/azure/client.rs:633:51
    |
633 |     fn transcription_model(&self, model: &str) -> TranscriptionModel {
    |                                                   ^^^^^^^^^^^^^^^^^^ help: a trait with a similar name exists: `TranscriptionClient`
    |
   ::: packages/provider/src/client.rs:43:1
    |
43  | pub trait TranscriptionClient: Send + Sync + Clone {
    | -------------------------------------------------- similarly named trait `TranscriptionClient` defined here

error[E0433]: failed to resolve: could not find `ToolDefinition` in `openai`
   --> packages/provider/src/clients/azure/completion.rs:199:75
    |
199 |                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
    |                                                                           ^^^^^^^^^^^^^^ could not find `ToolDefinition` in `openai`
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items
    |
9   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
9   + use crate::domain::ToolDefinition;
    |
9   + use crate::domain::completion::ToolDefinition;
    |
9   + use fluent_ai_domain::ToolDefinition;
    |
      and 1 other candidate
help: if you import `ToolDefinition`, refer to it directly
    |
199 -                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
199 +                 "tools": completion_request.tools.into_iter().map(ToolDefinition::from).collect::<Vec<_>>(),
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/azure/embedding.rs:94:6
   |
94 | impl EmbeddingModel {
   |      ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
9  + use crate::EmbeddingModel;
   |
9  + use crate::domain::EmbeddingModel;
   |
9  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/azure/embedding.rs:106:40
    |
106 | impl crate::client::EmbeddingModel for EmbeddingModel {
    |                                        ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/azure/embedding.rs:176:6
    |
176 | impl EmbeddingModel {
    |      ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
9   + use crate::EmbeddingModel;
    |
9   + use crate::domain::EmbeddingModel;
    |
9   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/azure/transcription.rs:37:6
   |
37 | impl TranscriptionModel {
   |      ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/azure/transcription.rs:48:44
   |
48 | impl transcription::TranscriptionModel for TranscriptionModel {
   |                                            ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/azure/transcription.rs:67:6
   |
67 | impl TranscriptionModel {
   |      ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/completion.rs:405:39
    |
405 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
  --> packages/provider/src/clients/bedrock/streaming.rs:74:43
   |
74 |                         let error_chunk = CompletionChunk {
   |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
   |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
  --> packages/provider/src/clients/huggingface/streaming.rs:49:1
   |
49 | struct CompletionChunk {
   | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
  --> packages/provider/src/clients/bedrock/streaming.rs:89:35
   |
89 |                 let final_chunk = CompletionChunk {
   |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
   |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
  --> packages/provider/src/clients/huggingface/streaming.rs:49:1
   |
49 | struct CompletionChunk {
   | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `EventStreamEvent` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/bedrock/streaming.rs:110:33
    |
110 |         event: fluent_ai_http3::EventStreamEvent,
    |                                 ^^^^^^^^^^^^^^^^ not found in `fluent_ai_http3`

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:152:25
    |
152 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:173:25
    |
173 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:196:25
    |
196 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:219:14
    |
219 |         Some(CompletionChunk {
    |              ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:254:25
    |
254 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:296:37
    |
296 |                         return Some(CompletionChunk {
    |                                     ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:315:29
    |
315 |                 return Some(CompletionChunk {
    |                             ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `ConfigMetrics` in module `super::config`
   --> packages/provider/src/clients/candle/client.rs:711:47
    |
711 |     pub global_config_metrics: super::config::ConfigMetrics,
    |                                               ^^^^^^^^^^^^^ not found in `super::config`

error[E0412]: cannot find type `RuntimeMetrics` in module `super::config`
   --> packages/provider/src/clients/candle/client.rs:713:42
    |
713 |     pub realtime_metrics: super::config::RuntimeMetrics,
    |                                          ^^^^^^^^^^^^^^ not found in `super::config`
    |
help: consider importing this struct
    |
6   + use tokio::runtime::RuntimeMetrics;
    |
help: if you import `RuntimeMetrics`, refer to it directly
    |
713 -     pub realtime_metrics: super::config::RuntimeMetrics,
713 +     pub realtime_metrics: RuntimeMetrics,
    |

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:728:39
    |
728 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:758:35
    |
758 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:771:39
    |
771 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:787:35
    |
787 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:819:39
    |
819 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:853:43
    |
853 |                         let error_chunk = CompletionChunk {
    |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:868:43
    |
868 |                         let error_chunk = CompletionChunk {
    |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:894:39
    |
894 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:931:40
    |
931 |                 let completion_chunk = CompletionChunk {
    |                                        ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:957:31
    |
957 |             let final_chunk = CompletionChunk {
    |                               ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0422]: cannot find struct, variant or union type `CompletionUsage` in module `fluent_ai_domain::usage`
   --> packages/provider/src/clients/candle/client.rs:965:54
    |
965 |                 usage: Some(fluent_ai_domain::usage::CompletionUsage {
    |                                                      ^^^^^^^^^^^^^^^ not found in `fluent_ai_domain::usage`

error[E0412]: cannot find type `CompletionError` in crate `fluent_ai_domain`
    --> packages/provider/src/clients/candle/client.rs:1000:52
     |
1000 | impl From<CandleClientError> for fluent_ai_domain::CompletionError {
     |                                                    ^^^^^^^^^^^^^^^ help: an enum with a similar name exists: `CompletionChunk`
     |
    ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
     |
121  | pub enum CompletionChunk {
     | ------------------------ similarly named enum `CompletionChunk` defined here
     |
     = note: enum `crate::completion_provider::CompletionError` exists but is inaccessible

error[E0433]: failed to resolve: could not find `CompletionError` in `fluent_ai_domain`
    --> packages/provider/src/clients/candle/client.rs:1002:27
     |
1002 |         fluent_ai_domain::CompletionError::ProviderError(err.to_string())
     |                           ^^^^^^^^^^^^^^^
     |                           |
     |                           could not find `CompletionError` in `fluent_ai_domain`
     |                           help: an enum with a similar name exists: `CompletionChunk`
     |
     = note: enum `crate::completion_provider::CompletionError` exists but is inaccessible

error[E0412]: cannot find type `AtomicU32` in this scope
    --> packages/provider/src/clients/candle/device_manager.rs:208:35
     |
208  |       avg_scan_time_us: CachePadded<AtomicU32>,
     |                                     ^^^^^^^^^
     |
    ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3786:1
     |
3786 | / atomic_int! {
3787 | |     cfg(target_has_atomic = "64"),
3788 | |     cfg(target_has_atomic_equal_alignment = "64"),
3789 | |     stable(feature = "integer_atomics_stable", since = "1.34.0"),
...    |
3802 | |     u64 AtomicU64
3803 | | }
     | |_- similarly named struct `AtomicU64` defined here
     |
help: a struct with a similar name exists
     |
208  -     avg_scan_time_us: CachePadded<AtomicU32>,
208  +     avg_scan_time_us: CachePadded<AtomicU64>,
     |
help: consider importing this struct
     |
6    + use std::sync::atomic::AtomicU32;
     |

error[E0433]: failed to resolve: use of undeclared type `AtomicU32`
   --> packages/provider/src/clients/candle/device_manager.rs:220:48
    |
220 |             avg_scan_time_us: CachePadded::new(AtomicU32::new(0)),
    |                                                ^^^^^^^^^ use of undeclared type `AtomicU32`
    |
help: a struct with a similar name exists
    |
220 -             avg_scan_time_us: CachePadded::new(AtomicU32::new(0)),
220 +             avg_scan_time_us: CachePadded::new(AtomicU64::new(0)),
    |
help: consider importing this struct
    |
6   + use std::sync::atomic::AtomicU32;
    |

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
  --> packages/provider/src/clients/candle/models.rs:55:39
   |
55 |             CandleModel::Llama2_7B => ModelInfoData {
   |                                       ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
   |
  ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
   |
23 | pub struct ModelInfo {
   | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
  --> packages/provider/src/clients/candle/models.rs:68:40
   |
68 |             CandleModel::Llama2_13B => ModelInfoData {
   |                                        ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
   |
  ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
   |
23 | pub struct ModelInfo {
   | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
  --> packages/provider/src/clients/candle/models.rs:81:40
   |
81 |             CandleModel::Mistral_7B => ModelInfoData {
   |                                        ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
   |
  ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
   |
23 | pub struct ModelInfo {
   | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
  --> packages/provider/src/clients/candle/models.rs:94:42
   |
94 |             CandleModel::CodeLlama_7B => ModelInfoData {
   |                                          ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
   |
  ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
   |
23 | pub struct ModelInfo {
   | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
   --> packages/provider/src/clients/candle/models.rs:107:39
    |
107 |             CandleModel::Phi3_Mini => ModelInfoData {
    |                                       ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
    |
23  | pub struct ModelInfo {
    | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
   --> packages/provider/src/clients/candle/models.rs:120:38
    |
120 |             CandleModel::Gemma_2B => ModelInfoData {
    |                                      ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
    |
23  | pub struct ModelInfo {
    | -------------------- similarly named struct `ModelInfo` defined here

error[E0422]: cannot find struct, variant or union type `ModelInfoData` in this scope
   --> packages/provider/src/clients/candle/models.rs:133:38
    |
133 |             CandleModel::Gemma_7B => ModelInfoData {
    |                                      ^^^^^^^^^^^^^ help: a struct with a similar name exists: `ModelInfo`
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/model/info.rs:23:1
    |
23  | pub struct ModelInfo {
    | -------------------- similarly named struct `ModelInfo` defined here

error[E0425]: cannot find value `data` in this scope
   --> packages/provider/src/clients/candle/models.rs:148:30
    |
148 |         ModelInfo::from_data(data)
    |                              ^^^^ not found in this scope

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/completion.rs:42:12
   |
42 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
note: module `crate::clients::openai::model_info` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:53:1
   |
53 | mod model_info;
   | ^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
42 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     model_info::get_model_config(model_name)
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:22:16
   |
22 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ^^^^^^^^^ unresolved import
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:55:1
   |
55 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
   |
22 |         crate::clients::anthropic::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ++++++++++++++++++++
help: consider importing one of these modules
   |
7  + use crate::clients::azure::streaming;
   |
7  + use crate::clients::gemini::streaming;
   |
7  + use crate::clients::huggingface::streaming;
   |
7  + use crate::clients::openrouter::streaming;
   |
     and 3 other candidates
help: if you import `streaming`, refer to it directly
   |
22 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
22 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:89:19
   |
89 |         Ok(crate::streaming::StreamingCompletionResponse::new(
   |                   ^^^^^^^^^ unresolved import
   |
help: a similar path exists
   |
89 |         Ok(crate::clients::anthropic::streaming::StreamingCompletionResponse::new(
   |                   ++++++++++++++++++++
help: consider importing one of these items
   |
7  + use crate::clients::azure::StreamingCompletionResponse;
   |
7  + use crate::clients::gemini::streaming::StreamingCompletionResponse;
   |
7  + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
   |
7  + use crate::clients::perplexity::streaming::StreamingCompletionResponse;
   |
help: if you import `StreamingCompletionResponse`, refer to it directly
   |
89 -         Ok(crate::streaming::StreamingCompletionResponse::new(
89 +         Ok(StreamingCompletionResponse::new(
   |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/gemini/client.rs:167:34
    |
167 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
167 -     ) -> Result<fluent_ai_http3::Response> {
167 +     ) -> Result<Response> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/gemini/client.rs:206:34
    |
206 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
206 -     ) -> Result<fluent_ai_http3::Response> {
206 +     ) -> Result<Response> {
    |

error[E0405]: cannot find trait `Embed` in this scope
   --> packages/provider/src/clients/gemini/client.rs:284:26
    |
284 |     pub fn embeddings<D: Embed>(&self, model: &str) -> EmbeddingBuilder<EmbeddingModel, D> {
    |                          ^^^^^ not found in this scope

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/gemini/client.rs:603:63
    |
603 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
   ::: packages/provider/src/clients/gemini/gemini_types.rs:398:1
    |
398 | pub struct FunctionResponse {
    | --------------------------- similarly named struct `FunctionResponse` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
603 -             completion::CompletionResponse<super::completion::CompletionResponse>,
603 +             completion::CompletionResponse<super::completion::FunctionResponse>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
603 -             completion::CompletionResponse<super::completion::CompletionResponse>,
603 +             completion::CompletionResponse<CompletionResponse>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/client.rs:630:20
    |
630 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
630 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
630 -             crate::streaming::StreamingCompletionResponse<
630 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:68:6
    |
68  | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
68  - impl CompletionModel {
68  + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
30  + use crate::CompletionModel;
    |
30  + use crate::domain::CompletionModel;
    |
30  + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:77:38
    |
77  | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
77  - impl completion::CompletionModel for CompletionModel {
77  + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
30  + use crate::CompletionModel;
    |
30  + use crate::domain::CompletionModel;
    |
30  + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:152:20
    |
152 |             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
152 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
30  + use crate::clients::azure::streaming;
    |
30  + use crate::clients::deepseek::streaming;
    |
30  + use crate::clients::gemini::streaming;
    |
30  + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
152 -             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
152 +             streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0422]: cannot find struct, variant or union type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:161:26
    |
161 |             let result = CompletionModel { client, model }
    |                          ^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `ExecutableCode` in this scope
    --> packages/provider/src/clients/gemini/completion_old.rs:1020:24
     |
1020 |         ExecutableCode(ExecutableCode),
     |                        ^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing one of these structs
     |
847  +     use crate::clients::gemini::gemini_api_types::ExecutableCode;
     |
847  +     use crate::clients::gemini::gemini_types::ExecutableCode;
     |

error[E0412]: cannot find type `CodeExecutionResult` in this scope
    --> packages/provider/src/clients/gemini/completion_old.rs:1021:29
     |
1021 |         CodeExecutionResult(CodeExecutionResult),
     |                             ^^^^^^^^^^^^^^^^^^^
...
1608 |     pub struct CodeExecution {}
     |     ------------------------ similarly named struct `CodeExecution` defined here
     |
help: a struct with a similar name exists
     |
1021 -         CodeExecutionResult(CodeExecutionResult),
1021 +         CodeExecutionResult(CodeExecution),
     |
help: consider importing one of these structs
     |
847  +     use crate::clients::gemini::gemini_api_types::CodeExecutionResult;
     |
847  +     use crate::clients::gemini::gemini_types::CodeExecutionResult;
     |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/gemini/embedding.rs:36:37
   |
36 | impl embeddings::EmbeddingModel for EmbeddingModel {
   |                                     ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::EmbeddingModel;
   |
6  + use crate::domain::EmbeddingModel;
   |
6  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0412]: cannot find type `ExecutableCode` in this scope
   --> packages/provider/src/clients/gemini/embedding.rs:153:33
    |
153 |         executable_code: Option<ExecutableCode>,
    |                                 ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
112 +     use crate::clients::gemini::gemini_api_types::ExecutableCode;
    |
112 +     use crate::clients::gemini::gemini_types::ExecutableCode;
    |

error[E0412]: cannot find type `CodeExecutionResult` in this scope
   --> packages/provider/src/clients/gemini/embedding.rs:155:39
    |
155 |         code_execution_result: Option<CodeExecutionResult>,
    |                                       ^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
112 +     use crate::clients::gemini::gemini_api_types::CodeExecutionResult;
    |
112 +     use crate::clients::gemini::gemini_types::CodeExecutionResult;
    |

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/gemini/transcription.rs:33:6
   |
28 | pub struct GeminiTranscriptionModel {
   | ----------------------------------- similarly named struct `GeminiTranscriptionModel` defined here
...
33 | impl TranscriptionModel {
   |      ^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `GeminiTranscriptionModel`

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/gemini/transcription.rs:42:44
   |
28 | pub struct GeminiTranscriptionModel {
   | ----------------------------------- similarly named struct `GeminiTranscriptionModel` defined here
...
42 | impl transcription::TranscriptionModel for TranscriptionModel {
   |                                            ^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `GeminiTranscriptionModel`

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:43:6
    |
43  | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
43  - impl CompletionModel {
43  + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:52:38
    |
52  | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
52  - impl completion::CompletionModel for CompletionModel {
52  + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:128:20
    |
128 |             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
128 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::azure::streaming;
    |
6   + use crate::clients::deepseek::streaming;
    |
6   + use crate::clients::gemini::streaming;
    |
6   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
128 -             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
128 +             streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0422]: cannot find struct, variant or union type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:137:26
    |
137 |             let result = CompletionModel { client, model }
    |                          ^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:147:6
    |
147 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
147 - impl CompletionModel {
147 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:152:16
    |
152 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |                ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
152 |         crate::clients::anthropic::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |                ++++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::azure::streaming;
    |
6   + use crate::clients::deepseek::streaming;
    |
6   + use crate::clients::gemini::streaming;
    |
6   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
152 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
152 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/groq/client.rs:127:34
    |
127 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
127 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
127 +     ) -> Result<Response, HttpError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/groq/client.rs:436:20
    |
436 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
436 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::groq::streaming;
    |
      and 5 other candidates
help: if you import `streaming`, refer to it directly
    |
436 -             crate::streaming::StreamingCompletionResponse<
436 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/groq/completion.rs:177:6
    |
177 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
177 - impl CompletionModel {
177 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/groq/completion.rs:257:38
    |
257 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
257 - impl completion::CompletionModel for CompletionModel {
257 + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/groq/completion.rs:615:35
    |
615 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/groq/completion.rs:788:53
    |
788 | ...                   let mut chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:25:16
   |
25 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ^^^^^^^^^ unresolved import
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:55:1
   |
55 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
   |
25 |         crate::clients::anthropic::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ++++++++++++++++++++
help: consider importing one of these modules
   |
7  + use crate::clients::azure::streaming;
   |
7  + use crate::clients::deepseek::streaming;
   |
7  + use crate::clients::gemini::streaming;
   |
7  + use crate::clients::huggingface::streaming;
   |
     and 4 other candidates
help: if you import `streaming`, refer to it directly
   |
25 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
25 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:88:19
   |
88 |         Ok(crate::streaming::StreamingCompletionResponse::new(
   |                   ^^^^^^^^^ unresolved import
   |
help: a similar path exists
   |
88 |         Ok(crate::clients::anthropic::streaming::StreamingCompletionResponse::new(
   |                   ++++++++++++++++++++
help: consider importing one of these items
   |
7  + use crate::clients::azure::StreamingCompletionResponse;
   |
7  + use crate::clients::gemini::streaming::StreamingCompletionResponse;
   |
7  + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
   |
7  + use crate::clients::perplexity::streaming::StreamingCompletionResponse;
   |
help: if you import `StreamingCompletionResponse`, refer to it directly
   |
88 -         Ok(crate::streaming::StreamingCompletionResponse::new(
88 +         Ok(StreamingCompletionResponse::new(
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/huggingface/completion.rs:42:12
   |
42 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
note: module `crate::clients::openai::model_info` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:53:1
   |
53 | mod model_info;
   | ^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
42 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     model_info::get_model_config(model_name)
   |

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/huggingface/transcription.rs:44:6
   |
44 | impl TranscriptionModel {
   |      ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `TranscriptionModel` in this scope
  --> packages/provider/src/clients/huggingface/transcription.rs:52:44
   |
52 | impl transcription::TranscriptionModel for TranscriptionModel {
   |                                            ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/mistral/completion.rs:252:6
    |
252 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
252 - impl CompletionModel {
252 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/mistral/completion.rs:384:38
    |
384 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
384 - impl completion::CompletionModel for CompletionModel {
384 + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/mistral/embedding.rs:18:6
   |
18 | impl EmbeddingModel {
   |      ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
1  + use crate::EmbeddingModel;
   |
1  + use crate::domain::EmbeddingModel;
   |
1  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/mistral/embedding.rs:28:37
   |
28 | impl embeddings::EmbeddingModel for EmbeddingModel {
   |                                     ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
1  + use crate::EmbeddingModel;
   |
1  + use crate::domain::EmbeddingModel;
   |
1  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/mistral/model_info.rs:300:12
    |
300 |     crate::model_info::get_model_config(model_name)
    |            ^^^^^^^^^^ unresolved import
    |
note: module `crate::clients::openai::model_info` exists but is inaccessible
   --> packages/provider/src/clients/openai/mod.rs:53:1
    |
53  | mod model_info;
    | ^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
300 -     crate::model_info::get_model_config(model_name)
300 +     crate::ModelInfo::get_model_config(model_name)
    |
help: a similar path exists
    |
300 |     crate::clients::gemini::model_info::get_model_config(model_name)
    |            +++++++++++++++++
help: consider importing this module
    |
8   + use crate::clients::gemini::model_info;
    |
help: if you import `model_info`, refer to it directly
    |
300 -     crate::model_info::get_model_config(model_name)
300 +     model_info::get_model_config(model_name)
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/ollama/client.rs:141:34
    |
141 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
141 -     ) -> Result<fluent_ai_http3::Response> {
141 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/client.rs:479:20
    |
479 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
479 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 5 other candidates
help: if you import `streaming`, refer to it directly
    |
479 -             crate::streaming::StreamingCompletionResponse<
479 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:138:6
    |
138 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:204:38
    |
204 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:299:6
    |
299 | impl EmbeddingModel {
    |      ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::EmbeddingModel;
    |
7   + use crate::domain::EmbeddingModel;
    |
7   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:336:30
    |
336 | impl EmbeddingModelTrait for EmbeddingModel {
    |                              ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::EmbeddingModel;
    |
7   + use crate::domain::EmbeddingModel;
    |
7   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0574]: expected struct, variant or union type, found enum `ProviderMessage`
   --> packages/provider/src/clients/ollama/streaming.rs:142:16
    |
142 |         delta: ProviderMessage {
    |                ^^^^^^^^^^^^^^^ not a struct, variant or union type

error[E0425]: cannot find function `is_chat_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:420:29
    |
420 |                 if !models::is_chat_model(model) {
    |                             ^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `CHAT_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:424:33
    |
424 |                         models::CHAT_MODELS,
    |                                 ^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:431:29
    |
431 |                 if !models::is_embedding_model(model) {
    |                             ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_audio_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:442:29
    |
442 |                 if !models::is_audio_model(model) {
    |                             ^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
15  + use crate::clients::openai::messages::is_audio_model;
    |
help: if you import `is_audio_model`, refer to it directly
    |
442 -                 if !models::is_audio_model(model) {
442 +                 if !is_audio_model(model) {
    |

error[E0425]: cannot find value `AUDIO_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:446:33
    |
446 |                           models::AUDIO_MODELS,
    |                                   ^^^^^^^^^^^^ help: a constant with a similar name exists: `ALL_MODELS`
    |
   ::: packages/provider/src/clients/openai/mod.rs:120:5
    |
120 | /     pub const ALL_MODELS: &[&str] = &[
121 | |         GPT_4_1,
122 | |         GPT_4_1_MINI,
123 | |         GPT_4_1_NANO,
...   |
138 | |         TEXT_EMBEDDING_3_SMALL,
139 | |     ];
    | |______- similarly named constant `ALL_MODELS` defined here

error[E0425]: cannot find value `WHISPER_1` in module `models`
   --> packages/provider/src/clients/openai/client.rs:447:33
    |
447 |                         models::WHISPER_1,
    |                                 ^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_tts_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:453:29
    |
453 |                 if !models::is_tts_model(model) {
    |                             ^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `TTS_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:457:33
    |
457 |                           models::TTS_MODELS,
    |                                   ^^^^^^^^^^ help: a constant with a similar name exists: `ALL_MODELS`
    |
   ::: packages/provider/src/clients/openai/mod.rs:120:5
    |
120 | /     pub const ALL_MODELS: &[&str] = &[
121 | |         GPT_4_1,
122 | |         GPT_4_1_MINI,
123 | |         GPT_4_1_NANO,
...   |
138 | |         TEXT_EMBEDDING_3_SMALL,
139 | |     ];
    | |______- similarly named constant `ALL_MODELS` defined here

error[E0425]: cannot find value `TTS_1` in module `models`
   --> packages/provider/src/clients/openai/client.rs:458:33
    |
458 |                         models::TTS_1,
    |                                 ^^^^^ not found in `models`

error[E0425]: cannot find function `is_vision_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:464:29
    |
464 |                 if !models::is_vision_model(model) {
    |                             ^^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
15  + use crate::clients::openai::messages::is_vision_model;
    |
help: if you import `is_vision_model`, refer to it directly
    |
464 -                 if !models::is_vision_model(model) {
464 +                 if !is_vision_model(model) {
    |

error[E0425]: cannot find function `is_supported_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:475:29
    |
475 |                 if !models::is_supported_model(model) {
    |                             ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_supported_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:492:21
    |
492 |         if !models::is_supported_model(model) {
    |                     ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `model_family` in module `models`
   --> packages/provider/src/clients/openai/client.rs:504:29
    |
504 |             family: models::model_family(model).unwrap_or("unknown"),
    |                             ^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `model_generation` in module `models`
   --> packages/provider/src/clients/openai/client.rs:505:33
    |
505 |             generation: models::model_generation(model).unwrap_or("unknown"),
    |                                 ^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `context_length` in module `models`
   --> packages/provider/src/clients/openai/client.rs:506:34
    |
506 |             max_context: models::context_length(model),
    |                                  ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_streaming` in module `models`
   --> packages/provider/src/clients/openai/client.rs:507:41
    |
507 |             supports_streaming: models::supports_streaming(model),
    |                                         ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_tools` in module `models`
   --> packages/provider/src/clients/openai/client.rs:508:37
    |
508 |             supports_tools: models::supports_tools(model),
    |                                     ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_vision` in module `models`
   --> packages/provider/src/clients/openai/client.rs:509:38
    |
509 |             supports_vision: models::supports_vision(model),
    |                                      ^^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
15  + use crate::clients::openai::vision::supports_vision;
    |
help: if you import `supports_vision`, refer to it directly
    |
509 -             supports_vision: models::supports_vision(model),
509 +             supports_vision: supports_vision(model),
    |

error[E0425]: cannot find function `supports_audio` in module `models`
   --> packages/provider/src/clients/openai/client.rs:510:37
    |
510 |             supports_audio: models::supports_audio(model),
    |                                     ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `temperature_range` in module `models`
   --> packages/provider/src/clients/openai/client.rs:511:40
    |
511 |             temperature_range: models::temperature_range(model),
    |                                        ^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:549:57
    |
549 |             EndpointType::ChatCompletions => endpoints::CHAT_COMPLETIONS,
    |                                                         ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `EMBEDDINGS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:550:52
    |
550 |             EndpointType::Embeddings => endpoints::EMBEDDINGS,
    |                                                    ^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_TRANSCRIPTIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:551:60
    |
551 |             EndpointType::AudioTranscription => endpoints::AUDIO_TRANSCRIPTIONS,
    |                                                            ^^^^^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_TRANSLATIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:552:58
    |
552 |             EndpointType::AudioTranslation => endpoints::AUDIO_TRANSLATIONS,
    |                                                          ^^^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_SPEECH` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:553:54
    |
553 |             EndpointType::TextToSpeech => endpoints::AUDIO_SPEECH,
    |                                                      ^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:554:56
    |
554 |             EndpointType::VisionAnalysis => endpoints::CHAT_COMPLETIONS, /* Vision uses chat completions */
    |                                                        ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `MODELS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:555:48
    |
555 |             EndpointType::Models => endpoints::MODELS,
    |                                                ^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `FILES` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:556:47
    |
556 |             EndpointType::Files => endpoints::FILES,
    |                                               ^^^^^ not found in `endpoints`

error[E0425]: cannot find value `FINE_TUNING` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:557:52
    |
557 |             EndpointType::FineTuning => endpoints::FINE_TUNING,
    |                                                    ^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `MODERATIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:558:53
    |
558 |             EndpointType::Moderations => endpoints::MODERATIONS,
    |                                                     ^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:695:24
    |
695 |             endpoints::CHAT_COMPLETIONS,
    |                        ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0433]: failed to resolve: could not find `CredentialSource` in `security`
   --> packages/provider/src/clients/openai/client.rs:870:34
    |
870 |                 crate::security::CredentialSource::Runtime {
    |                                  ^^^^^^^^^^^^^^^^ could not find `CredentialSource` in `security`
    |
help: a struct with a similar name exists
    |
870 -                 crate::security::CredentialSource::Runtime {
870 +                 crate::security::CredentialConfig::Runtime {
    |
help: consider importing this enum
    |
15  + use crate::security::credentials::CredentialSource;
    |
help: if you import `CredentialSource`, refer to it directly
    |
870 -                 crate::security::CredentialSource::Runtime {
870 +                 CredentialSource::Runtime {
    |

error[E0412]: cannot find type `CredentialStatistics` in module `crate::security`
   --> packages/provider/src/clients/openai/client.rs:892:73
    |
892 |     pub async fn get_credential_statistics() -> Result<crate::security::CredentialStatistics> {
    |                                                                         ^^^^^^^^^^^^^^^^^^^^ not found in `crate::security`
    |
help: consider importing this struct
    |
15  + use crate::security::credentials::CredentialStatistics;
    |
help: if you import `CredentialStatistics`, refer to it directly
    |
892 -     pub async fn get_credential_statistics() -> Result<crate::security::CredentialStatistics> {
892 +     pub async fn get_credential_statistics() -> Result<CredentialStatistics> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/model_info.rs:115:12
    |
115 |     crate::model_info::get_model_config(model_name)
    |            ^^^^^^^^^^ unresolved import
    |
help: a struct with a similar name exists
    |
115 -     crate::model_info::get_model_config(model_name)
115 +     crate::ModelInfo::get_model_config(model_name)
    |
help: a similar path exists
    |
115 |     crate::clients::gemini::model_info::get_model_config(model_name)
    |            +++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::gemini::model_info;
    |
6   + use crate::clients::mistral::model_info;
    |
help: if you import `model_info`, refer to it directly
    |
115 -     crate::model_info::get_model_config(model_name)
115 +     model_info::get_model_config(model_name)
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/moderation.rs:620:12
    |
620 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
620 -     crate::async_task::spawn_async(async move {
620 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
620 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
620 -     crate::async_task::spawn_async(async move {
620 +     async_task::spawn_async(async move {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:486:44
    |
486 |                 let messages_call = crate::providers::openai::messages::OpenAIToolCall {
    |                                            ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::openai::messages;
    |
help: if you import `messages`, refer to it directly
    |
486 -                 let messages_call = crate::providers::openai::messages::OpenAIToolCall {
486 +                 let messages_call = messages::OpenAIToolCall {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:489:38
    |
489 |                     function: crate::providers::openai::messages::OpenAIFunctionCall {
    |                                      ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::openai::messages;
    |
help: if you import `messages`, refer to it directly
    |
489 -                     function: crate::providers::openai::messages::OpenAIFunctionCall {
489 +                     function: messages::OpenAIFunctionCall {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:500:40
    |
500 |                     .map(|call| crate::providers::openai::messages::OpenAIToolCall {
    |                                        ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::openai::messages;
    |
help: if you import `messages`, refer to it directly
    |
500 -                     .map(|call| crate::providers::openai::messages::OpenAIToolCall {
500 +                     .map(|call| messages::OpenAIToolCall {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:503:42
    |
503 |                         function: crate::providers::openai::messages::OpenAIFunctionCall {
    |                                          ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::openai::messages;
    |
help: if you import `messages`, refer to it directly
    |
503 -                         function: crate::providers::openai::messages::OpenAIFunctionCall {
503 +                         function: messages::OpenAIFunctionCall {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:518:29
    |
518 |                 Some(crate::providers::openai::OpenAIContent::Text(
    |                             ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum
    |
6   + use crate::clients::openai::messages::OpenAIContent;
    |
help: if you import `OpenAIContent`, refer to it directly
    |
518 -                 Some(crate::providers::openai::OpenAIContent::Text(
518 +                 Some(OpenAIContent::Text(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:526:24
    |
526 |                 crate::providers::openai::messages::OpenAIFunctionCall {
    |                        ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::openai::messages;
    |
help: if you import `messages`, refer to it directly
    |
526 -                 crate::providers::openai::messages::OpenAIFunctionCall {
526 +                 messages::OpenAIFunctionCall {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/streaming.rs:711:12
    |
711 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
711 -     crate::async_task::spawn_async(async move {
711 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
711 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
711 -     crate::async_task::spawn_async(async move {
711 +     async_task::spawn_async(async move {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/streaming.rs:754:12
    |
754 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
754 -     crate::async_task::spawn_async(async move {
754 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
754 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
754 -     crate::async_task::spawn_async(async move {
754 +     async_task::spawn_async(async move {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/streaming.rs:809:12
    |
809 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
809 -     crate::async_task::spawn_async(async move {
809 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
809 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
809 -     crate::async_task::spawn_async(async move {
809 +     async_task::spawn_async(async move {
    |

error[E0573]: expected type, found module `models`
   --> packages/provider/src/clients/openai/mod.rs:296:6
    |
296 | impl models {
    |      ^^^^^^ not a type

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:504:20
    |
504 |         if models::is_embedding_model(model) {
    |                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `cost_tier` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:623:17
    |
623 |         models::cost_tier(model)
    |                 ^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_vision` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:647:33
    |
647 |             "vision" => models::supports_vision(model),
    |                                 ^^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
565 +     use crate::clients::openai::vision::supports_vision;
    |
help: if you import `supports_vision`, refer to it directly
    |
647 -             "vision" => models::supports_vision(model),
647 +             "vision" => supports_vision(model),
    |

error[E0425]: cannot find function `supports_function_calling` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:648:43
    |
648 |             "function_calling" => models::supports_function_calling(model),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_streaming` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:649:36
    |
649 |             "streaming" => models::supports_streaming(model),
    |                                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:650:36
    |
650 |             "embedding" => models::is_embedding_model(model),
    |                                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/openrouter/client.rs:160:34
    |
160 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
160 -     ) -> Result<fluent_ai_http3::Response> {
160 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openrouter/client.rs:504:20
    |
504 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
504 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
504 -             crate::streaming::StreamingCompletionResponse<
504 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/openrouter/completion.rs:122:6
    |
122 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/openrouter/completion.rs:176:38
    |
176 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/openrouter/completion.rs:216:9
    |
216 |         CompletionModel::stream(self, completion_request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `AtomicUsize` in this scope
   --> packages/provider/src/clients/openrouter/streaming.rs:760:21
    |
760 |     current_window: AtomicUsize,
    |                     ^^^^^^^^^^^ not found in this scope
    |
    = note: struct `crate::image_processing::factory::batch_processing::AtomicUsize` exists but is inaccessible
help: consider importing this struct
    |
14  + use std::sync::atomic::AtomicUsize;
    |

error[E0433]: failed to resolve: use of undeclared type `AtomicUsize`
    --> packages/provider/src/clients/openrouter/streaming.rs:1230:29
     |
1230 |             current_window: AtomicUsize::new(0),
     |                             ^^^^^^^^^^^ use of undeclared type `AtomicUsize`
     |
     = note: struct `crate::image_processing::factory::batch_processing::AtomicUsize` exists but is inaccessible
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0412]: cannot find type `AtomicUsize` in this scope
    --> packages/provider/src/clients/openrouter/streaming.rs:1394:17
     |
1394 |     cache_size: AtomicUsize,
     |                 ^^^^^^^^^^^ not found in this scope
     |
     = note: struct `crate::image_processing::factory::batch_processing::AtomicUsize` exists but is inaccessible
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0433]: failed to resolve: use of undeclared type `AtomicUsize`
    --> packages/provider/src/clients/openrouter/streaming.rs:1760:25
     |
1760 |             cache_size: AtomicUsize::new(0),
     |                         ^^^^^^^^^^^ use of undeclared type `AtomicUsize`
     |
     = note: struct `crate::image_processing::factory::batch_processing::AtomicUsize` exists but is inaccessible
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/perplexity/client.rs:144:34
    |
144 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
144 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
144 +     ) -> Result<Response, HttpError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/client.rs:491:20
    |
491 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
491 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
491 -             crate::streaming::StreamingCompletionResponse<
491 +             streaming::StreamingCompletionResponse<
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/client.rs:492:24
    |
492 |                 crate::providers::openai::StreamingCompletionResponse,
    |                        ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
492 -                 crate::providers::openai::StreamingCompletionResponse,
492 +                 openai::StreamingCompletionResponse,
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/perplexity/completion.rs:107:6
    |
107 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:163:25
    |
163 |     type Error = crate::completion::MessageError;
    |                         ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: a similar path exists
    |
163 |     type Error = crate::fluent_ai_domain::completion::MessageError;
    |                         ++++++++++++++++++
help: consider importing this module
    |
7   + use crate::clients::azure::completion;
    |
help: if you import `completion`, refer to it directly
    |
163 -     type Error = crate::completion::MessageError;
163 +     type Error = completion::MessageError;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:172:41
    |
172 |                         _ => Err(crate::completion::MessageError::ConversionError(
    |                                         ^^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
172 |                         _ => Err(crate::fluent_ai_domain::completion::MessageError::ConversionError(
    |                                         ++++++++++++++++++
help: consider importing one of these enums
    |
7   + use crate::domain::MessageError;
    |
7   + use fluent_ai_domain::MessageError;
    |
help: if you import `MessageError`, refer to it directly
    |
172 -                         _ => Err(crate::completion::MessageError::ConversionError(
172 +                         _ => Err(MessageError::ConversionError(
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:191:52
    |
191 | ...                   _ => return Err(crate::completion::MessageError::ConversionError(
    |                                              ^^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
191 |                             _ => return Err(crate::fluent_ai_domain::completion::MessageError::ConversionError(
    |                                                    ++++++++++++++++++
help: consider importing one of these enums
    |
7   + use crate::domain::MessageError;
    |
7   + use fluent_ai_domain::MessageError;
    |
help: if you import `MessageError`, refer to it directly
    |
191 -                             _ => return Err(crate::completion::MessageError::ConversionError(
191 +                             _ => return Err(MessageError::ConversionError(
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/perplexity/completion.rs:222:38
    |
222 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/completion.rs:224:37
    |
224 |     type StreamingResponse = crate::providers::openai::StreamingCompletionResponse;
    |                                     ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
224 -     type StreamingResponse = crate::providers::openai::StreamingCompletionResponse;
224 +     type StreamingResponse = openai::StreamingCompletionResponse;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:266:16
    |
266 |         crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
266 |         crate::clients::anthropic::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
266 -         crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
266 +         streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/completion.rs:275:16
    |
275 |         crate::providers::openai::send_compatible_streaming_request(builder).await
    |                ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
275 -         crate::providers::openai::send_compatible_streaming_request(builder).await
275 +         openai::send_compatible_streaming_request(builder).await
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:156:34
    |
156 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
156 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
156 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:171:34
    |
171 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
171 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
171 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:188:34
    |
188 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
188 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
188 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/together/client.rs:561:63
    |
561 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/request.rs:18:1
    |
18  | pub struct CompletionRequest<'a> {
    | -------------------------------- similarly named struct `CompletionRequest` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
561 -             completion::CompletionResponse<super::completion::CompletionResponse>,
561 +             completion::CompletionResponse<super::completion::CompletionRequest>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
561 -             completion::CompletionResponse<super::completion::CompletionResponse>,
561 +             completion::CompletionResponse<CompletionResponse>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/together/client.rs:588:20
    |
588 |             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
588 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/together/client.rs:588:78
    |
588 |             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                                                                              ^^^^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/request.rs:18:1
    |
18  | pub struct CompletionRequest<'a> {
    | -------------------------------- similarly named struct `CompletionRequest` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             crate::streaming::StreamingCompletionResponse<super::completion::CompletionRequest>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             crate::streaming::StreamingCompletionResponse<CompletionResponse>,
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/together/completion.rs:130:6
    |
130 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/candle.rs:40:1
    |
40  | pub enum CompletionCoreError {
    | ---------------------------- similarly named enum `CompletionError` defined here
    |
help: an enum with a similar name exists
    |
130 - impl CompletionModel {
130 + impl CompletionError {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:140:29
    |
140 |         completion_request: completion::CompletionRequest,
    |                             ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: could not find `ToolDefinition` in `openai`
   --> packages/provider/src/clients/together/completion.rs:172:75
    |
172 |                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
    |                                                                           ^^^^^^^^^^^^^^ could not find `ToolDefinition` in `openai`
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items
    |
6   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
6   + use crate::domain::ToolDefinition;
    |
6   + use crate::domain::completion::ToolDefinition;
    |
6   + use fluent_ai_domain::ToolDefinition;
    |
      and 1 other candidate
help: if you import `ToolDefinition`, refer to it directly
    |
172 -                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
172 +                 "tools": completion_request.tools.into_iter().map(ToolDefinition::from).collect::<Vec<_>>(),
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:185:6
    |
185 | impl completion::CompletionModel for CompletionModel {
    |      ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 5 other candidates

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/together/completion.rs:185:38
    |
185 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/candle.rs:40:1
    |
40  | pub enum CompletionCoreError {
    | ---------------------------- similarly named enum `CompletionError` defined here
    |
help: an enum with a similar name exists
    |
185 - impl completion::CompletionModel for CompletionModel {
185 + impl completion::CompletionModel for CompletionError {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:192:29
    |
192 |         completion_request: completion::CompletionRequest,
    |                             ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:193:17
    |
193 |     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
    |                 ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/together/completion.rs:239:9
    |
239 |         CompletionModel::stream(self, request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: an enum with a similar name exists
    |
239 -         CompletionModel::stream(self, request).await
239 +         CompletionError::stream(self, request).await
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/together/embedding.rs:64:37
   |
64 | impl embeddings::EmbeddingModel for EmbeddingModel {
   |                                     ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::EmbeddingModel;
   |
6  + use crate::domain::EmbeddingModel;
   |
6  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/together/embedding.rs:128:6
    |
128 | impl EmbeddingModel {
    |      ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
6   + use crate::EmbeddingModel;
    |
6   + use crate::domain::EmbeddingModel;
    |
6   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/xai/client.rs:173:34
    |
173 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
173 -     ) -> Result<fluent_ai_http3::Response> {
173 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/xai/client.rs:519:20
    |
519 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:55:1
    |
55  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
519 |             crate::clients::anthropic::streaming::StreamingCompletionResponse<
    |                    ++++++++++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
519 -             crate::streaming::StreamingCompletionResponse<
519 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
  --> packages/provider/src/clients/xai/completion.rs:32:6
   |
32 | impl CompletionModel {
   |      ^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::CompletionModel;
   |
6  + use crate::domain::CompletionModel;
   |
6  + use fluent_ai_domain::CompletionModel;
   |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
  --> packages/provider/src/clients/xai/completion.rs:99:6
   |
99 | impl completion::CompletionModel for CompletionModel {
   |      ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
  --> packages/provider/src/lib.rs:7:1
   |
7  + mod completion;
   |
help: consider importing one of these modules
   |
6  + use crate::clients::azure::completion;
   |
6  + use crate::clients::gemini::completion;
   |
6  + use crate::clients::huggingface::completion;
   |
6  + use crate::clients::mistral::completion;
   |
     and 5 other candidates

error[E0412]: cannot find type `CompletionModel` in this scope
  --> packages/provider/src/clients/xai/completion.rs:99:38
   |
99 | impl completion::CompletionModel for CompletionModel {
   |                                      ^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::CompletionModel;
   |
6  + use crate::domain::CompletionModel;
   |
6  + use fluent_ai_domain::CompletionModel;
   |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:107:17
    |
107 |     ) -> Result<completion::CompletionResponse<CompletionResponse>, CompletionError> {
    |                 ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/xai/completion.rs:132:9
    |
132 |         CompletionModel::stream(self, request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:143:42
    |
143 |     impl TryFrom<CompletionResponse> for completion::CompletionResponse {
    |                                          ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::gemini::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
137 +     use crate::clients::openrouter::completion;
    |
137 +     use crate::clients::perplexity::completion;
    |
      and 4 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:160:33
    |
160 | ...                   completion::AssistantContent::text(text)
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::clients::openai::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
160 -                                 completion::AssistantContent::text(text)
160 +                                 AssistantContent::text(text)
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:163:33
    |
163 | ...                   completion::AssistantContent::text(refusal)
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::clients::openai::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
163 -                                 completion::AssistantContent::text(refusal)
163 +                                 AssistantContent::text(refusal)
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:172:33
    |
172 | ...                   completion::AssistantContent::tool_call(
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::clients::openai::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
172 -                                 completion::AssistantContent::tool_call(
172 +                                 AssistantContent::tool_call(
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:193:16
    |
193 |             Ok(completion::CompletionResponse {
    |                ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::gemini::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
137 +     use crate::clients::openrouter::completion;
    |
137 +     use crate::clients::perplexity::completion;
    |
      and 4 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:200:15
    |
200 |     impl From<completion::ToolDefinition> for ToolDefinition {
    |               ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:201:23
    |
201 |         fn from(tool: completion::ToolDefinition) -> Self {
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:212:23
    |
212 |         pub function: completion::ToolDefinition,
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:48:1
    |
48  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0412]: cannot find type `OpenAIProvider` in module `openai`
   --> packages/provider/src/client_factory.rs:120:23
    |
120 |     provider: openai::OpenAIProvider,
    |                       ^^^^^^^^^^^^^^ not found in `openai`

error[E0412]: cannot find type `OpenAICompletionRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:164:45
    |
164 |             let completion_request: openai::OpenAICompletionRequest =
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `OpenAICompletionBuilder`
    |
   ::: packages/provider/src/clients/openai/completion.rs:42:1
    |
42  | pub struct OpenAICompletionBuilder {
    | ---------------------------------- similarly named struct `OpenAICompletionBuilder` defined here
    |
note: struct `crate::client_factory::openai::completion::OpenAICompletionRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/completion.rs:89:1
    |
89  | pub struct OpenAICompletionRequest<'a> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `OpenAICompletionRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:194:45
    |
194 |             let completion_request: openai::OpenAICompletionRequest =
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `OpenAICompletionBuilder`
    |
   ::: packages/provider/src/clients/openai/completion.rs:42:1
    |
42  | pub struct OpenAICompletionBuilder {
    | ---------------------------------- similarly named struct `OpenAICompletionBuilder` defined here
    |
note: struct `crate::client_factory::openai::completion::OpenAICompletionRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/completion.rs:89:1
    |
89  | pub struct OpenAICompletionRequest<'a> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `OpenAIEmbeddingRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:242:44
    |
242 |             let embedding_request: openai::OpenAIEmbeddingRequest =
    |                                            ^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::client_factory::openai::embeddings::OpenAIEmbeddingRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/embeddings.rs:13:1
    |
13  | pub struct OpenAIEmbeddingRequest {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/anthropic/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/deepseek/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/completion_old.rs:34:62
   |
34 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
34 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/gemini_client.rs:11:62
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/gemini_types.rs:8:62
   |
8  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
8  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/groq/completion.rs:9:62
   |
9  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
9  - use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
9  + use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/huggingface/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
   --> packages/provider/src/clients/mistral/completion.rs:539:62
    |
539 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
    |                                                              ^^^^^ private struct
    |
note: the struct `Usage` is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
    |
13  | use crate::usage::Usage;
    |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
    |
539 - use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
539 + use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
    |

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/openai/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/anthropic/client.rs:16:34
   |
16 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
16 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/anthropic/completion.rs:30:23
   |
30 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
30 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:12
   |
16 |     core::{AnthropicError, AnthropicResult, Tool},
   |            ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
16 |     core::{super::AnthropicError, AnthropicResult, Tool},
   |            +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:28
    |
16  |     core::{AnthropicError, AnthropicResult, Tool},
    |                            ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
16  |     core::{AnthropicError, super::AnthropicResult, Tool},
    |                            +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:12
   |
15 |     core::{AnthropicError, AnthropicResult, Tool},
   |            ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
15 |     core::{super::AnthropicError, AnthropicResult, Tool},
   |            +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:28
    |
15  |     core::{AnthropicError, AnthropicResult, Tool},
    |                            ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
15  |     core::{AnthropicError, super::AnthropicResult, Tool},
    |                            +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:13:5
   |
13 |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
13 |     super::AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:13:21
    |
13  |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
13  |     AnthropicError, super::AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     +++++++

error[E0603]: struct import `Message` is private
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:14:5
   |
14 |     Message, ResultHandler, SchemaType, Tool, ToolError,
   |     ^^^^^^^ private struct import
   |
note: the struct import `Message` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:53
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                                                     ^^^^^^^
note: ...and refers to the struct import `Message` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:35:9
   |
35 | pub use messages::*;
   |         ^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `Message` which is defined here
  --> packages/provider/src/clients/anthropic/messages.rs:21:1
   |
21 | pub struct Message {
   | ^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `Message` through the re-export
   |
14 |     super::Message, ResultHandler, SchemaType, Tool, ToolError,
   |     +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/mod.rs:17:5
   |
17 |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
17 |     super::AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/mod.rs:17:21
    |
17  |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
17  |     AnthropicError, super::AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     +++++++

error[E0603]: struct import `Message` is private
  --> packages/provider/src/clients/anthropic/tools/mod.rs:18:5
   |
18 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     ^^^^^^^ private struct import
   |
note: the struct import `Message` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:53
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                                                     ^^^^^^^
note: ...and refers to the struct import `Message` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:35:9
   |
35 | pub use messages::*;
   |         ^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `Message` which is defined here
  --> packages/provider/src/clients/anthropic/messages.rs:21:1
   |
21 | pub struct Message {
   | ^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `Message` through the re-export
   |
18 |     super::Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     +++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/mod.rs:41:34
   |
41 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
41 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/client.rs:22:34
   |
22 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
22 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/completion.rs:26:5
   |
26 |     CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |     ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
26 |     completion::CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |     ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/error.rs:17:33
   |
17 | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 - use crate::completion_provider::CompletionError;
17 + use completion::CompletionError;
   |

error[E0603]: struct `MemoryPool` is private
   --> packages/provider/src/clients/candle/mod.rs:28:23
    |
28  | pub use memory_pool::{MemoryPool, MemoryPoolManager, PoolConfig, PoolStatistics, PooledEntry};
    |                       ^^^^^^^^^^ private struct
    |
note: the struct `MemoryPool` is defined here
   --> packages/provider/src/clients/candle/memory_pool.rs:232:1
    |
232 | struct MemoryPool {
    | ^^^^^^^^^^^^^^^^^

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/deepseek/client.rs:17:27
   |
17 |     completion_provider::{CompletionError, CompletionProvider},
   |                           ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 |     completion_provider::{completion::CompletionError, CompletionProvider},
   |                           ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/deepseek/completion.rs:28:23
   |
28 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
28 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `FinishReason` is private
   --> packages/provider/src/clients/gemini/completion.rs:27:32
    |
27  |     Content, ContentCandidate, FinishReason, FunctionCall, FunctionDeclaration, FunctionResponse,
    |                                ^^^^^^^^^^^^ private enum import
    |
note: the enum import `FinishReason` is defined here...
   --> packages/provider/src/clients/gemini/gemini_types.rs:8:48
    |
8   | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
    |                                                ^^^^^^^^^^^^
note: ...and refers to the enum `FinishReason` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:110:1
    |
110 | pub enum FinishReason {
    | ^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `FinishReason` through the re-export
    |
27  |     Content, ContentCandidate, chunk::FinishReason, FunctionCall, FunctionDeclaration, FunctionResponse,
    |                                +++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/gemini/gemini_error.rs:8:33
   |
8  | use crate::completion_provider::CompletionError as ProviderError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
8  - use crate::completion_provider::CompletionError as ProviderError;
8  + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/gemini/gemini_streaming.rs:17:33
   |
17 | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 - use crate::completion_provider::CompletionError;
17 + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/groq/completion.rs:24:23
   |
24 |         ChunkHandler, CompletionError as ProviderCompletionError, CompletionProvider, ModelConfig,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
24 -         ChunkHandler, CompletionError as ProviderCompletionError, CompletionProvider, ModelConfig,
24 +         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig,
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/huggingface/client.rs:17:27
   |
17 |     completion_provider::{CompletionError, CompletionProvider},
   |                           ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 |     completion_provider::{completion::CompletionError, CompletionProvider},
   |                           ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/huggingface/completion.rs:28:23
   |
28 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
28 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/mistral/client.rs:20:34
   |
20 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
20 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/mistral/completion.rs:562:23
    |
562 |         ChunkHandler, CompletionError as ProviderError, CompletionProvider, ModelConfig, ModelInfo,
    |                       ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
562 -         ChunkHandler, CompletionError as ProviderError, CompletionProvider, ModelConfig, ModelInfo,
562 +         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
    |

error[E0603]: struct import `MistralCompletionBuilder` is private
   --> packages/provider/src/clients/mistral/mod.rs:6:26
    |
6   | pub use client::{Client, MistralCompletionBuilder};
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `MistralCompletionBuilder` is defined here...
   --> packages/provider/src/clients/mistral/client.rs:14:5
    |
14  | use super::completion::MistralCompletionBuilder;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `MistralCompletionBuilder` which is defined here
   --> packages/provider/src/clients/mistral/completion.rs:575:1
    |
575 | pub struct MistralCompletionBuilder {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `MistralCompletionBuilder` through the re-export
    |
6   | pub use client::{Client, completion::MistralCompletionBuilder};
    |                          ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/mod.rs:43:34
   |
43 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
43 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/client.rs:33:34
   |
33 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
33 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/completion.rs:29:23
   |
29 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
29 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/xai/completion.rs:14:60
   |
14 | use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
   |                                                            ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
14 - use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
14 + use crate::{clients::openai::Message, completion::CompletionError, json_util};
   |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/xai/completion.rs:141:37
    |
141 |     use crate::completion_provider::CompletionError;
    |                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
141 -     use crate::completion_provider::CompletionError;
141 +     use completion::CompletionError;
    |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/xai/streaming.rs:7:33
   |
7  | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
   |
23 |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
7  - use crate::completion_provider::CompletionError;
7  + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:204:51
    |
204 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
204 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
204 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:206:54
    |
206 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
206 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
206 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:298:51
    |
298 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
298 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
298 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:304:62
    |
304 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
304 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
304 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:309:53
    |
309 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
309 -                         crate::completion_provider::CompletionError::RequestTooLarge
309 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:322:51
    |
322 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
322 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
322 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:328:62
    |
328 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
328 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
328 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:333:53
    |
333 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
333 -                         crate::completion_provider::CompletionError::RequestTooLarge
333 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:346:51
    |
346 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
346 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
346 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:352:62
    |
352 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
352 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
352 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:357:53
    |
357 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
357 -                         crate::completion_provider::CompletionError::RequestTooLarge
357 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:376:67
    |
376 |         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
    |                                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
376 -         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
376 +         F: Fn(Result<CompletionChunk, completion::CompletionError>)
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:439:73
    |
439 |         AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
    |                                                                         ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
439 -         AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
439 +         AsyncStream<Result<CompletionChunk, completion::CompletionError>>,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:440:37
    |
440 |         crate::completion_provider::CompletionError,
    |                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
440 -         crate::completion_provider::CompletionError,
440 +         completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:444:54
    |
444 |             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
444 -             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
444 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:455:54
    |
455 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
455 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?
455 +             .map_err(|_| completion::CompletionError)?
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:462:54
    |
462 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
462 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
462 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:466:52
    |
466 |                 401 => crate::completion_provider::CompletionError::AuthError,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
466 -                 401 => crate::completion_provider::CompletionError::AuthError,
466 +                 401 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:467:52
    |
467 |                 413 => crate::completion_provider::CompletionError::RequestTooLarge,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
467 -                 413 => crate::completion_provider::CompletionError::RequestTooLarge,
467 +                 413 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:468:52
    |
468 |                 429 => crate::completion_provider::CompletionError::RateLimited,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
468 -                 429 => crate::completion_provider::CompletionError::RateLimited,
468 +                 429 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:469:50
    |
469 |                 _ => crate::completion_provider::CompletionError::HttpError,
    |                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
469 -                 _ => crate::completion_provider::CompletionError::HttpError,
469 +                 _ => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:500:57
    |
500 | ...                   crate::completion_provider::CompletionError::StreamError,
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
500 -                             crate::completion_provider::CompletionError::StreamError,
500 +                             completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:516:69
    |
516 |     ) -> Result<GenerateContentRequest, crate::completion_provider::CompletionError> {
    |                                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
516 -     ) -> Result<GenerateContentRequest, crate::completion_provider::CompletionError> {
516 +     ) -> Result<GenerateContentRequest, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:574:54
    |
574 |     ) -> Result<Content, crate::completion_provider::CompletionError> {
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
574 -     ) -> Result<Content, crate::completion_provider::CompletionError> {
574 +     ) -> Result<Content, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:580:56
    |
580 |                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
580 -                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
580 +                     .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:602:66
    |
602 |                         .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
602 -                         .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
602 +                         .map_err(|_| completion::CompletionError)?,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:610:56
    |
610 |                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
610 -                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
610 +                     .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:623:56
    |
623 |     ) -> Result<Vec<Tool>, crate::completion_provider::CompletionError> {
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
623 -     ) -> Result<Vec<Tool>, crate::completion_provider::CompletionError> {
623 +     ) -> Result<Vec<Tool>, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:635:70
    |
635 | ...                   .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
    |                                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
635 -                             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
635 +                             .map_err(|_| completion::CompletionError)?,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:656:62
    |
656 |     ) -> Result<CompletionChunk, crate::completion_provider::CompletionError> {
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
656 -     ) -> Result<CompletionChunk, crate::completion_provider::CompletionError> {
656 +     ) -> Result<CompletionChunk, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:659:54
    |
659 |             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
659 -             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
659 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:664:48
    |
664 |             .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
664 -             .ok_or(crate::completion_provider::CompletionError::ParseError)?;
664 +             .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:716:66
    |
716 | ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
716 - ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
716 + ) -> Result<GeminiCompletionBuilder, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:197:51
    |
197 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
197 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
197 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:199:54
    |
199 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
199 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
199 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:293:51
    |
293 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
293 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
293 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:299:62
    |
299 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
299 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
299 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:304:53
    |
304 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
304 -                         crate::completion_provider::CompletionError::RequestTooLarge
304 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:317:51
    |
317 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
317 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
317 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:323:62
    |
323 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
323 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
323 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:328:53
    |
328 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
328 -                         crate::completion_provider::CompletionError::RequestTooLarge
328 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:341:51
    |
341 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
341 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
341 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:347:62
    |
347 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
347 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
347 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:352:53
    |
352 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
352 -                         crate::completion_provider::CompletionError::RequestTooLarge
352 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:371:67
    |
371 |         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
    |                                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
371 -         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
371 +         F: Fn(Result<CompletionChunk, completion::CompletionError>)
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:436:80
    |
436 |         crate::AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
    |                                                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
436 -         crate::AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
436 +         crate::AsyncStream<Result<CompletionChunk, completion::CompletionError>>,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:639:66
    |
639 | ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:52
    |
23  |     CompletionCoreClient, CompletionCoreClientExt, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                                                    ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
639 - ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
639 + ) -> Result<GeminiCompletionBuilder, completion::CompletionError> {
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/ollama/client.rs:480:35
    |
480 |                 super::streaming::StreamingCompletionResponse,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/ollama/streaming.rs:15:37
    |
15  |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `StreamingCompletionResponse` through the re-export
    |
480 -                 super::streaming::StreamingCompletionResponse,
480 +                 streaming::StreamingCompletionResponse,
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/ollama/completion.rs:206:41
    |
206 |     type StreamingResponse = streaming::StreamingCompletionResponse<CompletionResponse>;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/ollama/streaming.rs:15:37
    |
15  |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `StreamingCompletionResponse` through the re-export
    |
206 -     type StreamingResponse = streaming::StreamingCompletionResponse<CompletionResponse>;
206 +     type StreamingResponse = streaming::StreamingCompletionResponse;
    |

error[E0603]: struct `Usage` is private
   --> packages/provider/src/clients/openai/streaming.rs:316:75
    |
316 |             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
    |                                                                           ^^^^^ private struct
    |
note: the struct `Usage` is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
    |
13  | use crate::usage::Usage;
    |     ^^^^^^^^^^^^^^^^^^^
help: consider importing one of these structs instead
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| crate::domain::usage::Usage {
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| fluent_ai_domain::usage::Usage {
    |
help: import `Usage` directly
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| fluent_ai_domain::usage::Usage {
    |

error[E0603]: struct import `CompletionResponse` is private
   --> packages/provider/src/clients/xai/client.rs:492:63
    |
492 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `CompletionResponse` is defined here...
   --> packages/provider/src/clients/xai/completion.rs:8:21
    |
8   | use xai_api_types::{CompletionResponse, ToolDefinition};
    |                     ^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `CompletionResponse` which is defined here
   --> packages/provider/src/clients/xai/completion.rs:222:5
    |
222 |     pub struct CompletionResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: consider importing this struct instead
    |
492 -             completion::CompletionResponse<super::completion::CompletionResponse>,
492 +             completion::CompletionResponse<crate::clients::xai::completion::xai_api_types::CompletionResponse>,
    |
help: import `CompletionResponse` directly
    |
492 -             completion::CompletionResponse<super::completion::CompletionResponse>,
492 +             completion::CompletionResponse<clients::xai::completion::xai_api_types::CompletionResponse>,
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/xai/client.rs:520:35
    |
520 |                 super::streaming::StreamingCompletionResponse,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/xai/streaming.rs:9:5
    |
9   | use crate::streaming::StreamingCompletionResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `StreamingCompletionResponse` through the re-export
    |
520 -                 super::streaming::StreamingCompletionResponse,
520 +                 streaming::StreamingCompletionResponse,
    |

warning: unexpected `cfg` condition value: `candle`
  --> packages/provider/src/lib.rs:23:7
   |
23 | #[cfg(feature = "candle")]
   |       ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `candle` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `cylo`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:16:7
   |
16 | #[cfg(feature = "cylo")]
   |       ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `cylo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:217:11
    |
217 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:301:11
    |
301 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:316:15
    |
316 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:388:19
    |
388 |             #[cfg(feature = "cylo")]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:421:15
    |
421 |         #[cfg(feature = "cylo")]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:451:19
    |
451 |         #[cfg(not(feature = "cylo"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:488:11
    |
488 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: ambiguous glob re-exports
  --> packages/provider/src/clients/anthropic/mod.rs:29:9
   |
29 | pub use completion::*;
   |         ^^^^^^^^^^^^^ the name `CacheControl` in the type namespace is first re-exported here
...
35 | pub use messages::*;
   |         ----------- but the name `CacheControl` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> packages/provider/src/clients/anthropic/mod.rs:29:9
   |
29 | pub use completion::*;
   |         ^^^^^^^^^^^^^ the name `AnthropicStreamChunk` in the type namespace is first re-exported here
...
38 | pub use streaming::*;
   |         ------------ but the name `AnthropicStreamChunk` in the type namespace is also re-exported here

warning: unexpected `cfg` condition value: `audio`
  --> packages/provider/src/clients/azure/mod.rs:18:7
   |
18 | #[cfg(feature = "audio")]
   |       ^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `audio` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `audio`
  --> packages/provider/src/clients/azure/mod.rs:24:7
   |
24 | #[cfg(feature = "audio")]
   |       ^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `audio` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/azure/client.rs:12:29
   |
12 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/azure/client.rs:13:5
   |
13 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `audio`
   --> packages/provider/src/clients/azure/client.rs:311:11
    |
311 |     #[cfg(feature = "audio")]
    |           ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `audio` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `convert::Infallible` and `str::FromStr`
 --> packages/provider/src/clients/azure/completion.rs:9:11
  |
9 | use std::{convert::Infallible, str::FromStr};
  |           ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `Serialize`
  --> packages/provider/src/clients/azure/completion.rs:11:26
   |
11 | use serde::{Deserialize, Serialize};
   |                          ^^^^^^^^^

warning: unused imports: `OneOrMany` and `TranscriptionResponse`
  --> packages/provider/src/clients/azure/completion.rs:16:5
   |
16 |     OneOrMany,
   |     ^^^^^^^^^
17 |     clients::openai::{self, TranscriptionResponse, send_compatible_streaming_request},
   |                             ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `fluent_ai_domain::model::AnyEmbeddingCapable`
 --> packages/provider/src/clients/azure/embedding.rs:9:5
  |
9 | use fluent_ai_domain::model::AnyEmbeddingCapable;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_json::json`
  --> packages/provider/src/clients/azure/embedding.rs:11:5
   |
11 | use serde_json::json;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `transcription::*`
  --> packages/provider/src/clients/azure/mod.rs:32:9
   |
32 | pub use transcription::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused imports: `CompletionClient` and `ProviderClient`
  --> packages/provider/src/clients/bedrock/mod.rs:40:21
   |
40 | use crate::client::{CompletionClient, ProviderClient};
   |                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/bedrock/client.rs:14:5
   |
14 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/bedrock/completion.rs:12:29
   |
12 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `serde_json::Value`
  --> packages/provider/src/clients/bedrock/completion.rs:19:5
   |
19 | use serde_json::Value;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `arrayvec::ArrayString`
  --> packages/provider/src/clients/bedrock/streaming.rs:12:5
   |
12 | use arrayvec::ArrayString;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::regions`
   --> packages/provider/src/clients/bedrock/mod.rs:159:9
    |
159 |     use super::regions;
    |         ^^^^^^^^^^^^^^

warning: unused import: `DeviceInfo`
  --> packages/provider/src/clients/candle/client.rs:20:29
   |
20 | use super::device_manager::{DeviceInfo, DeviceManager};
   |                             ^^^^^^^^^^

warning: unused import: `PoolConfig`
  --> packages/provider/src/clients/candle/client.rs:24:45
   |
24 | use super::memory_pool::{MemoryPoolManager, PoolConfig};
   |                                             ^^^^^^^^^^

warning: unused import: `ModelState`
  --> packages/provider/src/clients/candle/client.rs:25:42
   |
25 | use super::model_repo::{ModelRepository, ModelState};
   |                                          ^^^^^^^^^^

warning: unused import: `TokenStreamer`
  --> packages/provider/src/clients/candle/client.rs:28:77
   |
28 | use super::streaming::{FinishReason, StreamingConfig, StreamingCoordinator, TokenStreamer};
   |                                                                             ^^^^^^^^^^^^^

warning: unused imports: `SpecialTokens` and `TokenizationResult`
  --> packages/provider/src/clients/candle/client.rs:29:41
   |
29 | use super::tokenizer::{CandleTokenizer, SpecialTokens, TextBuffer, TokenizationResult};
   |                                         ^^^^^^^^^^^^^              ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/provider/src/clients/candle/config.rs:7:5
  |
7 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/candle/config.rs:10:5
   |
10 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicU8`
 --> packages/provider/src/clients/candle/device_manager.rs:7:37
  |
7 | use std::sync::atomic::{AtomicBool, AtomicU8, AtomicU64, Ordering};
  |                                     ^^^^^^^^

warning: unused import: `Guard`
  --> packages/provider/src/clients/candle/device_manager.rs:10:25
   |
10 | use arc_swap::{ArcSwap, Guard};
   |                         ^^^^^

warning: unused import: `arrayvec::ArrayVec`
  --> packages/provider/src/clients/candle/device_manager.rs:11:5
   |
11 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ErrorMetrics`
  --> packages/provider/src/clients/candle/device_manager.rs:16:47
   |
16 | use super::error::{CandleError, CandleResult, ErrorMetrics, record_global_error};
   |                                               ^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/clients/candle/kv_cache.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Guard`
  --> packages/provider/src/clients/candle/model_repo.rs:13:25
   |
13 | use arc_swap::{ArcSwap, Guard};
   |                         ^^^^^

warning: unused import: `CandleDevice`
  --> packages/provider/src/clients/candle/model_repo.rs:21:21
   |
21 | use super::models::{CandleDevice, CandleModel};
   |                     ^^^^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/provider/src/clients/candle/models.rs:3:5
  |
3 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: variant `Devstral_22B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:13:5
   |
13 |     Devstral_22B,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `Devstral22b`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `Mistral_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:19:5
   |
19 |     Mistral_7B,
   |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `Mistral7b`

warning: variant `CodeLlama_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:21:5
   |
21 |     CodeLlama_7B,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CodeLlama7b`

warning: variant `Phi3_Mini` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:23:5
   |
23 |     Phi3_Mini,
   |     ^^^^^^^^^ help: convert the identifier to upper camel case: `Phi3Mini`

warning: variant `Gemma_2B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:25:5
   |
25 |     Gemma_2B,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `Gemma2b`

warning: variant `Gemma_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:27:5
   |
27 |     Gemma_7B,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `Gemma7b`

warning: unused import: `arrayvec::ArrayVec`
  --> packages/provider/src/clients/candle/streaming.rs:10:5
   |
10 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/deepseek/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/gemini/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/gemini/client.rs:13:5
   |
13 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/completion_old.rs:36:24
   |
36 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/gemini/completion_old.rs:38:47
   |
38 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `fluent_ai_domain::model::AnyEmbeddingCapable`
 --> packages/provider/src/clients/gemini/embedding.rs:6:5
  |
6 | use fluent_ai_domain::model::AnyEmbeddingCapable;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/gemini/embedding.rs:47:16
   |
47 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `fluent_ai_domain::chunk::CompletionChunk`
 --> packages/provider/src/clients/gemini/model_info.rs:6:5
  |
6 | use fluent_ai_domain::chunk::CompletionChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::AsyncStream`
 --> packages/provider/src/clients/gemini/model_info.rs:8:5
  |
8 | use crate::AsyncStream;
  |     ^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/gemini/transcription.rs:45:16
   |
45 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `FinishReason`
  --> packages/provider/src/clients/gemini/gemini_client.rs:11:48
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                ^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/gemini_client.rs:13:24
   |
13 | use fluent_ai_domain::{AsyncTask, Document, Message, spawn_async};
   |                        ^^^^^^^^^

warning: unused imports: `HttpError` and `HttpRequest`
  --> packages/provider/src/clients/gemini/gemini_client.rs:14:47
   |
14 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/provider/src/clients/gemini/gemini_client.rs:16:35
   |
16 | use tracing::{debug, error, info, warn};
   |                                   ^^^^

warning: unused import: `StreamingResponse`
  --> packages/provider/src/clients/gemini/gemini_client.rs:20:54
   |
20 | use super::gemini_streaming::{GeminiStreamProcessor, StreamingResponse};
   |                                                      ^^^^^^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> packages/provider/src/clients/gemini/gemini_error.rs:6:5
  |
6 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/gemini_streaming.rs:10:24
   |
10 | use fluent_ai_domain::{AsyncTask, chunk::CompletionChunk, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/groq/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/groq/completion.rs:12:47
   |
12 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `serde_json::Value`
 --> packages/provider/src/clients/groq/streaming.rs:8:5
  |
8 | use serde_json::Value;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `StreamingChoice` and `StreamingMessage`
  --> packages/provider/src/clients/groq/streaming.rs:13:43
   |
13 |     clients::openai::{CompletionResponse, StreamingChoice, StreamingMessage},
   |                                           ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/huggingface/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/huggingface/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/huggingface/transcription.rs:55:16
   |
55 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/mistral/completion.rs:388:16
    |
388 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/mistral/completion.rs:431:16
    |
431 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `fluent_ai_domain::tool::ToolDefinition`
   --> packages/provider/src/clients/mistral/completion.rs:540:5
    |
540 | use fluent_ai_domain::tool::ToolDefinition;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AsyncTask`
   --> packages/provider/src/clients/mistral/completion.rs:554:24
    |
554 | use fluent_ai_domain::{AsyncTask, spawn_async};
    |                        ^^^^^^^^^

warning: unused import: `HttpError`
   --> packages/provider/src/clients/mistral/completion.rs:556:47
    |
556 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
    |                                               ^^^^^^^^^

warning: unused import: `fluent_ai_domain::model::AnyEmbeddingCapable`
 --> packages/provider/src/clients/mistral/embedding.rs:1:5
  |
1 | use fluent_ai_domain::model::AnyEmbeddingCapable;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/mistral/embedding.rs:34:16
   |
34 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `fluent_ai_domain::chunk::CompletionChunk`
 --> packages/provider/src/clients/mistral/model_info.rs:8:5
  |
8 | use fluent_ai_domain::chunk::CompletionChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::AsyncStream`
  --> packages/provider/src/clients/mistral/model_info.rs:10:5
   |
10 | use crate::AsyncStream;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `CompletionProvider`
  --> packages/provider/src/clients/mistral/model_info.rs:12:34
   |
12 | use crate::completion_provider::{CompletionProvider, ModelConfig, ModelInfo, ModelPrompt};
   |                                  ^^^^^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/ollama/client.rs:10:5
   |
10 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/ollama/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `CompletionResponse`
  --> packages/provider/src/clients/ollama/streaming.rs:11:25
   |
11 | use super::completion::{CompletionResponse, ProviderMessage};
   |                         ^^^^^^^^^^^^^^^^^^

warning: unused imports: `CompletionClient` and `ProviderClient`
  --> packages/provider/src/clients/openai/mod.rs:42:21
   |
42 | use crate::client::{CompletionClient, ProviderClient};
   |                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `CompletionProvider`
  --> packages/provider/src/clients/openai/mod.rs:43:51
   |
43 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                                   ^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/openai/client.rs:20:29
   |
20 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/openai/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/openai/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/clients/openai/discovery.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `once_cell::sync::Lazy`
 --> packages/provider/src/clients/openai/discovery.rs:7:5
  |
7 | use once_cell::sync::Lazy;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> packages/provider/src/clients/openai/discovery.rs:8:13
  |
8 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `thiserror::Error`
 --> packages/provider/src/clients/openai/discovery.rs:9:5
  |
9 | use thiserror::Error;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `trace`
  --> packages/provider/src/clients/openai/discovery.rs:10:47
   |
10 | use tracing::{debug, error, info, instrument, trace, warn};
   |                                               ^^^^^

warning: unused imports: `error::OpenAIError`, `model_name_from_variant`, `model_supports_audio`, `model_supports_tools`, and `model_supports_vision`
  --> packages/provider/src/clients/openai/discovery.rs:15:5
   |
15 |     error::OpenAIError,
   |     ^^^^^^^^^^^^^^^^^^
16 |     model_info::{
17 |         get_model_config, model_name_from_variant, model_supports_audio, model_supports_tools,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^
18 |         model_supports_vision,
   |         ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Message as DomainMessage` and `ToolFunction`
 --> packages/provider/src/clients/openai/messages.rs:6:21
  |
6 | use crate::domain::{Message as DomainMessage, MessageRole, ToolCall as DomainToolCall, ToolFunction};
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^                                           ^^^^^^^^^^^^

warning: unused import: `crate::AsyncStream`
 --> packages/provider/src/clients/openai/model_info.rs:8:5
  |
8 | use crate::AsyncStream;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `fluent_ai_domain::chunk::CompletionChunk`
 --> packages/provider/src/clients/openai/model_info.rs:9:5
  |
9 | use fluent_ai_domain::chunk::CompletionChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/openrouter/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/openrouter/completion.rs:180:16
    |
180 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/openrouter/completion.rs:211:16
    |
211 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `std::future::Future`
  --> packages/provider/src/clients/openrouter/streaming.rs:14:5
   |
14 | use std::future::Future;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> packages/provider/src/clients/openrouter/streaming.rs:18:17
   |
18 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused imports: `Duration` and `Instant`
  --> packages/provider/src/clients/openrouter/streaming.rs:19:17
   |
19 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `async_stream::stream`
  --> packages/provider/src/clients/openrouter/streaming.rs:23:5
   |
23 | use async_stream::stream;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `fluent_ai_domain::context::chunk::FinishReason`
  --> packages/provider/src/clients/openrouter/streaming.rs:29:5
   |
29 | use fluent_ai_domain::context::chunk::FinishReason;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `SmallVec` and `smallvec`
  --> packages/provider/src/clients/openrouter/streaming.rs:32:16
   |
32 | use smallvec::{SmallVec, smallvec};
   |                ^^^^^^^^  ^^^^^^^^

warning: unused imports: `AsyncStreamSender`, `AsyncStream`, and `async_stream_channel`
  --> packages/provider/src/clients/openrouter/streaming.rs:35:13
   |
35 | use crate::{AsyncStream, AsyncStreamSender, async_stream_channel};
   |             ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/perplexity/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/perplexity/client.rs:12:5
   |
12 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/perplexity/completion.rs:226:16
    |
226 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/perplexity/completion.rs:261:16
    |
261 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/together/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/together/completion.rs:189:16
    |
189 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/together/completion.rs:234:16
    |
234 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/together/embedding.rs:71:16
   |
71 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `crate::clients::openai::send_compatible_streaming_request`
 --> packages/provider/src/clients/together/streaming.rs:5:5
  |
5 | use crate::clients::openai::send_compatible_streaming_request;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/xai/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/xai/completion.rs:103:16
    |
103 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/xai/completion.rs:127:16
    |
127 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
  --> packages/provider/src/image_processing/mod.rs:14:7
   |
14 | #[cfg(feature = "generation")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `generation` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
  --> packages/provider/src/image_processing/mod.rs:18:7
   |
18 | #[cfg(feature = "generation")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `generation` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/mod.rs:308:7
    |
308 | #[cfg(feature = "generation")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `std::sync::Arc`
  --> packages/provider/src/image_processing/candle_backend.rs:10:5
   |
10 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cuda`
   --> packages/provider/src/image_processing/candle_backend.rs:607:15
    |
607 |         #[cfg(feature = "cuda")]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `metal`
   --> packages/provider/src/image_processing/candle_backend.rs:610:15
    |
610 |         #[cfg(feature = "metal")]
    |               ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `metal` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `mkl`
   --> packages/provider/src/image_processing/candle_backend.rs:613:15
    |
613 |         #[cfg(feature = "mkl")]
    |               ^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `mkl` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `accelerate`
   --> packages/provider/src/image_processing/candle_backend.rs:616:15
    |
616 |         #[cfg(feature = "accelerate")]
    |               ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `accelerate` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/candle_backend.rs:621:30
    |
621 |             generation: cfg!(feature = "generation"),
    |                              ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> packages/provider/src/image_processing/candle_backend.rs:623:40
    |
623 |             gpu_acceleration: cfg!(any(feature = "cuda", feature = "metal")),
    |                                        ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `metal`
   --> packages/provider/src/image_processing/candle_backend.rs:623:58
    |
623 |             gpu_acceleration: cfg!(any(feature = "cuda", feature = "metal")),
    |                                                          ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `metal` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
  --> packages/provider/src/image_processing/factory.rs:49:11
   |
49 |     #[cfg(feature = "generation")]
   |           ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
   = help: consider adding `generation` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:111:11
    |
111 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:141:11
    |
141 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> packages/provider/src/image_processing/factory.rs:198:11
    |
198 |     #[cfg(feature = "cuda")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `metal`
   --> packages/provider/src/image_processing/factory.rs:206:11
    |
206 |     #[cfg(feature = "metal")]
    |           ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `metal` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cuda`
   --> packages/provider/src/image_processing/factory.rs:159:15
    |
159 |         #[cfg(feature = "cuda")]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `cuda` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `metal`
   --> packages/provider/src/image_processing/factory.rs:166:15
    |
166 |         #[cfg(feature = "metal")]
    |               ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `metal` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:237:11
    |
237 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:261:11
    |
261 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:276:11
    |
276 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:287:11
    |
287 |     #[cfg(feature = "generation")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:246:19
    |
246 |             #[cfg(feature = "generation")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `generation`
   --> packages/provider/src/image_processing/factory.rs:303:15
    |
303 |         #[cfg(feature = "generation")]
    |               ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate-src`, `bindgen_cuda`, `cpal`, `cudarc`, `default`, `dioxus`, `enterpolation`, `gloo-timers`, `half`, `image`, `intel-mkl-src`, `js-sys`, `palette`, `rubato`, `safetensors`, `symphonia`, `tokenizers`, `ui`, and `wasm-bindgen`
    = help: consider adding `generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `arrayvec::ArrayVec`
   --> packages/provider/src/image_processing/factory.rs:440:5
    |
440 | use arrayvec::ArrayVec;
    |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/discovery.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::future::Future`
 --> packages/provider/src/discovery.rs:4:5
  |
4 | use std::future::Future;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> packages/provider/src/discovery.rs:5:5
  |
5 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused import: `futures_util::future::BoxFuture`
  --> packages/provider/src/discovery.rs:10:5
   |
10 | use futures_util::future::BoxFuture;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug`, `instrument`, `trace`, and `warn`
  --> packages/provider/src/discovery.rs:13:15
   |
13 | use tracing::{debug, error, info, instrument, trace, warn};
   |               ^^^^^               ^^^^^^^^^^  ^^^^^  ^^^^

warning: unused import: `cyrup_sugars::AsyncResult`
  --> packages/provider/src/client_factory.rs:15:5
   |
15 | use cyrup_sugars::AsyncResult;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sleep`
  --> packages/provider/src/security/rotation.rs:17:39
   |
17 | use tokio::time::{Interval, interval, sleep};
   |                                       ^^^^^

warning: unused import: `warn`
  --> packages/provider/src/security/rotation.rs:18:35
   |
18 | use tracing::{debug, error, info, warn};
   |                                   ^^^^

warning: unused import: `RotationConfig`
  --> packages/provider/src/security/rotation.rs:21:63
   |
21 | use super::credentials::{CredentialManager, CredentialSource, RotationConfig};
   |                                                               ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/client.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OneOrMany`
 --> packages/provider/src/client.rs:8:20
  |
8 | use cyrup_sugars::{OneOrMany, ZeroOneOrMany};
  |                    ^^^^^^^^^

warning: unused import: `VoiceChunk`
 --> packages/provider/src/client.rs:9:64
  |
9 | use fluent_ai_domain::chunk::{CompletionChunk, EmbeddingChunk, VoiceChunk};
  |                                                                ^^^^^^^^^^

error[E0107]: missing generics for struct `fluent_ai_domain::Tool`
  --> packages/provider/src/clients/bedrock/completion.rs:53:16
   |
53 |     tools: Vec<Tool>,
   |                ^^^^ expected 1 generic argument
   |
note: struct defined here, with 1 generic parameter: `T`
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/tool/core.rs:73:12
   |
73 | pub struct Tool<T> {
   |            ^^^^ -
help: add missing generic argument
   |
53 |     tools: Vec<Tool<T>>,
   |                    +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:146:24
    |
146 |     available_devices: SmallVec<[DeviceInfo; 8]>,
    |                        ^^^^^^^^ --------------- supplied 1 generic argument
    |                        |
    |                        expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
146 |     available_devices: SmallVec<[DeviceInfo; 8], N>,
    |                                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:154:23
    |
154 |     preference_order: SmallVec<[DeviceType; 4]>,
    |                       ^^^^^^^^ --------------- supplied 1 generic argument
    |                       |
    |                       expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
154 |     preference_order: SmallVec<[DeviceType; 4], N>,
    |                                               +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/error.rs:96:20
    |
96  |         available: SmallVec<[CandleDevice; 4]>,
    |                    ^^^^^^^^ ----------------- supplied 1 generic argument
    |                    |
    |                    expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
96  |         available: SmallVec<[CandleDevice; 4], N>,
    |                                              +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/memory_pool.rs:429:20
    |
429 |     pools: ArcSwap<SmallVec<[Arc<MemoryPool>; MAX_SIZE_CLASSES]>>,
    |                    ^^^^^^^^ ----------------------------------- supplied 1 generic argument
    |                    |
    |                    expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
429 |     pools: ArcSwap<SmallVec<[Arc<MemoryPool>; MAX_SIZE_CLASSES], N>>,
    |                                                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/memory_pool.rs:431:19
    |
431 |     size_classes: SmallVec<[usize; MAX_SIZE_CLASSES]>,
    |                   ^^^^^^^^ ------------------------- supplied 1 generic argument
    |                   |
    |                   expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
431 |     size_classes: SmallVec<[usize; MAX_SIZE_CLASSES], N>,
    |                                                     +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/streaming.rs:80:21
    |
80  |     pub text_bytes: SmallVec<[u8; MAX_TOKEN_TEXT_LEN]>,
    |                     ^^^^^^^^ ------------------------ supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
80  |     pub text_bytes: SmallVec<[u8; MAX_TOKEN_TEXT_LEN], N>,
    |                                                      +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:33:13
    |
33  |     buffer: SmallVec<[u8; 1024]>,
    |             ^^^^^^^^ ---------- supplied 1 generic argument
    |             |
    |             expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
33  |     buffer: SmallVec<[u8; 1024], N>,
    |                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:27:21
    |
27  | pub type TokenIds = SmallVec<[u32; MAX_ENCODE_BATCH]>;
    |                     ^^^^^^^^ ----------------------- supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
27  | pub type TokenIds = SmallVec<[u32; MAX_ENCODE_BATCH], N>;
    |                                                     +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:216:21
    |
216 |     attention_mask: SmallVec<[u8; MAX_ENCODE_BATCH]>,
    |                     ^^^^^^^^ ---------------------- supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
216 |     attention_mask: SmallVec<[u8; MAX_ENCODE_BATCH], N>,
    |                                                    +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:375:19
    |
375 |     partial_utf8: SmallVec<[u8; 4]>,
    |                   ^^^^^^^^ ------- supplied 1 generic argument
    |                   |
    |                   expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
375 |     partial_utf8: SmallVec<[u8; 4], N>,
    |                                   +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/image_processing/factory.rs:569:28
    |
569 |     pub supported_formats: SmallVec<[ImageFormat; 4]>,
    |                            ^^^^^^^^ ---------------- supplied 1 generic argument
    |                            |
    |                            expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
569 |     pub supported_formats: SmallVec<[ImageFormat; 4], N>,
    |                                                     +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/image_processing/factory.rs:619:17
    |
619 |     processors: SmallVec<[Arc<dyn StreamingImageProcessor + Send + Sync>; 8]>,
    |                 ^^^^^^^^ --------------------------------------------------- supplied 1 generic argument
    |                 |
    |                 expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
619 |     processors: SmallVec<[Arc<dyn StreamingImageProcessor + Send + Sync>; 8], N>,
    |                                                                             +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/generation.rs:26:25
    |
26  | pub type LogitsBuffer = SmallVec<[f32; SAMPLING_CACHE_SIZE]>;
    |                         ^^^^^^^^ -------------------------- supplied 1 generic argument
    |                         |
    |                         expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
26  | pub type LogitsBuffer = SmallVec<[f32; SAMPLING_CACHE_SIZE], N>;
    |                                                            +++

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:61:67
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> AsyncStream<CompletionChunk>;
   |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `impl AsyncStream<CompletionChunk>` to return an opaque type, as long as you return a single underlying type
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> impl AsyncStream<CompletionChunk>;
   |                                                                   ++++
help: alternatively, you can return an owned trait object
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> Box<dyn AsyncStream<CompletionChunk>>;
   |                                                                   +++++++                             +

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:73:27
   |
73 |     ) -> AsyncTask<Result<AsyncStream<Self::StreamingResponse>, Self::Error>>;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: you can add the `dyn` keyword if you want a trait object
   |
73 |     ) -> AsyncTask<Result<dyn AsyncStream<Self::StreamingResponse>, Self::Error>>;
   |                           +++

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:94:60
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> AsyncStream<EmbeddingChunk>;
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `impl AsyncStream<EmbeddingChunk>` to return an opaque type, as long as you return a single underlying type
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> impl AsyncStream<EmbeddingChunk>;
   |                                                            ++++
help: alternatively, you can return an owned trait object
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> Box<dyn AsyncStream<EmbeddingChunk>>;
   |                                                            +++++++                            +

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/azure/client.rs:39:45
    |
39  |     pub fn api_key(key: impl AsRef<str>) -> Result<Self, AzureError> {
    |                                             ^^^^^^     ------------ help: remove the unnecessary generic argument
    |                                             |
    |                                             expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/azure/client.rs:120:10
    |
120 | pub type Result<T> = std::result::Result<T, AzureError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/azure/client.rs:59:45
    |
59  |     pub fn token(token: impl AsRef<str>) -> Result<Self, AzureError> {
    |                                             ^^^^^^     ------------ help: remove the unnecessary generic argument
    |                                             |
    |                                             expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/azure/client.rs:120:10
    |
120 | pub type Result<T> = std::result::Result<T, AzureError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/gemini/client.rs:540:32
    |
540 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/gemini/client.rs:95:10
    |
95  | pub type Result<T> = std::result::Result<T, GeminiError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/gemini/client.rs:662:47
    |
662 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/gemini/client.rs:95:10
    |
95  | pub type Result<T> = std::result::Result<T, GeminiError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/gemini/client.rs:662:54
    |
662 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `clients::gemini::client::GeminiCompletionBuilder<'a, clients::gemini::client::NeedsPrompt>`, you could use the fully-qualified path
    |
662 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
662 +     fn prompt(self, prompt: impl ToString) -> Result<<clients::gemini::client::GeminiCompletionBuilder<'a, clients::gemini::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/groq/client.rs:468:54
    |
468 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `clients::groq::client::GroqCompletionBuilder<'a, clients::groq::client::NeedsPrompt>`, you could use the fully-qualified path
    |
468 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
468 +     fn prompt(self, prompt: impl ToString) -> Result<<clients::groq::client::GroqCompletionBuilder<'a, clients::groq::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/ollama/client.rs:392:32
    |
392 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/ollama/client.rs:84:10
    |
84  | pub type Result<T> = std::result::Result<T, OllamaError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/ollama/client.rs:511:47
    |
511 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/ollama/client.rs:84:10
    |
84  | pub type Result<T> = std::result::Result<T, OllamaError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/ollama/client.rs:511:54
    |
511 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `OllamaCompletionBuilder<'a, ollama::client::NeedsPrompt>`, you could use the fully-qualified path
    |
511 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
511 +     fn prompt(self, prompt: impl ToString) -> Result<<OllamaCompletionBuilder<'a, ollama::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/openrouter/client.rs:420:32
    |
420 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/openrouter/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, OpenRouterError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/openrouter/client.rs:536:47
    |
536 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/openrouter/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, OpenRouterError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/openrouter/client.rs:536:54
    |
536 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `OpenRouterCompletionBuilder<'a, openrouter::client::NeedsPrompt>`, you could use the fully-qualified path
    |
536 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
536 +     fn prompt(self, prompt: impl ToString) -> Result<<OpenRouterCompletionBuilder<'a, openrouter::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/perplexity/client.rs:523:54
    |
523 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `PerplexityCompletionBuilder<'a, clients::perplexity::client::NeedsPrompt>`, you could use the fully-qualified path
    |
523 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
523 +     fn prompt(self, prompt: impl ToString) -> Result<<PerplexityCompletionBuilder<'a, clients::perplexity::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/together/client.rs:618:54
    |
618 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `TogetherCompletionBuilder<'a, together::client::NeedsPrompt>`, you could use the fully-qualified path
    |
618 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
618 +     fn prompt(self, prompt: impl ToString) -> Result<<TogetherCompletionBuilder<'a, together::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/xai/client.rs:433:32
    |
433 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/xai/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, XAIError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/xai/client.rs:551:47
    |
551 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/xai/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, XAIError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/xai/client.rs:551:54
    |
551 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `XAICompletionBuilder<'a, clients::xai::client::NeedsPrompt>`, you could use the fully-qualified path
    |
551 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
551 +     fn prompt(self, prompt: impl ToString) -> Result<<XAICompletionBuilder<'a, clients::xai::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/completion.rs:542:36
    |
542 |         let request = HttpRequest::post(&format!("{}/v1/messages", self.base_url), body_bytes)
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant named `SerializationError` found for enum `clients::anthropic::error::AnthropicError`
  --> packages/provider/src/clients/anthropic/requests.rs:87:76
   |
87 |         let body = serde_json::to_vec(request).map_err(|e| AnthropicError::SerializationError {
   |                                                                            ^^^^^^^^^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
   |
  ::: packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ----------------------- variant `SerializationError` not found here

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
  --> packages/provider/src/clients/anthropic/requests.rs:94:17
   |
94 |                 message: format!("Failed to create HTTP request: {}", e),
   |                 ^^^^^^^ field does not exist
   |
  ::: packages/provider/src/clients/anthropic/error.rs:24:5
   |
24 |     NetworkError(String),
   |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
   |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
   |
93 -             AnthropicError::NetworkError {
94 -                 message: format!("Failed to create HTTP request: {}", e),
95 -             }
93 +             AnthropicError::NetworkError(/* std::string::String */)
   |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:105:25
    |
105 |                         message: format!("Failed to add header {}: {}", name, e),
    |                         ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
104 -                     .map_err(|e| AnthropicError::NetworkError {
105 -                         message: format!("Failed to add header {}: {}", name, e),
106 -                     })?;
104 +                     .map_err(|e| AnthropicError::NetworkError(/* std::string::String */))?;
    |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:112:17
    |
112 |                 message: format!("Failed to execute completion request: {}", e),
    |                 ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
111 -             AnthropicError::NetworkError {
112 -                 message: format!("Failed to execute completion request: {}", e),
113 -             }
111 +             AnthropicError::NetworkError(/* std::string::String */)
    |

error[E0599]: no variant named `HttpStatus` found for enum `clients::anthropic::error::AnthropicError`
   --> packages/provider/src/clients/anthropic/requests.rs:118:40
    |
118 |             return Err(AnthropicError::HttpStatus {
    |                                        ^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
    |
   ::: packages/provider/src/clients/anthropic/error.rs:12:1
    |
12  | pub enum AnthropicError {
    | ----------------------- variant `HttpStatus` not found here

error[E0599]: no variant named `SerializationError` found for enum `clients::anthropic::error::AnthropicError`
   --> packages/provider/src/clients/anthropic/requests.rs:140:29
    |
140 |             AnthropicError::SerializationError {
    |                             ^^^^^^^^^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
    |
   ::: packages/provider/src/clients/anthropic/error.rs:12:1
    |
12  | pub enum AnthropicError {
    | ----------------------- variant `SerializationError` not found here

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:148:17
    |
148 |                 message: format!("Failed to create HTTP request: {}", e),
    |                 ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
147 -             AnthropicError::NetworkError {
148 -                 message: format!("Failed to create HTTP request: {}", e),
149 -             }
147 +             AnthropicError::NetworkError(/* std::string::String */)
    |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:159:25
    |
159 |                         message: format!("Failed to add header {}: {}", name, e),
    |                         ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
158 -                     .map_err(|e| AnthropicError::NetworkError {
159 -                         message: format!("Failed to add header {}: {}", name, e),
160 -                     })?;
158 +                     .map_err(|e| AnthropicError::NetworkError(/* std::string::String */))?;
    |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:166:17
    |
166 |                 message: format!("Failed to execute streaming request: {}", e),
    |                 ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
165 -             AnthropicError::NetworkError {
166 -                 message: format!("Failed to execute streaming request: {}", e),
167 -             }
165 +             AnthropicError::NetworkError(/* std::string::String */)
    |

error[E0599]: no variant named `HttpStatus` found for enum `clients::anthropic::error::AnthropicError`
   --> packages/provider/src/clients/anthropic/requests.rs:172:40
    |
172 |             return Err(AnthropicError::HttpStatus {
    |                                        ^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
    |
   ::: packages/provider/src/clients/anthropic/error.rs:12:1
    |
12  | pub enum AnthropicError {
    | ----------------------- variant `HttpStatus` not found here

error[E0308]: mismatched types
   --> packages/provider/src/clients/anthropic/requests.rs:187:20
    |
187 |             model: "claude-3-haiku-20240307".to_string(),
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
help: try removing the method call
    |
187 -             model: "claude-3-haiku-20240307".to_string(),
187 +             model: "claude-3-haiku-20240307",
    |

error[E0560]: struct `clients::anthropic::completion::AnthropicCompletionRequest<'_>` has no field named `top_k`
   --> packages/provider/src/clients/anthropic/requests.rs:196:13
    |
196 |             top_k: None,
    |             ^^^^^ `clients::anthropic::completion::AnthropicCompletionRequest<'_>` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `clients::anthropic::completion::AnthropicCompletionRequest<'_>` has no field named `stop_sequences`
   --> packages/provider/src/clients/anthropic/requests.rs:197:13
    |
197 |             stop_sequences: None,
    |             ^^^^^^^^^^^^^^ `clients::anthropic::completion::AnthropicCompletionRequest<'_>` does not have this field
    |
    = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> packages/provider/src/clients/anthropic/requests.rs:198:21
    |
198 |             stream: None,
    |                     ^^^^ expected `bool`, found `Option<_>`
    |
    = note: expected type `bool`
               found enum `std::option::Option<_>`
help: use `Option::is_some` to test if the `Option` has a value
    |
198 |             stream: None.is_some(),
    |                         ++++++++++

error[E0560]: struct `clients::anthropic::completion::AnthropicCompletionRequest<'_>` has no field named `tool_choice`
   --> packages/provider/src/clients/anthropic/requests.rs:200:13
    |
200 |             tool_choice: None,
    |             ^^^^^^^^^^^ `clients::anthropic::completion::AnthropicCompletionRequest<'_>` does not have this field
    |
    = note: all struct fields are already assigned

error[E0599]: no variant named `SerializationError` found for enum `clients::anthropic::error::AnthropicError`
   --> packages/provider/src/clients/anthropic/requests.rs:205:75
    |
205 |             serde_json::to_vec(&test_request).map_err(|e| AnthropicError::SerializationError {
    |                                                                           ^^^^^^^^^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
    |
   ::: packages/provider/src/clients/anthropic/error.rs:12:1
    |
12  | pub enum AnthropicError {
    | ----------------------- variant `SerializationError` not found here

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:212:17
    |
212 |                 message: format!("Failed to create HTTP request: {}", e),
    |                 ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
211 -             AnthropicError::NetworkError {
212 -                 message: format!("Failed to create HTTP request: {}", e),
213 -             }
211 +             AnthropicError::NetworkError(/* std::string::String */)
    |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:223:25
    |
223 |                         message: format!("Failed to add header {}: {}", name, e),
    |                         ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
222 -                     .map_err(|e| AnthropicError::NetworkError {
223 -                         message: format!("Failed to add header {}: {}", name, e),
224 -                     })?;
222 +                     .map_err(|e| AnthropicError::NetworkError(/* std::string::String */))?;
    |

error[E0559]: variant `clients::anthropic::error::AnthropicError::NetworkError` has no field named `message`
   --> packages/provider/src/clients/anthropic/requests.rs:230:17
    |
230 |                 message: format!("Connection test failed: {}", e),
    |                 ^^^^^^^ field does not exist
    |
   ::: packages/provider/src/clients/anthropic/error.rs:24:5
    |
24  |     NetworkError(String),
    |     ------------ `clients::anthropic::error::AnthropicError::NetworkError` defined here
    |
help: `clients::anthropic::error::AnthropicError::NetworkError` is a tuple variant, use the appropriate syntax
    |
229 -             AnthropicError::NetworkError {
230 -                 message: format!("Connection test failed: {}", e),
231 -             }
229 +             AnthropicError::NetworkError(/* std::string::String */)
    |

error[E0599]: no variant named `HttpStatus` found for enum `clients::anthropic::error::AnthropicError`
   --> packages/provider/src/clients/anthropic/requests.rs:236:40
    |
236 |             return Err(AnthropicError::HttpStatus {
    |                                        ^^^^^^^^^^ variant not found in `clients::anthropic::error::AnthropicError`
    |
   ::: packages/provider/src/clients/anthropic/error.rs:12:1
    |
12  | pub enum AnthropicError {
    | ----------------------- variant `HttpStatus` not found here

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:150:36
    |
150 |         let request = HttpRequest::post("https://api.anthropic.com/v1/files", body)
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `get` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:197:36
    |
197 |         let request = HttpRequest::get("https://api.anthropic.com/v1/files")
    |                                    ^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `get` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:238:36
    |
238 |         let request = HttpRequest::get(&format!("https://api.anthropic.com/v1/files/{}", file_id))
    |                                    ^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `delete` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:279:26
    |
279 |             HttpRequest::delete(&format!("https://api.anthropic.com/v1/files/{}", file_id))
    |                          ^^^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `get` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:310:36
    |
310 |         let request = HttpRequest::get(&format!(
    |                                    ^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/azure/client.rs:228:32
    |
228 |     fn build_headers(&self) -> SmallVec<[(&'static str, ArrayString<300>); 4]> {
    |                                ^^^^^^^^ ------------------------------------- supplied 1 generic argument
    |                                |
    |                                expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
228 |     fn build_headers(&self) -> SmallVec<[(&'static str, ArrayString<300>); 4], N> {
    |                                                                              +++

error[E0599]: no function or associated item named `get` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/azure/client.rs:338:40
    |
338 |         let mut request = HttpRequest::get(&url)?;
    |                                        ^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/azure/completion.rs:124:17
    |
124 |             let t = response.text().await?;
    |                 ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/azure/completion.rs:124:21
    |
124 |             let t = response.text().await?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/azure/completion.rs:124:42
    |
124 |             let t = response.text().await?;
    |                                          ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:87:25
    |
87  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`
...
95  |     Break(B),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/azure/completion.rs:124:21
    |
124 |             let t = response.text().await?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Continue`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:87:25
    |
87  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Continue`
...
91  |     Continue(C),
    |     -------- required by a bound in this variant

error[E0061]: this function takes 4 arguments but 1 argument was supplied
   --> packages/provider/src/clients/azure/completion.rs:159:9
    |
159 |         send_compatible_streaming_request(builder).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------- three arguments of type `&str`, `fluent_ai_domain::HashMap<std::string::String, std::string::String>`, and `serde_json::Value` are missing
    |
note: function defined here
   --> packages/provider/src/clients/openai/streaming.rs:790:14
    |
790 | pub async fn send_compatible_streaming_request(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
791 |     client: &fluent_ai_http3::HttpClient,
792 |     url: &str,
    |     ---------
793 |     headers: std::collections::HashMap<String, String>,
    |     --------------------------------------------------
794 |     body: serde_json::Value,
    |     -----------------------
help: provide the arguments
    |
159 |         send_compatible_streaming_request(builder, /* &str */, /* fluent_ai_domain::HashMap<std::string::String, std::string::String> */, /* serde_json::Value */).await
    |                                                  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0061]: this function takes 4 arguments but 1 argument was supplied
   --> packages/provider/src/clients/azure/streaming.rs:67:31
    |
67  |         let openai_response = send_compatible_streaming_request(builder).await?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------- three arguments of type `&str`, `fluent_ai_domain::HashMap<std::string::String, std::string::String>`, and `serde_json::Value` are missing
    |
note: function defined here
   --> packages/provider/src/clients/openai/streaming.rs:790:14
    |
790 | pub async fn send_compatible_streaming_request(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
791 |     client: &fluent_ai_http3::HttpClient,
792 |     url: &str,
    |     ---------
793 |     headers: std::collections::HashMap<String, String>,
    |     --------------------------------------------------
794 |     body: serde_json::Value,
    |     -----------------------
help: provide the arguments
    |
67  |         let openai_response = send_compatible_streaming_request(builder, /* &str */, /* fluent_ai_domain::HashMap<std::string::String, std::string::String> */, /* serde_json::Value */).await?;
    |                                                                        ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0599]: no method named `into_stream` found for struct `UnboundedReceiverStream` in the current scope
  --> packages/provider/src/clients/azure/streaming.rs:71:29
   |
71 |             openai_response.into_stream().map(|result| {
   |                             ^^^^^^^^^^^
   |
help: there is a method `into_raw` with a similar name
   |
71 -             openai_response.into_stream().map(|result| {
71 +             openai_response.into_raw().map(|result| {
   |

error[E0282]: type annotations needed
  --> packages/provider/src/clients/azure/transcription.rs:87:57
   |
87 |             body = body.text("temperature", temperature.to_string());
   |                                                         ^^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0282]: type annotations needed
  --> packages/provider/src/clients/azure/transcription.rs:92:18
   |
92 |                 .as_object()
   |                  ^^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:302:30
    |
302 |             ("content-type", "application/json"),
    |                              ^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:311:13
    |
307 |         let auth_header = self.signer.sign_request(
    |                                       ------------ arguments to this method are incorrect
...
311 |             &headers,
    |             ^^^^^^^^ expected `&[(&str, &str)]`, found `&[(&str, &String); 3]`
    |
    = note: expected reference `&[(&str, &str)]`
               found reference `&[(&str, &std::string::String); 3]`
note: method defined here
   --> packages/provider/src/clients/bedrock/sigv4.rs:168:12
    |
168 |     pub fn sign_request(
    |            ^^^^^^^^^^^^
...
173 |         headers: &[(&str, &str)],
    |         ------------------------

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:320:45
    |
320 |         http_headers.push(("authorization", auth_header.as_str()));
    |                                             ^^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |
    = note: expected reference `&std::string::String`
               found reference `&str`

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/bedrock/completion.rs:322:41
    |
322 |         let http_request = HttpRequest::post(endpoint.as_str(), request_body)
    |                                         ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `&[u8]` is not a future
   --> packages/provider/src/clients/bedrock/completion.rs:340:14
    |
340 |             .await
    |              ^^^^^ `&[u8]` is not a future
    |
    = help: the trait `futures_util::Future` is not implemented for `&[u8]`
    = note: &[u8] must be a future or must implement `IntoFuture` to be awaited
    = note: required for `&[u8]` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
340 -             .await
    |

error[E0782]: expected a type, found a trait
   --> packages/provider/src/clients/bedrock/completion.rs:456:17
    |
456 |     ) -> Result<AsyncStream<CompletionChunk>> {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
456 |     ) -> Result<dyn AsyncStream<CompletionChunk>> {
    |                 +++

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:466:30
    |
466 |             ("content-type", "application/json"),
    |                              ^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:468:24
    |
468 |             ("accept", "application/vnd.amazon.eventstream"),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |
    = note: expected reference `&std::string::String`
               found reference `&'static str`

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:476:13
    |
472 |         let auth_header = self.signer.sign_request(
    |                                       ------------ arguments to this method are incorrect
...
476 |             &headers,
    |             ^^^^^^^^ expected `&[(&str, &str)]`, found `&[(&str, &String); 4]`
    |
    = note: expected reference `&[(&str, &str)]`
               found reference `&[(&str, &std::string::String); 4]`
note: method defined here
   --> packages/provider/src/clients/bedrock/sigv4.rs:168:12
    |
168 |     pub fn sign_request(
    |            ^^^^^^^^^^^^
...
173 |         headers: &[(&str, &str)],
    |         ------------------------

error[E0308]: mismatched types
   --> packages/provider/src/clients/bedrock/completion.rs:485:45
    |
485 |         http_headers.push(("authorization", auth_header.as_str()));
    |                                             ^^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |
    = note: expected reference `&std::string::String`
               found reference `&str`

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/bedrock/completion.rs:487:41
    |
487 |         let http_request = HttpRequest::post(endpoint.as_str(), request_body)
    |                                         ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0782]: expected a type, found a trait
  --> packages/provider/src/clients/bedrock/streaming.rs:54:43
   |
54 |     pub fn into_chunk_stream(mut self) -> AsyncStream<CompletionChunk> {
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `impl AsyncStream<CompletionChunk>` to return an opaque type, as long as you return a single underlying type
   |
54 |     pub fn into_chunk_stream(mut self) -> impl AsyncStream<CompletionChunk> {
   |                                           ++++
help: alternatively, you can return an owned trait object
   |
54 |     pub fn into_chunk_stream(mut self) -> Box<dyn AsyncStream<CompletionChunk>> {
   |                                           +++++++                             +

error[E0599]: no method named `load_model` found for struct `ModelRepository` in the current scope
   --> packages/provider/src/clients/candle/client.rs:264:54
    |
264 |                 let _loaded_model = model_repository.load_model(self.config.model).await?;
    |                                                      ^^^^^^^^^^
    |
   ::: packages/provider/src/clients/candle/model_repo.rs:152:1
    |
152 | pub struct ModelRepository {
    | -------------------------- method `load_model` not found for this struct
    |
help: there is a method `download_model` with a similar name
    |
264 |                 let _loaded_model = model_repository.download_model(self.config.model).await?;
    |                                                      ++++

error[E0599]: no method named `clone` found for struct `CandleClientState` in the current scope
   --> packages/provider/src/clients/candle/client.rs:300:59
    |
169 | struct CandleClientState {
    | ------------------------ method `clone` not found for this struct
...
300 |                 let mut new_state = (**self.state.load()).clone();
    |                                                           ^^^^^ method not found in `CandleClientState`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0277]: `?` couldn't convert the error to `CandleError`
   --> packages/provider/src/clients/candle/client.rs:257:72
    |
257 |                 let model_repository = ModelRepository::new(&cache_dir)?;
    |                                        --------------------------------^ the trait `From<ModelRepoError>` is not implemented for `CandleError`
    |                                        |
    |                                        this can't be annotated with `?` because it has type `Result<_, ModelRepoError>`
    |
note: `CandleError` needs to implement `From<ModelRepoError>`
   --> packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | ^^^^^^^^^^^^^^^^^^^^
note: alternatively, `ModelRepoError` needs to implement `Into<CandleError>`
   --> packages/provider/src/clients/candle/model_repo.rs:633:1
    |
633 | pub enum ModelRepoError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0277]: `?` couldn't convert the error to `CandleError`
   --> packages/provider/src/clients/candle/client.rs:258:62
    |
258 |                 model_repository.initialize_hf_client().await?;
    |                 ---------------------------------------------^ the trait `From<ModelRepoError>` is not implemented for `CandleError`
    |                 |
    |                 this can't be annotated with `?` because it has type `Result<_, ModelRepoError>`
    |
note: `CandleError` needs to implement `From<ModelRepoError>`
   --> packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | ^^^^^^^^^^^^^^^^^^^^
note: alternatively, `ModelRepoError` needs to implement `Into<CandleError>`
   --> packages/provider/src/clients/candle/model_repo.rs:633:1
    |
633 | pub enum ModelRepoError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

warning: unused variable: `components`
   --> packages/provider/src/clients/candle/client.rs:351:19
    |
351 |         if let Ok(components) = self.initialize_components().await {
    |                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_components`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0599]: no method named `metrics` found for struct `CandleGlobalConfig` in the current scope
   --> packages/provider/src/clients/candle/client.rs:373:61
    |
373 |             global_config_metrics: components.global_config.metrics(),
    |                                                             ^^^^^^^ method not found in `CandleGlobalConfig`
    |
   ::: packages/provider/src/clients/candle/config.rs:18:1
    |
18  | pub struct CandleGlobalConfig {
    | ----------------------------- method `metrics` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `metrics`, perhaps you need to implement it:
            candidate #1: `yyaml::semantic::types::HasMetrics`

error[E0599]: no method named `current_metrics` found for struct `MetricsCollector` in the current scope
   --> packages/provider/src/clients/candle/client.rs:374:60
    |
374 |             realtime_metrics: components.metrics_collector.current_metrics(),
    |                                                            ^^^^^^^^^^^^^^^
    |
   ::: packages/provider/src/clients/candle/config.rs:675:1
    |
675 | pub struct MetricsCollector {
    | --------------------------- method `current_metrics` not found for this struct
    |
help: there is a method `error_metrics` with a similar name
    |
374 -             realtime_metrics: components.metrics_collector.current_metrics(),
374 +             realtime_metrics: components.metrics_collector.error_metrics(),
    |

error[E0599]: no variant or associated item named `inference` found for enum `CandleError` in the current scope
   --> packages/provider/src/clients/candle/client.rs:391:37
    |
391 |             return Err(CandleError::inference(
    |                                     ^^^^^^^^^ variant or associated item not found in `CandleError`
    |
   ::: packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | -------------------- variant or associated item `inference` not found for this enum
    |
note: if you're trying to build a new `CandleError` consider using one of the following associated functions:
      CandleError::config
      CandleError::model
      CandleError::device
      CandleError::tokenizer
      and 6 others
   --> packages/provider/src/clients/candle/error.rs:202:5
    |
202 |     pub fn config(message: &str, parameter: &str, constraint: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn model(model: CandleModel, phase: ModelPhase, details: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn device(device: CandleDevice, capability: &str, available: &[CandleDevice]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
257 |     pub fn tokenizer(input_length: u32, max_length: u32, encoding: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_model_state` found for struct `ModelRepository` in the current scope
   --> packages/provider/src/clients/candle/client.rs:401:14
    |
399 |           let model_state = components
    |  ___________________________-
400 | |             .model_repository
401 | |             .get_model_state(self.config.model)
    | |             -^^^^^^^^^^^^^^^ method not found in `ModelRepository`
    | |_____________|
    |
    |
   ::: packages/provider/src/clients/candle/model_repo.rs:152:1
    |
152 |   pub struct ModelRepository {
    |   -------------------------- method `get_model_state` not found for this struct

error[E0599]: no variant or associated item named `inference` found for enum `CandleError` in the current scope
   --> packages/provider/src/clients/candle/client.rs:404:30
    |
404 |                 CandleError::inference(
    |                              ^^^^^^^^^ variant or associated item not found in `CandleError`
    |
   ::: packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | -------------------- variant or associated item `inference` not found for this enum
    |
note: if you're trying to build a new `CandleError` consider using one of the following associated functions:
      CandleError::config
      CandleError::model
      CandleError::device
      CandleError::tokenizer
      and 6 others
   --> packages/provider/src/clients/candle/error.rs:202:5
    |
202 |     pub fn config(message: &str, parameter: &str, constraint: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn model(model: CandleModel, phase: ModelPhase, details: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn device(device: CandleDevice, capability: &str, available: &[CandleDevice]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
257 |     pub fn tokenizer(input_length: u32, max_length: u32, encoding: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `inference` found for enum `CandleError` in the current scope
   --> packages/provider/src/clients/candle/client.rs:426:37
    |
426 |             return Err(CandleError::inference(
    |                                     ^^^^^^^^^ variant or associated item not found in `CandleError`
    |
   ::: packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | -------------------- variant or associated item `inference` not found for this enum
    |
note: if you're trying to build a new `CandleError` consider using one of the following associated functions:
      CandleError::config
      CandleError::model
      CandleError::device
      CandleError::tokenizer
      and 6 others
   --> packages/provider/src/clients/candle/error.rs:202:5
    |
202 |     pub fn config(message: &str, parameter: &str, constraint: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn model(model: CandleModel, phase: ModelPhase, details: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn device(device: CandleDevice, capability: &str, available: &[CandleDevice]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
257 |     pub fn tokenizer(input_length: u32, max_length: u32, encoding: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `inference` found for enum `CandleError` in the current scope
   --> packages/provider/src/clients/candle/client.rs:444:30
    |
444 |                 CandleError::inference(
    |                              ^^^^^^^^^ variant or associated item not found in `CandleError`
    |
   ::: packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | -------------------- variant or associated item `inference` not found for this enum
    |
note: if you're trying to build a new `CandleError` consider using one of the following associated functions:
      CandleError::config
      CandleError::model
      CandleError::device
      CandleError::tokenizer
      and 6 others
   --> packages/provider/src/clients/candle/error.rs:202:5
    |
202 |     pub fn config(message: &str, parameter: &str, constraint: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn model(model: CandleModel, phase: ModelPhase, details: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn device(device: CandleDevice, capability: &str, available: &[CandleDevice]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
257 |     pub fn tokenizer(input_length: u32, max_length: u32, encoding: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `inference` found for enum `CandleError` in the current scope
   --> packages/provider/src/clients/candle/client.rs:498:30
    |
498 |                 CandleError::inference(
    |                              ^^^^^^^^^ variant or associated item not found in `CandleError`
    |
   ::: packages/provider/src/clients/candle/error.rs:75:1
    |
75  | pub enum CandleError {
    | -------------------- variant or associated item `inference` not found for this enum
    |
note: if you're trying to build a new `CandleError` consider using one of the following associated functions:
      CandleError::config
      CandleError::model
      CandleError::device
      CandleError::tokenizer
      and 6 others
   --> packages/provider/src/clients/candle/error.rs:202:5
    |
202 |     pub fn config(message: &str, parameter: &str, constraint: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn model(model: CandleModel, phase: ModelPhase, details: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn device(device: CandleDevice, capability: &str, available: &[CandleDevice]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
257 |     pub fn tokenizer(input_length: u32, max_length: u32, encoding: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `components`
   --> packages/provider/src/clients/candle/client.rs:597:9
    |
597 |         components: &CandleComponents,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_components`

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:263:38
    |
263 |         let mut discovered_devices = SmallVec::<[DeviceInfo; 8]>::new();
    |                                      ^^^^^^^^   --------------- supplied 1 generic argument
    |                                      |
    |                                      expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
263 |         let mut discovered_devices = SmallVec::<[DeviceInfo; 8], N>::new();
    |                                                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:264:41
    |
264 |         let mut initialization_errors = SmallVec::<[CandleError; 4]>::new();
    |                                         ^^^^^^^^   ---------------- supplied 1 generic argument
    |                                         |
    |                                         expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
264 |         let mut initialization_errors = SmallVec::<[CandleError; 4], N>::new();
    |                                                                    +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:340:59
    |
340 |     async fn discover_cuda_devices(&self) -> CandleResult<SmallVec<[DeviceInfo; 4]>> {
    |                                                           ^^^^^^^^ --------------- supplied 1 generic argument
    |                                                           |
    |                                                           expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
340 |     async fn discover_cuda_devices(&self) -> CandleResult<SmallVec<[DeviceInfo; 4], N>> {
    |                                                                                   +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:395:60
    |
395 |     async fn discover_metal_devices(&self) -> CandleResult<SmallVec<[DeviceInfo; 2]>> {
    |                                                            ^^^^^^^^ --------------- supplied 1 generic argument
    |                                                            |
    |                                                            expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
395 |     async fn discover_metal_devices(&self) -> CandleResult<SmallVec<[DeviceInfo; 2], N>> {
    |                                                                                    +++

error[E0599]: no method named `clone` found for struct `DeviceManagerState` in the current scope
   --> packages/provider/src/clients/candle/device_manager.rs:572:43
    |
144 | struct DeviceManagerState {
    | ------------------------- method `clone` not found for this struct
...
572 |             let mut new_state = (**state).clone();
    |                                           ^^^^^ method not found in `DeviceManagerState`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/model_repo.rs:326:17
    |
326 |     ) -> Result<SmallVec<[ModelFileInfo; 8]>, ModelRepoError> {
    |                 ^^^^^^^^ ------------------ supplied 1 generic argument
    |                 |
    |                 expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
326 |     ) -> Result<SmallVec<[ModelFileInfo; 8], N>, ModelRepoError> {
    |                                            +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/model_repo.rs:366:17
    |
366 |     ) -> Result<SmallVec<[ModelFileInfo; 8]>, ModelRepoError> {
    |                 ^^^^^^^^ ------------------ supplied 1 generic argument
    |                 |
    |                 expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
366 |     ) -> Result<SmallVec<[ModelFileInfo; 8], N>, ModelRepoError> {
    |                                            +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/model_repo.rs:511:17
    |
511 |     ) -> Result<SmallVec<[ArrayString<64>; 16]>, ModelRepoError> {
    |                 ^^^^^^^^ --------------------- supplied 1 generic argument
    |                 |
    |                 expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
511 |     ) -> Result<SmallVec<[ArrayString<64>; 16], N>, ModelRepoError> {
    |                                               +++

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/candle/model_repo.rs:416:17
    |
416 |             for model_file in model_files {
    |                 ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/candle/model_repo.rs:416:13
    |
416 | /             for model_file in model_files {
417 | |                 let file_path = self.download_file(&repo, &model_file, model).await?;
418 | |                 let file_size = tokio::fs::metadata(&file_path)
419 | |                     .await
...   |
431 | |                 });
432 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:591:17
    |
591 | pub enum Option<T> {
    |                 ^ required by this bound in `Option::None`
...
595 |     None,
    |     ---- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/provider/src/clients/candle/model_repo.rs:416:31
    |
416 |             for model_file in model_files {
    |                               ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by an implicit `Sized` bound in `std::option::Option`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:591:17
    |
591 | pub enum Option<T> {
    |                 ^ required by the implicit `Sized` requirement on this type parameter in `Option`

warning: unused variable: `tokenizer_path`
   --> packages/provider/src/clients/candle/tokenizer.rs:455:40
    |
455 |     pub async fn load_from_file(&self, tokenizer_path: &PathBuf) -> CandleResult<()> {
    |                                        ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tokenizer_path`

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/deepseek/completion.rs:390:36
    |
390 |         let request = HttpRequest::post(&format!("{}/chat/completions", self.base_url), body_bytes)
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/gemini/client.rs:171:26
    |
171 |         let mut headers: SmallVec<[(&str, ArrayString<180>); 4]> = smallvec![];
    |                          ^^^^^^^^ ----------------------------- supplied 1 generic argument
    |                          |
    |                          expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
171 |         let mut headers: SmallVec<[(&str, ArrayString<180>); 4], N> = smallvec![];
    |                                                                +++

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/gemini/client.rs:181:36
    |
181 |         let request = HttpRequest::post(&url, body)?
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/gemini/client.rs:214:26
    |
214 |         let mut headers: SmallVec<[(&str, ArrayString<180>); 4]> = smallvec![];
    |                          ^^^^^^^^ ----------------------------- supplied 1 generic argument
    |                          |
    |                          expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
214 |         let mut headers: SmallVec<[(&str, ArrayString<180>); 4], N> = smallvec![];
    |                                                                +++

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/gemini/client.rs:225:36
    |
225 |         let request = HttpRequest::post(&url, body)?
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `get` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/gemini/client.rs:252:36
    |
252 |         let request = HttpRequest::get(&url)?
    |                                    ^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ParseError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:444:71
    |
444 |             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
    |                                                                       ^^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:454:36
    |
454 |         let request = HttpRequest::post(&url, body_bytes)
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `HttpError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:455:71
    |
455 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?
    |                                                                       ^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `HttpError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:462:71
    |
462 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                                       ^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `AuthError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:466:69
    |
466 |                 401 => crate::completion_provider::CompletionError::AuthError,
    |                                                                     ^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `RequestTooLarge` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:467:69
    |
467 |                 413 => crate::completion_provider::CompletionError::RequestTooLarge,
    |                                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `RateLimited` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:468:69
    |
468 |                 429 => crate::completion_provider::CompletionError::RateLimited,
    |                                                                     ^^^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `HttpError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:469:67
    |
469 |                 _ => crate::completion_provider::CompletionError::HttpError,
    |                                                                   ^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0599]: no variant or associated item named `StreamError` found for enum `CompletionCoreError` in the current scope
   --> packages/provider/src/clients/gemini/completion_old.rs:500:74
    |
500 | ...                   crate::completion_provider::CompletionError::StreamError,
    |                                                                    ^^^^^^^^^^^ variant or associated item not found in `CompletionCoreError`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/bedrock/client.rs:230:44
    |
230 |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
    |                                            ^^^^^^   ------------------------------------------ help: remove the unnecessary generic argument
    |                                            |
    |                                            expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/bedrock/error.rs:20:10
    |
20  | pub type Result<T> = std::result::Result<T, BedrockError>;
    |          ^^^^^^ -

error[E0053]: method `test_connection` has an incompatible type for trait
   --> packages/provider/src/clients/bedrock/client.rs:230:34
    |
230 |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error + Send + Sync>`, found `BedrockError`
    |
note: type in trait
   --> packages/provider/src/client.rs:39:34
    |
39  |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>>;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&BedrockClient) -> tokio::task::JoinHandle<std::result::Result<_, Box<(dyn StdError + std::marker::Send + Sync + 'static)>>>`
               found signature `fn(&BedrockClient) -> tokio::task::JoinHandle<std::result::Result<_, BedrockError>>`
help: change the output type to match the trait
    |
230 -     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
230 +     fn test_connection(&self) -> tokio::task::JoinHandle<std::result::Result<(), Box<(dyn StdError + std::marker::Send + Sync + 'static)>>> {
    |

error[E0049]: method `prompt` has 0 type parameters but its trait declaration has 1 type parameter
   --> packages/provider/src/clients/bedrock/completion.rs:389:14
    |
389 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> AsyncStream<CompletionChunk> {
    |              ^ found 0 type parameters
    |
   ::: packages/provider/src/completion_provider.rs:133:27
    |
133 |     fn prompt(self, text: impl AsRef<str>) -> AsyncStream<CompletionChunk>;
    |                           ---------------
    |                           |
    |                           expected 1 type parameter
    |                           `impl Trait` introduces an implicit type parameter

error[E0046]: not all trait items implemented, missing: `new`, `api_key`, `system_prompt`, `temperature`, `max_tokens`, `top_p`, `frequency_penalty`, `presence_penalty`, `chat_history`, `documents`, `tools`, `additional_params`, `on_chunk`
   --> packages/provider/src/clients/bedrock/completion.rs:384:1
    |
384 |   impl CompletionProvider for BedrockCompletionBuilder {
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `new`, `api_key`, `system_prompt`, `temperature`, `max_tokens`, `top_p`, `frequency_penalty`, `presence_penalty`, `chat_history`, `documents`, `tools`, `additional_params`, `on_chunk` in implementation
    |
   ::: packages/provider/src/completion_provider.rs:76:5
    |
76  |       fn new(api_key: String, model_name: &'static str) -> Result<Self, CompletionError>;
    |       ----------------------------------------------------------------------------------- `new` from trait
...
79  |       fn api_key(self, key: impl Into<String>) -> Self;
    |       ------------------------------------------------- `api_key` from trait
...
90  |       fn system_prompt(self, prompt: impl Into<String>) -> Self;
    |       ---------------------------------------------------------- `system_prompt` from trait
...
93  |       fn temperature(self, temp: f64) -> Self;
    |       ---------------------------------------- `temperature` from trait
...
96  |       fn max_tokens(self, tokens: u32) -> Self;
    |       ----------------------------------------- `max_tokens` from trait
...
99  |       fn top_p(self, p: f64) -> Self;
    |       ------------------------------- `top_p` from trait
...
102 |       fn frequency_penalty(self, penalty: f64) -> Self;
    |       ------------------------------------------------- `frequency_penalty` from trait
...
105 |       fn presence_penalty(self, penalty: f64) -> Self;
    |       ------------------------------------------------ `presence_penalty` from trait
...
108 |       fn chat_history(self, history: ZeroOneOrMany<Message>) -> Result<Self, CompletionError>;
    |       ---------------------------------------------------------------------------------------- `chat_history` from trait
...
111 |       fn documents(self, docs: ZeroOneOrMany<Document>) -> Result<Self, CompletionError>;
    |       ----------------------------------------------------------------------------------- `documents` from trait
...
114 |       fn tools(self, tools: ZeroOneOrMany<ToolDefinition>) -> Result<Self, CompletionError>;
    |       -------------------------------------------------------------------------------------- `tools` from trait
...
117 |       fn additional_params(self, params: Value) -> Self;
    |       -------------------------------------------------- `additional_params` from trait
...
127 | /     fn on_chunk<F>(self, handler: F) -> Self
128 | |     where
129 | |         F: Fn(Result<CompletionChunk, CompletionError>) + Send + Sync + 'static;
    | |________________________________________________________________________________- `on_chunk` from trait

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> packages/provider/src/clients/candle/client.rs:719:17
    |
719 |         prompt: Prompt<'a>,
    |                 ^^^^^^---- help: remove the unnecessary generics
    |                 |
    |                 expected 0 lifetime arguments
    |
note: struct defined here, with 0 lifetime parameters
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/prompt.rs:6:12
    |
6   | pub struct Prompt {
    |            ^^^^^^

error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> packages/provider/src/clients/candle/client.rs:721:22
    |
721 |     ) -> AsyncStream<CompletionChunk<'a>> {
    |                      ^^^^^^^^^^^^^^^---- help: remove the unnecessary generics
    |                      |
    |                      expected 0 lifetime arguments
    |
note: enum defined here, with 0 lifetime parameters
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:10
    |
121 | pub enum CompletionChunk {
    |          ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1007:25
     |
1007 | impl ProviderClient for CandleCompletionClient {
     |                         ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `client::ProviderClient`
    --> packages/provider/src/client.rs:34:41
     |
34   | pub trait ProviderClient: Send + Sync + Clone {
     |                                         ^^^^^ required by this bound in `ProviderClient`

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1039:5
     |
1039 |     fn completion_model(&self, model: &str) -> Self::Model {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `client::CompletionClient`
    --> packages/provider/src/client.rs:13:43
     |
13   | pub trait CompletionClient: Send + Sync + Clone {
     |                                           ^^^^^ required by this bound in `CompletionClient`

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1036:27
     |
1036 | impl CompletionClient for CandleCompletionClient {
     |                           ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `client::CompletionClient`
    --> packages/provider/src/client.rs:13:43
     |
13   | pub trait CompletionClient: Send + Sync + Clone {
     |                                           ^^^^^ required by this bound in `CompletionClient`

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
    --> packages/provider/src/clients/candle/client.rs:1098:17
     |
1098 |         prompt: Prompt<'a>,
     |                 ^^^^^^---- help: remove the unnecessary generics
     |                 |
     |                 expected 0 lifetime arguments
     |
note: struct defined here, with 0 lifetime parameters
    --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/prompt.rs:6:12
     |
6    | pub struct Prompt {
     |            ^^^^^^

error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied
    --> packages/provider/src/clients/candle/client.rs:1100:22
     |
1100 |     ) -> AsyncStream<CompletionChunk<'a>> {
     |                      ^^^^^^^^^^^^^^^---- help: remove the unnecessary generics
     |                      |
     |                      expected 0 lifetime arguments
     |
note: enum defined here, with 0 lifetime parameters
    --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:10
     |
121  | pub enum CompletionChunk {
     |          ^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared type `TranscriptionModel`
   --> packages/provider/src/clients/azure/client.rs:634:9
    |
634 |         TranscriptionModel::new(self.clone(), model)
    |         ^^^^^^^^^^^^^^^^^^
    |         |
    |         use of undeclared type `TranscriptionModel`
    |         help: a trait with a similar name exists: `TranscriptionClient`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rayon`
   --> packages/provider/src/clients/candle/performance.rs:104:27
    |
104 |         let num_threads = rayon::current_num_threads();
    |                           ^^^^^ use of unresolved module or unlinked crate `rayon`
    |
    = help: if you wanted to use a crate named `rayon`, use `cargo add rayon` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:413:26
    |
413 |         let (tx, task) = runtime::channel();
    |                          ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:418:17
    |
418 |                 runtime::spawn_async(async move {
    |                 ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:442:26
    |
442 |         let (tx, task) = runtime::channel();
    |                          ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:447:17
    |
447 |                 runtime::spawn_async(async move {
    |                 ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/client_factory.rs:40:17
   |
40 |         source: reqwest::Error,
   |                 ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hostname`
   --> packages/provider/src/security/audit.rs:410:13
    |
410 |             hostname::get()
    |             ^^^^^^^^ use of unresolved module or unlinked crate `hostname`
    |
    = help: if you wanted to use a crate named `hostname`, use `cargo add hostname` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `bincode`
   --> packages/provider/src/security/encryption.rs:212:13
    |
212 |             bincode::serialize(&encrypted_data).map_err(|e| SecurityError::EncryptionError {
    |             ^^^^^^^ use of unresolved module or unlinked crate `bincode`
    |
    = help: if you wanted to use a crate named `bincode`, use `cargo add bincode` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `bincode`
   --> packages/provider/src/security/encryption.rs:233:13
    |
233 |             bincode::deserialize(&serialized).map_err(|e| SecurityError::EncryptionError {
    |             ^^^^^^^ use of unresolved module or unlinked crate `bincode`
    |
    = help: if you wanted to use a crate named `bincode`, use `cargo add bincode` to add it to your `Cargo.toml`

Some errors have detailed explanations: E0046, E0049, E0053, E0061, E0106, E0107, E0223, E0277, E0282...
For more information about an error, try `rustc --explain E0046`.
warning: `fluent_ai_provider` (lib) generated 163 warnings
warning: fluent_ai_provider@0.1.0: Starting provider generation...
warning: fluent_ai_provider@0.1.0: Generated providers.rs and models.rs with 6 providers
warning: fluent_ai_provider@0.1.0: Provider generation completed successfully
error: could not compile `fluent_ai_provider` (lib) due to 658 previous errors; 163 warnings emitted
