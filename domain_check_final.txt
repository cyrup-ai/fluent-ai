    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Checking fluent_ai_memory v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/memory)
    Checking fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
warning: struct `MemoryStub` is never constructed
  --> packages/domain/src/memory/manager.rs:43:12
   |
43 | pub struct MemoryStub {
   |            ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated items `new` and `into_memory` are never used
  --> packages/domain/src/memory/manager.rs:56:12
   |
47 | impl MemoryStub {
   | --------------- associated items in this implementation
...
56 |     pub fn new() -> Self {
   |            ^^^
...
81 |     pub async fn into_memory(self) -> Result<Memory, MemoryError> {
   |                  ^^^^^^^^^^^

warning: constant `MAX_MEMORY_RESULTS` is never used
  --> packages/domain/src/memory/manager.rs:87:7
   |
87 | const MAX_MEMORY_RESULTS: usize = 1000;
   |       ^^^^^^^^^^^^^^^^^^

warning: constant `MAX_SEARCH_RESULTS` is never used
  --> packages/domain/src/memory/manager.rs:90:7
   |
90 | const MAX_SEARCH_RESULTS: usize = 100;
   |       ^^^^^^^^^^^^^^^^^^

warning: static `MEMORY_NODE_POOL` is never used
  --> packages/domain/src/memory/manager.rs:93:8
   |
93 | static MEMORY_NODE_POOL: Lazy<SegQueue<Box<MemoryNode>>> = Lazy::new(|| SegQueue::new());
   |        ^^^^^^^^^^^^^^^^

warning: static `POOL_STATS` is never used
  --> packages/domain/src/memory/manager.rs:96:8
   |
96 | static POOL_STATS: Lazy<CachePadded<AtomicUsize>> =
   |        ^^^^^^^^^^

warning: static `TIMESTAMP_CACHE` is never used
   --> packages/domain/src/memory/manager.rs:100:8
    |
100 | static TIMESTAMP_CACHE: Lazy<CachePadded<AtomicU64>> =
    |        ^^^^^^^^^^^^^^^

warning: static `TIMESTAMP_CACHE_LAST_UPDATE` is never used
   --> packages/domain/src/memory/manager.rs:104:8
    |
104 | static TIMESTAMP_CACHE_LAST_UPDATE: Lazy<CachePadded<AtomicU64>> =
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `TIMESTAMP_CACHE_REFRESH_INTERVAL_MICROS` is never used
   --> packages/domain/src/memory/manager.rs:108:7
    |
108 | const TIMESTAMP_CACHE_REFRESH_INTERVAL_MICROS: u64 = 1000;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_memory_node_pool` is never used
   --> packages/domain/src/memory/manager.rs:118:8
    |
118 | pub fn initialize_memory_node_pool(initial_size: usize, embedding_dim: usize) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_pooled_memory_node` is never used
   --> packages/domain/src/memory/manager.rs:149:8
    |
149 | pub fn get_pooled_memory_node() -> Box<MemoryNode> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `return_pooled_memory_node` is never used
   --> packages/domain/src/memory/manager.rs:169:8
    |
169 | pub fn return_pooled_memory_node(mut node: Box<MemoryNode>) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_timestamp_cache` is never used
   --> packages/domain/src/memory/manager.rs:182:8
    |
182 | pub fn initialize_timestamp_cache() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_cached_timestamp` is never used
   --> packages/domain/src/memory/manager.rs:200:8
    |
200 | pub fn get_cached_timestamp() -> u64 {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: function `get_timestamp_cache_stats` is never used
   --> packages/domain/src/memory/manager.rs:226:8
    |
226 | pub fn get_timestamp_cache_stats() -> (u64, u64, u64) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `is_timestamp_cache_fresh` is never used
   --> packages/domain/src/memory/manager.rs:245:8
    |
245 | pub fn is_timestamp_cache_fresh() -> bool {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_STACK_EMBEDDING_SIZE` is never used
  --> packages/domain/src/memory/ops.rs:42:11
   |
42 | pub const MAX_STACK_EMBEDDING_SIZE: usize = 512;
   |           ^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `VECTOR_POOL_SIZE` is never used
  --> packages/domain/src/memory/ops.rs:45:11
   |
45 | pub const VECTOR_POOL_SIZE: usize = 1024;
   |           ^^^^^^^^^^^^^^^^

warning: static `SIMD_OPERATIONS_COUNT` is never used
  --> packages/domain/src/memory/ops.rs:48:8
   |
48 | static SIMD_OPERATIONS_COUNT: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^^^^^^^^^^^^

warning: static `CACHE_HITS` is never used
  --> packages/domain/src/memory/ops.rs:49:8
   |
49 | static CACHE_HITS: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^

warning: static `CACHE_MISSES` is never used
  --> packages/domain/src/memory/ops.rs:50:8
   |
50 | static CACHE_MISSES: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^^^

warning: constant `MAX_MEMORY_TOOL_RESULTS` is never used
  --> packages/domain/src/memory/tool.rs:25:7
   |
25 | const MAX_MEMORY_TOOL_RESULTS: usize = 1000;
   |       ^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_STREAMING_RESULTS` is never used
  --> packages/domain/src/memory/tool.rs:28:7
   |
28 | const MAX_STREAMING_RESULTS: usize = 100;
   |       ^^^^^^^^^^^^^^^^^^^^^

warning: static `TOOL_STATS` is never used
  --> packages/domain/src/memory/tool.rs:31:8
   |
31 | static TOOL_STATS: Lazy<CachePadded<AtomicUsize>> =
   |        ^^^^^^^^^^

warning: static `RESULT_QUEUE` is never used
  --> packages/domain/src/memory/tool.rs:35:8
   |
35 | static RESULT_QUEUE: Lazy<SegQueue<MemoryNode>> = Lazy::new(|| SegQueue::new());
   |        ^^^^^^^^^^^^

warning: field `data` is never read
  --> packages/domain/src/memory/tool.rs:41:5
   |
39 | pub struct MemoryTool {
   |            ---------- field in this struct
40 |     /// Tool metadata
41 |     data: McpToolData,
   |     ^^^^
   |
   = note: `MemoryTool` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: static `CACHED_TIMESTAMP` is never used
 --> packages/domain/src/memory/cache.rs:5:8
  |
5 | static CACHED_TIMESTAMP: AtomicU64 = AtomicU64::new(0);
  |        ^^^^^^^^^^^^^^^^

warning: function `get_cached_timestamp` is never used
  --> packages/domain/src/memory/cache.rs:10:8
   |
10 | pub fn get_cached_timestamp() -> u64 {
   |        ^^^^^^^^^^^^^^^^^^^^

warning: function `update_cached_timestamp` is never used
  --> packages/domain/src/memory/cache.rs:23:4
   |
23 | fn update_cached_timestamp() {
   |    ^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_cached_system_time` is never used
  --> packages/domain/src/memory/cache.rs:34:8
   |
34 | pub fn get_cached_system_time() -> SystemTime {
   |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_timestamp_cache` is never used
  --> packages/domain/src/memory/cache.rs:40:8
   |
40 | pub fn initialize_timestamp_cache() {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `MemoryNodePool` is never constructed
 --> packages/domain/src/memory/pool.rs:7:12
  |
7 | pub struct MemoryNodePool {
  |            ^^^^^^^^^^^^^^

warning: associated items `new`, `acquire`, `release`, and `stats` are never used
  --> packages/domain/src/memory/pool.rs:16:12
   |
13 | impl MemoryNodePool {
   | ------------------- associated items in this implementation
...
16 |     pub fn new(capacity: usize, embedding_dimension: usize) -> Self {
   |            ^^^
...
44 |     pub fn acquire(&self) -> PooledMemoryNode<'_> {
   |            ^^^^^^^
...
69 |     fn release(&self, mut node: MemoryNode) {
   |        ^^^^^^^
...
90 |     pub fn stats(&self) -> (usize, usize) {
   |            ^^^^^

warning: struct `PooledMemoryNode` is never constructed
  --> packages/domain/src/memory/pool.rs:96:12
   |
96 | pub struct PooledMemoryNode<'a> {
   |            ^^^^^^^^^^^^^^^^

warning: methods `initialize`, `set_embedding`, `as_ref`, `as_mut`, and `take` are never used
   --> packages/domain/src/memory/pool.rs:105:12
    |
102 | impl<'a> PooledMemoryNode<'a> {
    | ----------------------------- methods in this implementation
...
105 |     pub fn initialize(
    |            ^^^^^^^^^^
...
124 |     pub fn set_embedding(&mut self, embedding: Vec<f32>) {
    |            ^^^^^^^^^^^^^
...
132 |     pub fn as_ref(&self) -> Option<&MemoryNode> {
    |            ^^^^^^
...
138 |     pub fn as_mut(&mut self) -> Option<&mut MemoryNode> {
    |            ^^^^^^
...
148 |     pub fn take(mut self) -> Option<MemoryNode> {
    |            ^^^^

warning: static `MEMORY_NODE_POOL` is never used
   --> packages/domain/src/memory/pool.rs:213:8
    |
213 | static MEMORY_NODE_POOL: std::sync::OnceLock<MemoryNodePool> = std::sync::OnceLock::new();
    |        ^^^^^^^^^^^^^^^^

warning: function `initialize_memory_node_pool` is never used
   --> packages/domain/src/memory/pool.rs:217:8
    |
217 | pub fn initialize_memory_node_pool(capacity: usize, embedding_dimension: usize) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `acquire_pooled_node` is never used
   --> packages/domain/src/memory/pool.rs:223:8
    |
223 | pub fn acquire_pooled_node() -> Option<PooledMemoryNode<'static>> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: function `memory_node_pool_stats` is never used
   --> packages/domain/src/memory/pool.rs:230:8
    |
230 | pub fn memory_node_pool_stats() -> Option<(usize, usize)> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `content_hash` is never used
 --> packages/domain/src/memory/serialization.rs:6:8
  |
6 | pub fn content_hash(content: &str) -> u64 {
  |        ^^^^^^^^^^^^

warning: struct `MemoryRecord` is never constructed
  --> packages/domain/src/memory/serialization.rs:14:12
   |
14 | pub struct MemoryRecord {
   |            ^^^^^^^^^^^^

warning: associated items `new`, `serialize_to_buffer`, `deserialize_from_buffer`, and `to_content_string` are never used
  --> packages/domain/src/memory/serialization.rs:25:12
   |
22 | impl MemoryRecord {
   | ----------------- associated items in this implementation
...
25 |     pub fn new(input: &str, output: &str, timestamp: u64) -> Self {
   |            ^^^
...
37 |     pub fn serialize_to_buffer(&self, buffer: &mut SerializationBuffer) {
   |            ^^^^^^^^^^^^^^^^^^^
...
48 |     pub fn deserialize_from_buffer(buffer: &SerializationBuffer) -> Option<Self> {
   |            ^^^^^^^^^^^^^^^^^^^^^^^
...
76 |     pub fn to_content_string(&self) -> String {
   |            ^^^^^^^^^^^^^^^^^

warning: struct `SerializationBuffer` is never constructed
  --> packages/domain/src/memory/serialization.rs:90:12
   |
90 | pub struct SerializationBuffer {
   |            ^^^^^^^^^^^^^^^^^^^

warning: multiple associated items are never used
   --> packages/domain/src/memory/serialization.rs:98:12
    |
95  | impl SerializationBuffer {
    | ------------------------ associated items in this implementation
...
98  |     pub fn new(capacity: usize) -> Self {
    |            ^^^
...
107 |     pub fn clear(&mut self) {
    |            ^^^^^
...
113 |     pub fn write_u64(&mut self, value: u64) {
    |            ^^^^^^^^^
...
119 |     pub fn write_u32(&mut self, value: u32) {
    |            ^^^^^^^^^
...
125 |     pub fn as_slice(&self) -> &[u8] {
    |            ^^^^^^^^
...
131 |     pub fn len(&self) -> usize {
    |            ^^^
...
137 |     pub fn is_empty(&self) -> bool {
    |            ^^^^^^^^
...
143 |     pub fn reserve(&mut self, additional: usize) {
    |            ^^^^^^^

warning: function `with_serialization_buffer` is never used
   --> packages/domain/src/memory/serialization.rs:166:8
    |
166 | pub fn with_serialization_buffer<F, R>(f: F) -> R
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: trait `OpTrait` is never used
 --> packages/domain/src/memory/workflow.rs:7:11
  |
7 | pub trait OpTrait {
  |           ^^^^^^^

warning: struct `MemoryWorkflowOp` is never constructed
  --> packages/domain/src/memory/workflow.rs:17:12
   |
17 | pub struct MemoryWorkflowOp<M, P> {
   |            ^^^^^^^^^^^^^^^^

warning: trait `Prompt` is never used
  --> packages/domain/src/memory/workflow.rs:38:11
   |
38 | pub trait Prompt: Clone {
   |           ^^^^^^

warning: variant `Error` is never constructed
  --> packages/domain/src/memory/workflow.rs:48:5
   |
46 | pub enum PromptError {
   |          ----------- variant in this enum
47 |     #[error("Prompt error: {0}")]
48 |     Error(String),
   |     ^^^^^
   |
   = note: `PromptError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `Other` is never constructed
  --> packages/domain/src/memory/workflow.rs:61:5
   |
53 | pub enum WorkflowError {
   |          ------------- variant in this enum
...
61 |     Other(String),
   |     ^^^^^
   |
   = note: `WorkflowError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: struct `MemoryEnhancedWorkflow` is never constructed
  --> packages/domain/src/memory/workflow.rs:65:12
   |
65 | pub struct MemoryEnhancedWorkflow<M, P> {
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `with_context_limit`, and `build` are never used
  --> packages/domain/src/memory/workflow.rs:76:12
   |
71 | / impl<M, P> MemoryEnhancedWorkflow<M, P>
72 | | where
73 | |     M: MemoryManager + Clone,
74 | |     P: Prompt + Send + Sync,
   | |____________________________- associated items in this implementation
75 |   {
76 |       pub fn new(memory_manager: M, prompt_model: P) -> Self {
   |              ^^^
...
84 |       pub fn with_context_limit(mut self, limit: usize) -> Self {
   |              ^^^^^^^^^^^^^^^^^^
...
90 |       pub fn build(self) -> impl OpTrait<Input = String, Output = Result<String, WorkflowError>> {
   |              ^^^^^

warning: type alias `BoxFuture` is never used
  --> packages/domain/src/memory/types_legacy.rs:11:10
   |
11 | pub type BoxFuture<T> = Pin<Box<dyn Future<Output = T> + Send>>;
   |          ^^^^^^^^^

warning: field `pattern_cache` is never read
   --> packages/domain/src/model/resolver.rs:183:5
    |
176 | pub struct ModelResolver {
    |            ------------- field in this struct
...
183 |     pattern_cache: DashMap<String, (String, Regex), RandomState>,
    |     ^^^^^^^^^^^^^

warning: field `cylo_instance` is never read
  --> packages/domain/src/tool/core.rs:82:5
   |
73 | pub struct Tool<T> {
   |            ---- field in this struct
...
82 |     cylo_instance: Option<()>,
   |     ^^^^^^^^^^^^^

warning: field `cylo_instance` is never read
   --> packages/domain/src/tool/core.rs:174:5
    |
163 | pub struct NamedTool {
    |            --------- field in this struct
...
174 |     cylo_instance: Option<()>,
    |     ^^^^^^^^^^^^^
    |
    = note: `NamedTool` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: `fluent_ai_domain` (lib) generated 56 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 17.22s
