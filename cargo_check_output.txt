    Blocking waiting for file lock on build directory
warning: unused variable: `tx`
   --> packages/fluent-ai-async/src/stream.rs:108:14
    |
108 |         let (tx, stream) = Self::channel();
    |              ^^ help: if this is intentional, prefix it with an underscore: `_tx`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `fluent-ai-async` (lib) generated 1 warning
   Compiling fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
warning: `fluent-ai-async` (lib) generated 1 warning (1 duplicate)
    Checking surrealdb-core v2.3.7
error[E0432]: unresolved import `futures`
 --> packages/domain/src/agent/chat.rs:9:5
  |
9 | use futures::StreamExt;
  |     ^^^^^^^ use of unresolved module or unlinked crate `futures`
  |
  = help: if you wanted to use a crate named `futures`, use `cargo add futures` to add it to your `Cargo.toml`

warning: unused import: `crate::memory::manager::MemoryConfig as StubMemoryConfig`
  --> packages/domain/src/agent/builder.rs:12:5
   |
12 | use crate::memory::manager::MemoryConfig as StubMemoryConfig;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::memory::manager::MemoryConfig as StubMemoryConfig`
  --> packages/domain/src/agent/core.rs:11:5
   |
11 | use crate::memory::manager::MemoryConfig as StubMemoryConfig;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AsyncStream`
 --> packages/domain/src/context/extraction/extractor.rs:4:23
  |
4 | use fluent_ai_async::{AsyncStream, AsyncTask};
  |                       ^^^^^^^^^^^

error[E0119]: conflicting implementations of trait `Clone` for type `Memory`
   --> packages/domain/src/memory/manager.rs:379:1
    |
335 | impl Clone for Memory {
    | --------------------- first implementation here
...
379 | impl Clone for Memory {
    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Memory`

error[E0599]: `fluent_ai_async::AsyncStream<Memory>` is not an iterator
   --> packages/domain/src/agent/builder.rs:136:33
    |
136 |             match memory_stream.collect().await {
    |                                 ^^^^^^^ `fluent_ai_async::AsyncStream<Memory>` is not an iterator
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/stream.rs:20:1
    |
20  | pub struct AsyncStream<T, const CAP: usize = 1024> {
    | -------------------------------------------------- doesn't satisfy `fluent_ai_async::AsyncStream<Memory>: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `fluent_ai_async::AsyncStream<Memory>: Iterator`
            which is required by `&mut fluent_ai_async::AsyncStream<Memory>: Iterator`
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `collect` are implemented but not in scope; perhaps you want to import one of them
    |
3   + use cyrup_sugars::StreamExt;
    |
3   + use futures_util::StreamExt;
    |
3   + use http_body_util::BodyExt;
    |
3   + use rayon::iter::ParallelIterator;
    |
      and 3 other candidates

error[E0599]: `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
   --> packages/domain/src/agent/chat.rs:218:41
    |
218 |         let store_result = store_stream.collect().await;
    |                                         ^^^^^^^ `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/stream.rs:20:1
    |
20  | pub struct AsyncStream<T, const CAP: usize = 1024> {
    | -------------------------------------------------- doesn't satisfy `_: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
            which is required by `&mut fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `collect` are implemented but not in scope; perhaps you want to import one of them
    |
3   + use cyrup_sugars::StreamExt;
    |
3   + use futures_util::StreamExt;
    |
3   + use http_body_util::BodyExt;
    |
3   + use rayon::iter::ParallelIterator;
    |
      and 3 other candidates

error[E0599]: `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
   --> packages/domain/src/agent/chat.rs:239:41
    |
239 |         let store_result = store_stream.collect().await;
    |                                         ^^^^^^^ `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/stream.rs:20:1
    |
20  | pub struct AsyncStream<T, const CAP: usize = 1024> {
    | -------------------------------------------------- doesn't satisfy `_: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
            which is required by `&mut fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `collect` are implemented but not in scope; perhaps you want to import one of them
    |
3   + use cyrup_sugars::StreamExt;
    |
3   + use futures_util::StreamExt;
    |
3   + use http_body_util::BodyExt;
    |
3   + use rayon::iter::ParallelIterator;
    |
      and 3 other candidates

error[E0599]: `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
   --> packages/domain/src/agent/chat.rs:263:41
    |
263 |         let store_result = store_stream.collect().await;
    |                                         ^^^^^^^ `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>` is not an iterator
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/stream.rs:20:1
    |
20  | pub struct AsyncStream<T, const CAP: usize = 1024> {
    | -------------------------------------------------- doesn't satisfy `_: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
            which is required by `&mut fluent_ai_async::AsyncStream<std::result::Result<(), primitives::types::MemoryError>>: Iterator`
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `collect` are implemented but not in scope; perhaps you want to import one of them
    |
3   + use cyrup_sugars::StreamExt;
    |
3   + use futures_util::StreamExt;
    |
3   + use http_body_util::BodyExt;
    |
3   + use rayon::iter::ParallelIterator;
    |
      and 3 other candidates

error[E0599]: no method named `next` found for struct `fluent_ai_async::AsyncStream` in the current scope
  --> packages/domain/src/agent/core.rs:83:42
   |
83 |         let memory = match memory_stream.next().await {
   |                                          ^^^^
   |
   = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `next` are implemented but not in scope; perhaps you want to import one of them
   |
3  + use futures_util::StreamExt;
   |
3  + use serde_json::de::Read;
   |
3  + use std::iter::Iterator;
   |
3  + use std::str::pattern::Searcher;
   |
     and 1 other candidate
help: there is a method `try_next` with a similar name
   |
83 |         let memory = match memory_stream.try_next().await {
   |                                          ++++

error[E0308]: mismatched types
   --> packages/domain/src/agent/core.rs:89:43
    |
89  |         let memory_tool = MemoryTool::new(&memory);
    |                           --------------- ^^^^^^^ expected `Arc<Memory>`, found `&_`
    |                           |
    |                           arguments to this function are incorrect
    |
    = note: expected struct `Arc<Memory>`
            found reference `&_`
note: associated function defined here
   --> packages/domain/src/memory/tool.rs:112:12
    |
112 |     pub fn new(memory: Arc<Memory>) -> Self {
    |            ^^^ -------------------
help: consider removing the borrow
    |
89  -         let memory_tool = MemoryTool::new(&memory);
89  +         let memory_tool = MemoryTool::new(memory);
    |

error[E0308]: mismatched types
   --> packages/domain/src/agent/core.rs:125:27
    |
125 |             database_url: memory_config.database.connection_string.clone(),
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----^^
    |                           |                                        |
    |                           |                                        help: try using a conversion method: `to_string`
    |                           expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`

error[E0609]: no field `embedding_dimension` on type `VectorStoreConfig`
   --> packages/domain/src/agent/core.rs:126:61
    |
126 |             embedding_dimension: memory_config.vector_store.embedding_dimension,
    |                                                             ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `store_type`, `embedding_config`, `dimension`, `distance_metric`, `index_config` ... and 4 others

error[E0599]: no method named `next` found for struct `fluent_ai_async::AsyncStream` in the current scope
   --> packages/domain/src/agent/core.rs:130:42
    |
130 |         let memory = match memory_stream.next().await {
    |                                          ^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `next` are implemented but not in scope; perhaps you want to import one of them
    |
3   + use futures_util::StreamExt;
    |
3   + use serde_json::de::Read;
    |
3   + use std::iter::Iterator;
    |
3   + use std::str::pattern::Searcher;
    |
      and 1 other candidate
help: there is a method `try_next` with a similar name
    |
130 |         let memory = match memory_stream.try_next().await {
    |                                          ++++

error[E0308]: mismatched types
   --> packages/domain/src/agent/core.rs:136:43
    |
136 |         let memory_tool = MemoryTool::new(&memory);
    |                           --------------- ^^^^^^^ expected `Arc<Memory>`, found `&_`
    |                           |
    |                           arguments to this function are incorrect
    |
    = note: expected struct `Arc<Memory>`
            found reference `&_`
note: associated function defined here
   --> packages/domain/src/memory/tool.rs:112:12
    |
112 |     pub fn new(memory: Arc<Memory>) -> Self {
    |            ^^^ -------------------
help: consider removing the borrow
    |
136 -         let memory_tool = MemoryTool::new(&memory);
136 +         let memory_tool = MemoryTool::new(memory);
    |

error[E0308]: mismatched types
   --> packages/domain/src/agent/core.rs:170:43
    |
170 |         let memory_tool = MemoryTool::new(&memory);
    |                           --------------- ^^^^^^^ expected `Arc<Memory>`, found `&Arc<Memory>`
    |                           |
    |                           arguments to this function are incorrect
    |
    = note: expected struct `Arc<_>`
            found reference `&Arc<_>`
note: associated function defined here
   --> packages/domain/src/memory/tool.rs:112:12
    |
112 |     pub fn new(memory: Arc<Memory>) -> Self {
    |            ^^^ -------------------
help: consider removing the borrow
    |
170 -         let memory_tool = MemoryTool::new(&memory);
170 +         let memory_tool = MemoryTool::new(memory);
    |

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:94:35
    |
94  |                 self.execute_help(command, extended).await
    |                      ------------ ^^^^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                      |
    |                      arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:196:14
    |
196 |     async fn execute_help(
    |              ^^^^^^^^^^^^
197 |         &self,
198 |         command: Option<Arc<str>>,
    |         -------------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:103:23
    |
103 |             } => self.execute_export(format, output, include_metadata).await,
    |                       ^^^^^^^^^^^^^^
    |
note: expected `Arc<str>`, found `String`
   --> packages/domain/src/chat/commands/execution.rs:103:38
    |
103 |             } => self.execute_export(format, output, include_metadata).await,
    |                                      ^^^^^^
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:103:46
    |
103 |             } => self.execute_export(format, output, include_metadata).await,
    |                                              ^^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:251:14
    |
251 |     async fn execute_export(
    |              ^^^^^^^^^^^^^^
252 |         &self,
253 |         format: Arc<str>,
    |         ----------------
254 |         output: Option<Arc<str>>,
    |         ------------------------
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
103 |             } => self.execute_export(format.into(), output, include_metadata).await,
    |                                            +++++++

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:109:23
    |
109 |             } => self.execute_config(key, value, show, reset).await,
    |                       ^^^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:109:38
    |
109 |             } => self.execute_config(key, value, show, reset).await,
    |                                      ^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:109:43
    |
109 |             } => self.execute_config(key, value, show, reset).await,
    |                                           ^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:285:14
    |
285 |     async fn execute_config(
    |              ^^^^^^^^^^^^^^
286 |         &self,
287 |         key: Option<Arc<str>>,
    |         ---------------------
288 |         value: Option<Arc<str>>,
    |         -----------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:116:37
    |
116 |                 self.execute_search(query, scope, limit, include_context)
    |                      -------------- ^^^^^ expected `Arc<str>`, found `String`
    |                      |
    |                      arguments to this method are incorrect
    |
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:316:14
    |
316 |     async fn execute_search(
    |              ^^^^^^^^^^^^^^
317 |         &self,
318 |         query: Arc<str>,
    |         ---------------
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
116 |                 self.execute_search(query.into(), scope, limit, include_context)
    |                                          +++++++

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:125:22
    |
125 |                 self.execute_template(action, name, content, variables)
    |                      ^^^^^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:125:47
    |
125 |                 self.execute_template(action, name, content, variables)
    |                                               ^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:125:53
    |
125 |                 self.execute_template(action, name, content, variables)
    |                                                     ^^^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `HashMap<Arc<str>, Arc<str>>`, found `HashMap<String, String>`
   --> packages/domain/src/chat/commands/execution.rs:125:62
    |
125 |                 self.execute_template(action, name, content, variables)
    |                                                              ^^^^^^^^^
    = note: expected struct `std::collections::HashMap<Arc<str>, Arc<str>>`
               found struct `std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:344:14
    |
344 |     async fn execute_template(
    |              ^^^^^^^^^^^^^^^^
...
347 |         name: Option<Arc<str>>,
    |         ----------------------
348 |         _content: Option<Arc<str>>,
    |         --------------------------
349 |         _variables: HashMap<Arc<str>, Arc<str>>,
    |         ---------------------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:132:45
    |
132 |             } => self.execute_macro(action, name, auto_execute).await,
    |                       -------------         ^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:391:14
    |
391 |     async fn execute_macro(
    |              ^^^^^^^^^^^^^
...
394 |         name: Option<Arc<str>>,
    |         ----------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:137:23
    |
137 |             } => self.execute_branch(action, name, source).await,
    |                       ^^^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:137:46
    |
137 |             } => self.execute_branch(action, name, source).await,
    |                                              ^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:137:52
    |
137 |             } => self.execute_branch(action, name, source).await,
    |                                                    ^^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:437:14
    |
437 |     async fn execute_branch(
    |              ^^^^^^^^^^^^^^
...
440 |         name: Option<Arc<str>>,
    |         ----------------------
441 |         source: Option<Arc<str>>,
    |         ------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:142:47
    |
142 |             } => self.execute_session(action, name, include_config).await,
    |                       ---------------         ^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:480:14
    |
480 |     async fn execute_session(
    |              ^^^^^^^^^^^^^^^
...
483 |         name: Option<Arc<str>>,
    |         ----------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:144:22
    |
144 |                 self.execute_tool(action, name, args).await
    |                      ^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:144:43
    |
144 |                 self.execute_tool(action, name, args).await
    |                                           ^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `HashMap<Arc<str>, Arc<str>>`, found `HashMap<String, String>`
   --> packages/domain/src/chat/commands/execution.rs:144:49
    |
144 |                 self.execute_tool(action, name, args).await
    |                                                 ^^^^
    = note: expected struct `std::collections::HashMap<Arc<str>, Arc<str>>`
               found struct `std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:540:14
    |
540 |     async fn execute_tool(
    |              ^^^^^^^^^^^^
...
543 |         name: Option<Arc<str>>,
    |         ----------------------
544 |         args: HashMap<Arc<str>, Arc<str>>,
    |         ---------------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:150:48
    |
150 |             } => self.execute_stats(stat_type, period, detailed).await,
    |                       -------------            ^^^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:587:14
    |
587 |     async fn execute_stats(
    |              ^^^^^^^^^^^^^
...
590 |         period: Option<Arc<str>>,
    |         ------------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:155:23
    |
155 |             } => self.execute_theme(action, name, properties).await,
    |                       ^^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:155:45
    |
155 |             } => self.execute_theme(action, name, properties).await,
    |                                             ^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `HashMap<Arc<str>, Arc<str>>`, found `HashMap<String, String>`
   --> packages/domain/src/chat/commands/execution.rs:155:51
    |
155 |             } => self.execute_theme(action, name, properties).await,
    |                                                   ^^^^^^^^^^
    = note: expected struct `std::collections::HashMap<Arc<str>, Arc<str>>`
               found struct `std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:612:14
    |
612 |     async fn execute_theme(
    |              ^^^^^^^^^^^^^
...
615 |         name: Option<Arc<str>>,
    |         ----------------------
616 |         properties: HashMap<Arc<str>, Arc<str>>,
    |         ---------------------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:160:45
    |
160 |             } => self.execute_debug(action, level, system_info).await,
    |                       -------------         ^^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:662:14
    |
662 |     async fn execute_debug(
    |              ^^^^^^^^^^^^^
...
665 |         level: Option<Arc<str>>,
    |         -----------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/execution.rs:165:54
    |
165 |             } => self.execute_history(action, limit, filter).await,
    |                       ---------------                ^^^^^^ expected `Option<Arc<str>>`, found `Option<String>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:712:14
    |
712 |     async fn execute_history(
    |              ^^^^^^^^^^^^^^^
...
716 |         filter: Option<Arc<str>>,
    |         ------------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:170:23
    |
170 |             } => self.execute_save(name, include_config, location).await,
    |                       ^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:170:36
    |
170 |             } => self.execute_save(name, include_config, location).await,
    |                                    ^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:170:58
    |
170 |             } => self.execute_save(name, include_config, location).await,
    |                                                          ^^^^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:732:14
    |
732 |     async fn execute_save(
    |              ^^^^^^^^^^^^
733 |         &self,
734 |         name: Option<Arc<str>>,
    |         ----------------------
735 |         include_config: bool,
736 |         location: Option<Arc<str>>,
    |         --------------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:175:23
    |
175 |             } => self.execute_load(name, merge, location).await,
    |                       ^^^^^^^^^^^^
    |
note: expected `Arc<str>`, found `String`
   --> packages/domain/src/chat/commands/execution.rs:175:36
    |
175 |             } => self.execute_load(name, merge, location).await,
    |                                    ^^^^
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:175:49
    |
175 |             } => self.execute_load(name, merge, location).await,
    |                                                 ^^^^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:747:14
    |
747 |     async fn execute_load(
    |              ^^^^^^^^^^^^
748 |         &self,
749 |         name: Arc<str>,
    |         --------------
750 |         merge: bool,
751 |         location: Option<Arc<str>>,
    |         --------------------------
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
175 |             } => self.execute_load(name.into(), merge, location).await,
    |                                        +++++++

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:180:23
    |
180 |             } => self.execute_import(import_type, source, options).await,
    |                       ^^^^^^^^^^^^^^
    |
note: expected `Arc<str>`, found `String`
   --> packages/domain/src/chat/commands/execution.rs:180:51
    |
180 |             } => self.execute_import(import_type, source, options).await,
    |                                                   ^^^^^^
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
note: expected `HashMap<Arc<str>, Arc<str>>`, found `HashMap<String, String>`
   --> packages/domain/src/chat/commands/execution.rs:180:59
    |
180 |             } => self.execute_import(import_type, source, options).await,
    |                                                           ^^^^^^^
    = note: expected struct `std::collections::HashMap<Arc<str>, Arc<str>>`
               found struct `std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:761:14
    |
761 |     async fn execute_import(
    |              ^^^^^^^^^^^^^^
...
764 |         source: Arc<str>,
    |         ----------------
765 |         options: HashMap<Arc<str>, Arc<str>>,
    |         ------------------------------------
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
180 |             } => self.execute_import(import_type, source.into(), options).await,
    |                                                         +++++++

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:186:23
    |
186 |             } => self.execute_settings(category, key, value, show).await,
    |                       ^^^^^^^^^^^^^^^^
    |
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:186:50
    |
186 |             } => self.execute_settings(category, key, value, show).await,
    |                                                  ^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: expected `Option<Arc<str>>`, found `Option<String>`
   --> packages/domain/src/chat/commands/execution.rs:186:55
    |
186 |             } => self.execute_settings(category, key, value, show).await,
    |                                                       ^^^^^
    = note: expected enum `std::option::Option<Arc<str>>`
               found enum `std::option::Option<std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:775:14
    |
775 |     async fn execute_settings(
    |              ^^^^^^^^^^^^^^^^
...
778 |         key: Option<Arc<str>>,
    |         ---------------------
779 |         value: Option<Arc<str>>,
    |         -----------------------

error[E0308]: arguments to this method are incorrect
   --> packages/domain/src/chat/commands/execution.rs:191:23
    |
191 |             } => self.execute_custom(name, args, metadata).await,
    |                       ^^^^^^^^^^^^^^
    |
note: expected `Arc<str>`, found `String`
   --> packages/domain/src/chat/commands/execution.rs:191:38
    |
191 |             } => self.execute_custom(name, args, metadata).await,
    |                                      ^^^^
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
note: expected `HashMap<Arc<str>, Arc<str>>`, found `HashMap<String, String>`
   --> packages/domain/src/chat/commands/execution.rs:191:44
    |
191 |             } => self.execute_custom(name, args, metadata).await,
    |                                            ^^^^
    = note: expected struct `std::collections::HashMap<Arc<str>, Arc<str>>`
               found struct `std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/execution.rs:793:14
    |
793 |     async fn execute_custom(
    |              ^^^^^^^^^^^^^^
794 |         &self,
795 |         name: Arc<str>,
    |         --------------
796 |         args: HashMap<Arc<str>, Arc<str>>,
    |         ---------------------------------
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
191 |             } => self.execute_custom(name.into(), args, metadata).await,
    |                                          +++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:226:12
    |
226 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
226 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:236:23
    |
236 |             return Ok(CommandOutput::success(
    |                       ^^^^^^^^^^^^^^^^^^^^^^
237 |                 "Use --confirm to clear chat history",
    |                 ------------------------------------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
236 -             return Ok(CommandOutput::success(
237 -                 "Use --confirm to clear chat history",
238 -             ));
236 +             return Ok(CommandOutput::success(/* u64 */, "Use --confirm to clear chat history"));
    |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:247:12
    |
247 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
247 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:281:12
    |
281 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
281 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:293:23
    |
293 |             return Ok(CommandOutput::success("Configuration reset to defaults"));
    |                       ^^^^^^^^^^^^^^^^^^^^^^ --------------------------------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
293 |             return Ok(CommandOutput::success(/* u64 */, "Configuration reset to defaults"));
    |                                              ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:297:23
    |
297 |             return Ok(CommandOutput::success(
    |                       ^^^^^^^^^^^^^^^^^^^^^^
298 |                 "Current configuration: <config data>",
    |                 -------------------------------------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
297 -             return Ok(CommandOutput::success(
298 -                 "Current configuration: <config data>",
299 -             ));
297 +             return Ok(CommandOutput::success(/* u64 */, "Current configuration: <config data>"));
    |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:304:16
    |
304 |             Ok(CommandOutput::success(message))
    |                ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
304 |             Ok(CommandOutput::success(/* u64 */, message))
    |                                       ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:307:16
    |
307 |             Ok(CommandOutput::success(message))
    |                ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
307 |             Ok(CommandOutput::success(/* u64 */, message))
    |                                       ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:309:16
    |
309 |             Ok(CommandOutput::success(
    |                ^^^^^^^^^^^^^^^^^^^^^^
310 |                 "Use --show to display current configuration",
    |                 --------------------------------------------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
309 -             Ok(CommandOutput::success(
310 -                 "Use --show to display current configuration",
311 -             ))
309 +             Ok(CommandOutput::success(/* u64 */, "Use --show to display current configuration"))
    |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:340:12
    |
340 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
340 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:387:12
    |
387 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
387 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:433:12
    |
433 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
433 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:476:12
    |
476 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
476 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:536:12
    |
536 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
536 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:583:12
    |
583 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
583 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:608:12
    |
608 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
608 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:658:12
    |
658 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
658 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:683:12
    |
683 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
683 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:728:12
    |
728 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
728 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:743:12
    |
743 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
743 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:757:12
    |
757 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
757 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:771:12
    |
771 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
771 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:789:12
    |
789 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
789 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/chat/commands/execution.rs:803:12
    |
803 |         Ok(CommandOutput::success(message))
    |            ^^^^^^^^^^^^^^^^^^^^^^ ------- argument #1 of type `u64` is missing
    |
note: associated function defined here
   --> packages/domain/src/chat/commands/types.rs:967:12
    |
967 |     pub fn success(execution_id: u64, content: impl Into<String>) -> Self {
    |            ^^^^^^^ -----------------
help: provide the argument
    |
803 |         Ok(CommandOutput::success(/* u64 */, message))
    |                                   ++++++++++

error[E0277]: `fluent_ai_async::AsyncStream<()>` is not a future
    --> packages/domain/src/chat/config.rs:1034:49
     |
1034 |             if let Err(e) = self.save_to_file().await {
     |                                                 ^^^^^ `fluent_ai_async::AsyncStream<()>` is not a future
     |
     = help: the trait `futures_util::Future` is not implemented for `fluent_ai_async::AsyncStream<()>`
     = note: fluent_ai_async::AsyncStream<()> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `fluent_ai_async::AsyncStream<()>` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1034 -             if let Err(e) = self.save_to_file().await {
1034 +             if let Err(e) = self.save_to_file() {
     |

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:578:17
    |
576 |             message: Message::new(
    |                      ------------ arguments to this function are incorrect
577 |                 message.user_id.len() as u64, // Use user_id length as ID for now
578 |                 MessageType::AgentChat,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ expected `MessageRole`, found `MessageType`
    |
note: associated function defined here
   --> packages/domain/src/chat/message/mod.rs:46:16
    |
46  |         pub fn new(id: u64, role: MessageRole, content: &[u8]) -> Self {
    |                ^^^          -----------------

error[E0599]: no method named `unwrap_or_else` found for struct `message::types::Message` in the current scope
   --> packages/domain/src/chat/realtime.rs:581:14
    |
576 |               message: Message::new(
    |  ______________________-
577 | |                 message.user_id.len() as u64, // Use user_id length as ID for now
578 | |                 MessageType::AgentChat,
579 | |                 message.content.as_bytes(),
580 | |             )
581 | |             .unwrap_or_else(|_| Message::new(0, MessageType::AgentChat, b"").unwrap()),
    | |             -^^^^^^^^^^^^^^ method not found in `message::types::Message`
    | |_____________|
    |
    |
   ::: packages/domain/src/chat/message/mod.rs:19:5
    |
19  |       pub struct Message {
    |       ------------------ method `unwrap_or_else` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `unwrap_or_else`, perhaps you need to implement it:
            candidate #1: `TryFutureExt`

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:581:49
    |
581 |             .unwrap_or_else(|_| Message::new(0, MessageType::AgentChat, b"").unwrap()),
    |                                 ------------    ^^^^^^^^^^^^^^^^^^^^^^ expected `MessageRole`, found `MessageType`
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: associated function defined here
   --> packages/domain/src/chat/message/mod.rs:46:16
    |
46  |         pub fn new(id: u64, role: MessageRole, content: &[u8]) -> Self {
    |                ^^^          -----------------

error[E0599]: no method named `unwrap` found for struct `message::types::Message` in the current scope
   --> packages/domain/src/chat/realtime.rs:581:78
    |
581 |             .unwrap_or_else(|_| Message::new(0, MessageType::AgentChat, b"").unwrap()),
    |                                                                              ^^^^^^ method not found in `message::types::Message`
    |
   ::: packages/domain/src/chat/message/mod.rs:19:5
    |
19  |     pub struct Message {
    |     ------------------ method `unwrap` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `aws_lc_rs::key_wrap::KeyWrap`
            candidate #2: `brotli::enc::threading::OwnedRetriever`
help: some of the expressions' fields have a method of the same name
    |
581 |             .unwrap_or_else(|_| Message::new(0, MessageType::AgentChat, b"").id.unwrap()),
    |                                                                              +++
581 |             .unwrap_or_else(|_| Message::new(0, MessageType::AgentChat, b"").timestamp.unwrap()),
    |                                                                              ++++++++++

error[E0277]: the trait bound `Arc<str>: Borrow<std::string::String>` is not satisfied
    --> packages/domain/src/chat/realtime.rs:1803:40
     |
1803 |                     connections.remove(&conn_id);
     |                                 ------ ^^^^^^^^ the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
     |                                 |
     |                                 required by a bound introduced by this call
     |
     = help: the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
             but trait `Borrow<str>` is implemented for it
     = help: for that trait implementation, expected `str`, found `std::string::String`
note: required by a bound in `SkipMap::<K, V>::remove`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-skiplist-0.1.3/src/map.rs:427:12
     |
425  |     pub fn remove<Q>(&self, key: &Q) -> Option<Entry<'_, K, V>>
     |            ------ required by a bound in this associated function
426  |     where
427  |         K: Borrow<Q>,
     |            ^^^^^^^^^ required by this bound in `SkipMap::<K, V>::remove`

error[E0308]: mismatched types
    --> packages/domain/src/chat/realtime.rs:1863:33
     |
1863 |         self.connections.insert(connection_id.clone(), connection);
     |                          ------ ^^^^^^^^^^^^^^^^^^^^^ expected `Arc<str>`, found `String`
     |                          |
     |                          arguments to this method are incorrect
     |
     = note: expected struct `Arc<str>`
                found struct `std::string::String`
help: the return type of this call is `std::string::String` due to the type of the argument passed
    --> packages/domain/src/chat/realtime.rs:1863:9
     |
1863 |         self.connections.insert(connection_id.clone(), connection);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^---------------------^^^^^^^^^^^^^
     |                                 |
     |                                 this argument influences the return type of `insert`
note: method defined here
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-skiplist-0.1.3/src/map.rs:372:12
     |
372  |     pub fn insert(&self, key: K, value: V) -> Entry<'_, K, V> {
     |            ^^^^^^
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
     |
1863 |         self.connections.insert(connection_id.clone().into(), connection);
     |                                                      +++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:235:50
    |
235 |         let doc_id: Arc<str> = Arc::from(message.timestamp.to_string());
    |                                                  ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
235 |         let doc_id: Arc<str> = Arc::from(message.message.timestamp.to_string());
    |                                                  ++++++++

error[E0609]: no field `content` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:242:55
    |
242 |         let tokens = self.tokenize_with_simd(&message.content);
    |                                                       ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
242 |         let tokens = self.tokenize_with_simd(&message.message.content);
    |                                                       ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:433:38
    |
433 |             let key = result.message.timestamp.to_string();
    |                                      ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
433 |             let key = result.message.message.timestamp.to_string();
    |                                      ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:462:53
    |
462 |                 excluded_docs.insert(result.message.timestamp.to_string());
    |                                                     ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
462 |                 excluded_docs.insert(result.message.message.timestamp.to_string());
    |                                                     ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
   --> packages/domain/src/chat/search.rs:497:35
    |
497 |             let content = message.content.to_lowercase();
    |                                   ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
497 |             let content = message.message.content.to_lowercase();
    |                                   ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
   --> packages/domain/src/chat/search.rs:547:59
    |
547 |             let tokens = self.tokenize_with_simd(&message.content);
    |                                                           ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
547 |             let tokens = self.tokenize_with_simd(&message.message.content);
    |                                                           ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
   --> packages/domain/src/chat/search.rs:556:55
    |
556 |                         self.highlight_terms(&message.content, terms),
    |                                                       ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
556 |                         self.highlight_terms(&message.message.content, terms),
    |                                                       ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
   --> packages/domain/src/chat/search.rs:587:66
    |
587 | ...                   self.highlight_text(&message.value().content, term),
    |                                                            ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
587 |                             self.highlight_text(&message.value().message.content, term),
    |                                                                  ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:743:27
    |
743 |                 r.message.timestamp >= date_range.start && r.message.timestamp <= date_range.end
    |                           ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
743 |                 r.message.message.timestamp >= date_range.start && r.message.timestamp <= date_range.end
    |                           ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:743:70
    |
743 |                 r.message.timestamp >= date_range.start && r.message.timestamp <= date_range.end
    |                                                                      ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
743 |                 r.message.timestamp >= date_range.start && r.message.message.timestamp <= date_range.end
    |                                                                      ++++++++

error[E0609]: no field `role` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:749:44
    |
749 |             results.retain(|r| &*r.message.role == &**user_filter);
    |                                            ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
749 |             results.retain(|r| &*r.message.message.role == &**user_filter);
    |                                            ++++++++

error[E0609]: no field `metadata` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:756:22
    |
756 |                     .metadata
    |                      ^^^^^^^^ unknown field
    |
    = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `content` on type `&SearchChatMessage`
   --> packages/domain/src/chat/search.rs:983:31
    |
983 |         let content = message.content.to_lowercase();
    |                               ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
983 |         let content = message.message.content.to_lowercase();
    |                               ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1222:35
     |
1222 |             messages.retain(|m| m.timestamp >= date_range.start && m.timestamp <= date_range.end);
     |                                   ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1222 |             messages.retain(|m| m.message.timestamp >= date_range.start && m.timestamp <= date_range.end);
     |                                   ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1222:70
     |
1222 |             messages.retain(|m| m.timestamp >= date_range.start && m.timestamp <= date_range.end);
     |                                                                      ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1222 |             messages.retain(|m| m.timestamp >= date_range.start && m.message.timestamp <= date_range.end);
     |                                                                      ++++++++

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1227:37
     |
1227 |             messages.retain(|m| &*m.role == &**user_filter);
     |                                     ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1227 |             messages.retain(|m| &*m.message.role == &**user_filter);
     |                                     ++++++++

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1243:33
     |
1243 |                 "role": message.role,
     |                                 ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1243 |                 "role": message.message.role,
     |                                 ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1244:36
     |
1244 |                 "content": message.content,
     |                                    ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1244 |                 "content": message.message.content,
     |                                    ++++++++

error[E0609]: no field `tokens` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1245:35
     |
1245 |                 "tokens": message.tokens,
     |                                   ^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1249:75
     |
1249 |                 json_obj["timestamp"] = serde_json::Value::Number(message.timestamp.into());
     |                                                                           ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1249 |                 json_obj["timestamp"] = serde_json::Value::Number(message.message.timestamp.into());
     |                                                                           ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1253:50
     |
1253 |                 if let Some(metadata) = &message.metadata {
     |                                                  ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1299:43
     |
1299 |             let escaped_content = message.content.replace(',', "\\,").replace('\n', "\\n");
     |                                           ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1299 |             let escaped_content = message.message.content.replace(',', "\\,").replace('\n', "\\n");
     |                                           ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1300:41
     |
1300 |             let timestamp_str = message.timestamp.to_string();
     |                                         ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1300 |             let timestamp_str = message.message.timestamp.to_string();
     |                                         ++++++++

error[E0609]: no field `tokens` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1301:38
     |
1301 |             let tokens_str = message.tokens.to_string();
     |                                      ^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1303:40
     |
1303 |             let mut row = vec![message.role.as_str(), &escaped_content, &tokens_str];
     |                                        ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1303 |             let mut row = vec![message.message.role.as_str(), &escaped_content, &tokens_str];
     |                                        ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1310:44
     |
1310 |                 let metadata_str = message.metadata.as_ref().map(|m| m.as_str()).unwrap_or("");
     |                                            ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1342:68
     |
1342 |             markdown_output.push_str(&format!("## {}\n\n", message.role));
     |                                                                    ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1342 |             markdown_output.push_str(&format!("## {}\n\n", message.message.role));
     |                                                                    ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1343:65
     |
1343 |             markdown_output.push_str(&format!("{}\n\n", message.content));
     |                                                                 ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1343 |             markdown_output.push_str(&format!("{}\n\n", message.message.content));
     |                                                                 ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1346:82
     |
1346 |                 markdown_output.push_str(&format!("*Timestamp: {}*\n\n", message.timestamp));
     |                                                                                  ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1346 |                 markdown_output.push_str(&format!("*Timestamp: {}*\n\n", message.message.timestamp));
     |                                                                                  ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1349:52
     |
1349 |             if options.include_metadata && message.metadata.is_some() {
     |                                                    ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1352:29
     |
1352 |                     message.metadata.as_ref().unwrap()
     |                             ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1385:85
     |
1385 |             html_output.push_str(&format!("<div class=\"role\">{}</div>\n", message.role));
     |                                                                                     ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1385 |             html_output.push_str(&format!("<div class=\"role\">{}</div>\n", message.message.role));
     |                                                                                     ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1388:25
     |
1388 |                 message.content.replace('<', "&lt;").replace('>', "&gt;")
     |                         ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1388 |                 message.message.content.replace('<', "&lt;").replace('>', "&gt;")
     |                         ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1394:29
     |
1394 |                     message.timestamp
     |                             ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1394 |                     message.message.timestamp
     |                             ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1398:52
     |
1398 |             if options.include_metadata && message.metadata.is_some() {
     |                                                    ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1401:29
     |
1401 |                     message.metadata.as_ref().unwrap()
     |                             ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1436:75
     |
1436 |             xml_output.push_str(&format!("    <role>{}</role>\n", message.role));
     |                                                                           ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1436 |             xml_output.push_str(&format!("    <role>{}</role>\n", message.message.role));
     |                                                                           ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1439:25
     |
1439 |                 message.content.replace('<', "&lt;").replace('>', "&gt;")
     |                         ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1439 |                 message.message.content.replace('<', "&lt;").replace('>', "&gt;")
     |                         ++++++++

error[E0609]: no field `tokens` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1441:79
     |
1441 |             xml_output.push_str(&format!("    <tokens>{}</tokens>\n", message.tokens));
     |                                                                               ^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1446:29
     |
1446 |                     message.timestamp
     |                             ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1446 |                     message.message.timestamp
     |                             ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1450:52
     |
1450 |             if options.include_metadata && message.metadata.is_some() {
     |                                                    ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1453:29
     |
1453 |                     message.metadata.as_ref().unwrap()
     |                             ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `role` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1477:63
     |
1477 |             text_output.push_str(&format!("{}: {}\n", message.role, message.content));
     |                                                               ^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1477 |             text_output.push_str(&format!("{}: {}\n", message.message.role, message.content));
     |                                                               ++++++++

error[E0609]: no field `content` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1477:77
     |
1477 |             text_output.push_str(&format!("{}: {}\n", message.role, message.content));
     |                                                                             ^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1477 |             text_output.push_str(&format!("{}: {}\n", message.role, message.message.content));
     |                                                                             ++++++++

error[E0609]: no field `timestamp` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1480:74
     |
1480 |                 text_output.push_str(&format!("Timestamp: {}\n", message.timestamp));
     |                                                                          ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1480 |                 text_output.push_str(&format!("Timestamp: {}\n", message.message.timestamp));
     |                                                                          ++++++++

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1483:52
     |
1483 |             if options.include_metadata && message.metadata.is_some() {
     |                                                    ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `metadata` on type `&SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1486:29
     |
1486 |                     message.metadata.as_ref().unwrap()
     |                             ^^^^^^^^ unknown field
     |
     = note: available fields are: `message`, `relevance_score`, `highlights`

error[E0609]: no field `timestamp` on type `SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1603:48
     |
1603 |             let message_id = Arc::from(message.timestamp.to_string());
     |                                                ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1603 |             let message_id = Arc::from(message.message.timestamp.to_string());
     |                                                ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
    --> packages/domain/src/chat/search.rs:1623:55
     |
1623 |             let message_id = Arc::from(result.message.timestamp.to_string());
     |                                                       ^^^^^^^^^ unknown field
     |
help: one of the expressions' fields has a field of the same name
     |
1623 |             let message_id = Arc::from(result.message.message.timestamp.to_string());
     |                                                       ++++++++

error[E0609]: no field `prompt` on type `completion::request::CompletionRequest<'_>`
  --> packages/domain/src/context/extraction/extractor.rs:99:32
   |
99 |             completion_request.prompt.clone().into(),
   |                                ^^^^^^ unknown field
   |
   = note: available fields are: `system_prompt`, `chat_history`, `documents`, `tools`, `temperature` ... and 3 others

error[E0609]: no field `params` on type `completion::request::CompletionRequest<'_>`
   --> packages/domain/src/context/extraction/extractor.rs:100:33
    |
100 |             &completion_request.params,
    |                                 ^^^^^^ unknown field
    |
    = note: available fields are: `system_prompt`, `chat_history`, `documents`, `tools`, `temperature` ... and 3 others

error[E0599]: no method named `next` found for struct `fluent_ai_async::AsyncStream` in the current scope
   --> packages/domain/src/context/extraction/extractor.rs:106:40
    |
106 |         while let Some(chunk) = stream.next().await {
    |                                        ^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: the following traits which provide `next` are implemented but not in scope; perhaps you want to import one of them
    |
1   + use futures_util::StreamExt;
    |
1   + use serde_json::de::Read;
    |
1   + use std::iter::Iterator;
    |
1   + use std::str::pattern::Searcher;
    |
      and 1 other candidate
help: there is a method `try_next` with a similar name
    |
106 |         while let Some(chunk) = stream.try_next().await {
    |                                        ++++

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/domain/src/context/extraction/extractor.rs:109:28
    |
109 |                     if let Some(text) = chunk.text() {
    |                            ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:591:17
    |
591 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: can't compare `FinishReason` with `FinishReason`
   --> packages/domain/src/context/extraction/extractor.rs:126:26
    |
126 |         if finish_reason == Some(FinishReason::Stop) || !full_response.is_empty() {
    |                          ^^ no implementation for `FinishReason == FinishReason`
    |
    = help: the trait `PartialEq` is not implemented for `FinishReason`
    = note: required for `std::option::Option<FinishReason>` to implement `PartialEq`
help: consider annotating `FinishReason` with `#[derive(PartialEq)]`
   --> packages/domain/src/context/chunk.rs:110:1
    |
110 + #[derive(PartialEq)]
111 | pub enum FinishReason {
    |

error[E0559]: variant `commands::types::CommandError::ParseError` has no field named `detail`
   --> packages/domain/src/chat/commands/execution.rs:826:21
    |
826 |                     detail: Arc::from(e.to_string()),
    |                     ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:28:5
    |
28  |     ParseError(String),
    |     ---------- `commands::types::CommandError::ParseError` defined here
    |
help: `commands::types::CommandError::ParseError` is a tuple variant, use the appropriate syntax
    |
825 -                 .map_err(|e| CommandError::ParseError {
826 -                     detail: Arc::from(e.to_string()),
827 -                 })?;
825 +                 .map_err(|e| CommandError::ParseError(/* std::string::String */))?;
    |

error[E0277]: expected a `FnOnce()` closure, found `{async block@packages/domain/src/chat/commands/execution.rs:822:21: 822:31}`
   --> packages/domain/src/chat/commands/execution.rs:822:21
    |
822 |           spawn_async(async move {
    |  _________-----------_^
    | |         |
    | |         required by a bound introduced by this call
823 | |             let command = parser
824 | |                 .parse(&input_owned)
825 | |                 .map_err(|e| CommandError::ParseError {
...   |
828 | |             executor.execute(command).await
829 | |         })
    | |_________^ expected an `FnOnce()` closure, found `{async block@packages/domain/src/chat/commands/execution.rs:822:21: 822:31}`
    |
    = help: the trait `FnOnce()` is not implemented for `{async block@packages/domain/src/chat/commands/execution.rs:822:21: 822:31}`
    = note: wrap the `{async block@packages/domain/src/chat/commands/execution.rs:822:21: 822:31}` in a closure with no arguments: `|| { /* code */ }`
note: required by a bound in `spawn_task`
   --> /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/task.rs:67:8
    |
65  | pub fn spawn_task<F, T>(f: F) -> AsyncTask<T>
    |        ---------- required by a bound in this function
66  | where
67  |     F: FnOnce() -> T + Send + 'static,
    |        ^^^^^^^^^^^^^ required by this bound in `spawn_task`

error[E0599]: no variant or associated item named `Enum` found for enum `commands::types::ParameterType` in the current scope
   --> packages/domain/src/chat/commands/parsing.rs:142:52
    |
142 |                     parameter_type: ParameterType::Enum,
    |                                                    ^^^^ variant or associated item not found in `commands::types::ParameterType`
    |
   ::: packages/domain/src/chat/commands/types.rs:48:1
    |
48  | pub enum ParameterType {
    | ---------------------- variant or associated item `Enum` not found for this enum

error[E0599]: no variant or associated item named `Path` found for enum `commands::types::ParameterType` in the current scope
   --> packages/domain/src/chat/commands/parsing.rs:149:52
    |
149 |                     parameter_type: ParameterType::Path,
    |                                                    ^^^^ variant or associated item not found in `commands::types::ParameterType`
    |
   ::: packages/domain/src/chat/commands/types.rs:48:1
    |
48  | pub enum ParameterType {
    | ---------------------- variant or associated item `Path` not found for this enum

error[E0599]: no variant or associated item named `Enum` found for enum `commands::types::ParameterType` in the current scope
   --> packages/domain/src/chat/commands/parsing.rs:230:52
    |
230 |                     parameter_type: ParameterType::Enum,
    |                                                    ^^^^ variant or associated item not found in `commands::types::ParameterType`
    |
   ::: packages/domain/src/chat/commands/types.rs:48:1
    |
48  | pub enum ParameterType {
    | ---------------------- variant or associated item `Enum` not found for this enum

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:331:41
    |
321 |                 arg if !arg.starts_with('-') => command = Some(Arc::from(arg)),
    |                                                 ------- here the type of `command` is inferred to be `std::option::Option<Arc<_, _>>`
...
331 |         Ok(ImmutableChatCommand::Help { command, extended })
    |                                         ^^^^^^^ expected `Option<String>`, found `Option<Arc<_, _>>`
    |
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<Arc<_, _>>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:414:13
    |
414 |             format,
    |             ^^^^^^ expected `String`, found `Arc<_, _>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<_, _>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:415:13
    |
397 |                     output = Some(Arc::from(args[i]));
    |                     ------ here the type of `output` is inferred to be `std::option::Option<Arc<_, _>>`
...
415 |             output,
    |             ^^^^^^ expected `Option<String>`, found `Option<Arc<_, _>>`
    |
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<Arc<_, _>>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:453:13
    |
434 |                         key = Some(Arc::from(arg));
    |                         --- here the type of `key` is inferred to be `std::option::Option<Arc<_, _>>`
...
453 |             key,
    |             ^^^ expected `Option<String>`, found `Option<Arc<_, _>>`
    |
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<Arc<_, _>>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:454:13
    |
436 |                         value = Some(Arc::from(arg));
    |                         ----- here the type of `value` is inferred to be `std::option::Option<Arc<_, _>>`
...
454 |             value,
    |             ^^^^^ expected `Option<String>`, found `Option<Arc<_, _>>`
    |
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<Arc<_, _>>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:530:13
    |
530 |             query,
    |             ^^^^^ expected `String`, found `Arc<_, _>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<_, _>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/parsing.rs:545:32
    |
545 |                         value: format.clone(),
    |                                ^^^^^^^^^^^^^^ expected `Arc<str>`, found `String`
    |
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
545 |                         value: format.clone().into(),
    |                                              +++++++

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
  --> packages/domain/src/chat/commands/registry.rs:45:17
   |
45 |                 detail: Arc::from("Command name cannot be empty"),
   |                 ^^^^^^ field does not exist
   |
  ::: packages/domain/src/chat/commands/types.rs:30:5
   |
30 |     ConfigurationError(String),
   |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
   |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
   |
44 -             return Err(CommandError::ConfigurationError {
45 -                 detail: Arc::from("Command name cannot be empty"),
46 -             });
44 +             return Err(CommandError::ConfigurationError(/* std::string::String */));
   |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
  --> packages/domain/src/chat/commands/registry.rs:51:17
   |
51 |                 detail: Arc::from("Command description cannot be empty"),
   |                 ^^^^^^ field does not exist
   |
  ::: packages/domain/src/chat/commands/types.rs:30:5
   |
30 |     ConfigurationError(String),
   |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
   |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
   |
50 -             return Err(CommandError::ConfigurationError {
51 -                 detail: Arc::from("Command description cannot be empty"),
52 -             });
50 +             return Err(CommandError::ConfigurationError(/* std::string::String */));
   |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
  --> packages/domain/src/chat/commands/registry.rs:58:17
   |
58 |                 detail: Arc::from(format!("Command '{}' already registered", info.name)),
   |                 ^^^^^^ field does not exist
   |
  ::: packages/domain/src/chat/commands/types.rs:30:5
   |
30 |     ConfigurationError(String),
   |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
   |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
   |
57 -             return Err(CommandError::ConfigurationError {
58 -                 detail: Arc::from(format!("Command '{}' already registered", info.name)),
59 -             });
57 +             return Err(CommandError::ConfigurationError(/* std::string::String */));
   |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
  --> packages/domain/src/chat/commands/registry.rs:66:21
   |
66 |                     detail: Arc::from(format!("Alias '{}' already registered", alias)),
   |                     ^^^^^^ field does not exist
   |
  ::: packages/domain/src/chat/commands/types.rs:30:5
   |
30 |     ConfigurationError(String),
   |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
   |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
   |
65 -                 return Err(CommandError::ConfigurationError {
66 -                     detail: Arc::from(format!("Alias '{}' already registered", alias)),
67 -                 });
65 +                 return Err(CommandError::ConfigurationError(/* std::string::String */));
   |

error[E0559]: variant `commands::types::CommandError::UnknownCommand` has no field named `command`
   --> packages/domain/src/chat/commands/registry.rs:101:17
    |
101 |                 command: command_name.clone(),
    |                 ^^^^^^^ `commands::types::CommandError::UnknownCommand` does not have this field
    |
    = note: all struct fields are already assigned

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
   --> packages/domain/src/chat/commands/registry.rs:253:21
    |
253 |                     detail: Arc::from(format!(
    |                     ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:30:5
    |
30  |     ConfigurationError(String),
    |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
    |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
    |
252 -                 errors.push(CommandError::ConfigurationError {
253 -                     detail: Arc::from(format!(
254 -                         "Orphaned alias '{}' points to non-existent command '{}'",
255 -                         alias_entry.key(),
256 -                         command_name
257 -                     )),
258 -                 });
252 +                 errors.push(CommandError::ConfigurationError(/* std::string::String */));
    |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
   --> packages/domain/src/chat/commands/registry.rs:266:21
    |
266 |                     detail: Arc::from(format!("Empty category '{}'", category_entry.key())),
    |                     ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:30:5
    |
30  |     ConfigurationError(String),
    |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
    |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
    |
265 -                 errors.push(CommandError::ConfigurationError {
266 -                     detail: Arc::from(format!("Empty category '{}'", category_entry.key())),
267 -                 });
265 +                 errors.push(CommandError::ConfigurationError(/* std::string::String */));
    |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
   --> packages/domain/src/chat/commands/registry.rs:277:25
    |
277 |                         detail: Arc::from(format!(
    |                         ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:30:5
    |
30  |     ConfigurationError(String),
    |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
    |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
    |
276 -                     errors.push(CommandError::ConfigurationError {
277 -                         detail: Arc::from(format!(
278 -                             "Command '{}' has parameter with empty name",
279 -                             info.name
280 -                         )),
281 -                     });
276 +                     errors.push(CommandError::ConfigurationError(/* std::string::String */));
    |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
   --> packages/domain/src/chat/commands/registry.rs:314:13
    |
314 |             detail: Arc::from(format!("Failed to export registry: {}", e)),
    |             ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:30:5
    |
30  |     ConfigurationError(String),
    |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
    |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
    |
313 -         serde_json::to_string_pretty(&commands).map_err(|e| CommandError::ConfigurationError {
314 -             detail: Arc::from(format!("Failed to export registry: {}", e)),
315 -         })
313 +         serde_json::to_string_pretty(&commands).map_err(|e| CommandError::ConfigurationError(/* std::string::String */))
    |

error[E0559]: variant `commands::types::CommandError::ConfigurationError` has no field named `detail`
   --> packages/domain/src/chat/commands/registry.rs:322:17
    |
322 |                 detail: Arc::from(format!("Failed to import registry: {}", e)),
    |                 ^^^^^^ field does not exist
    |
   ::: packages/domain/src/chat/commands/types.rs:30:5
    |
30  |     ConfigurationError(String),
    |     ------------------ `commands::types::CommandError::ConfigurationError` defined here
    |
help: `commands::types::CommandError::ConfigurationError` is a tuple variant, use the appropriate syntax
    |
321 -             serde_json::from_str(json).map_err(|e| CommandError::ConfigurationError {
322 -                 detail: Arc::from(format!("Failed to import registry: {}", e)),
323 -             })?;
321 +             serde_json::from_str(json).map_err(|e| CommandError::ConfigurationError(/* std::string::String */))?;
    |

error[E0609]: no field `success` on type `&commands::types::CommandOutput`
  --> packages/domain/src/chat/commands/response.rs:96:19
   |
96 |         if output.success {
   |                   ^^^^^^^ unknown field
   |
   = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `message` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:103:33
    |
103 |         result.push_str(&output.message);
    |                                 ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `success` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:123:70
    |
123 |         json_output.insert("success".to_string(), Value::Bool(output.success));
    |                                                                      ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `message` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:126:34
    |
126 |             Value::String(output.message.to_string()),
    |                                  ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `data` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:129:37
    |
129 |         if let Some(data) = &output.data {
    |                                     ^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:141:38
    |
141 |                 Value::Number(output.resource_usage.memory_bytes.into()),
    |                                      ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:145:38
    |
145 |                 Value::Number(output.resource_usage.cpu_time_us.into()),
    |                                      ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:149:38
    |
149 |                 Value::Number(output.resource_usage.network_requests.into()),
    |                                      ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:153:38
    |
153 |                 Value::Number(output.resource_usage.disk_operations.into()),
    |                                      ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `success` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:185:23
    |
185 |             if output.success { "SUCCESS" } else { "FAILED" }
    |                       ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `message` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:189:58
    |
189 |         result.push_str(&format!("Message: {}\n", output.message));
    |                                                          ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `data` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:192:37
    |
192 |         if let Some(data) = &output.data {
    |                                     ^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:210:24
    |
210 |                 output.resource_usage.memory_bytes
    |                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:214:24
    |
214 |                 output.resource_usage.cpu_time_us
    |                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:218:24
    |
218 |                 output.resource_usage.network_requests
    |                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `resource_usage` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:222:24
    |
222 |                 output.resource_usage.disk_operations
    |                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `success` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:245:70
    |
245 |         json_output.insert("success".to_string(), Value::Bool(output.success));
    |                                                                      ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `message` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:248:34
    |
248 |             Value::String(output.message.to_string()),
    |                                  ^^^^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0609]: no field `data` on type `&commands::types::CommandOutput`
   --> packages/domain/src/chat/commands/response.rs:251:37
    |
251 |         if let Some(data) = &output.data {
    |                                     ^^^^ unknown field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`, `execution_time`

error[E0560]: struct `commands::types::CommandOutput` has no field named `success`
   --> packages/domain/src/chat/commands/response.rs:269:13
    |
269 |             success: false,
    |             ^^^^^^^ `commands::types::CommandOutput` does not have this field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`

error[E0560]: struct `commands::types::CommandOutput` has no field named `message`
   --> packages/domain/src/chat/commands/response.rs:270:13
    |
270 |             message: Arc::from(error.to_string()),
    |             ^^^^^^^ `commands::types::CommandOutput` does not have this field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`

error[E0560]: struct `commands::types::CommandOutput` has no field named `data`
   --> packages/domain/src/chat/commands/response.rs:271:13
    |
271 |             data: None,
    |             ^^^^ `commands::types::CommandOutput` does not have this field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`

error[E0560]: struct `commands::types::CommandOutput` has no field named `resource_usage`
   --> packages/domain/src/chat/commands/response.rs:273:13
    |
273 |             resource_usage: ResourceUsage {
    |             ^^^^^^^^^^^^^^ `commands::types::CommandOutput` does not have this field
    |
    = note: available fields are: `execution_id`, `content`, `output_type`, `timestamp_nanos`, `is_final`

error[E0277]: `fluent_ai_async::AsyncStreamSender<CommandEvent>` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/chat/commands/types.rs:470:5
    |
457 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
470 |     event_sender: Option<AsyncStreamSender<CommandEvent>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `fluent_ai_async::AsyncStreamSender<CommandEvent>`
    |
    = help: the trait `std::fmt::Debug` is implemented for `std::option::Option<T>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/types.rs:492:38
    |
492 |         executor.event_sender = Some(sender);
    |                                 ---- ^^^^^^ expected `AsyncStreamSender<CommandEvent>`, found `UnboundedSender<_>`
    |                                 |
    |                                 arguments to this enum variant are incorrect
    |
    = note: expected struct `fluent_ai_async::AsyncStreamSender<CommandEvent>`
               found struct `UnboundedSender<_>`
help: the type constructed contains `UnboundedSender<_>` due to the type of the argument passed
   --> packages/domain/src/chat/commands/types.rs:492:33
    |
492 |         executor.event_sender = Some(sender);
    |                                 ^^^^^------^
    |                                      |
    |                                      this argument influences the type of `Some`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/types.rs:493:20
    |
493 |         (executor, stream)
    |                    ^^^^^^ expected `AsyncStream<CommandEvent>`, found `UnboundedReceiverStream<_>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<CommandEvent>`
               found struct `UnboundedReceiverStream<_>`

error[E0599]: no function or associated item named `parse_template_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:757:41
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_template_command` not found for this struct
...
757 |             "template" | "tpl" => Self::parse_template_command(args),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
757 -             "template" | "tpl" => Self::parse_template_command(args),
757 +             "template" | "tpl" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_macro_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:758:36
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_macro_command` not found for this struct
...
758 |             "macro" | "m" => Self::parse_macro_command(args),
    |                                    ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
758 -             "macro" | "m" => Self::parse_macro_command(args),
758 +             "macro" | "m" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_search_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:759:37
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_search_command` not found for this struct
...
759 |             "search" | "s" => Self::parse_search_command(args),
    |                                     ^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
759 -             "search" | "s" => Self::parse_search_command(args),
759 +             "search" | "s" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_branch_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:760:37
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_branch_command` not found for this struct
...
760 |             "branch" | "b" => Self::parse_branch_command(args),
    |                                     ^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
760 -             "branch" | "b" => Self::parse_branch_command(args),
760 +             "branch" | "b" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_session_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:761:41
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_session_command` not found for this struct
...
761 |             "session" | "sess" => Self::parse_session_command(args),
    |                                         ^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
761 -             "session" | "sess" => Self::parse_session_command(args),
761 +             "session" | "sess" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_tool_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:762:35
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_tool_command` not found for this struct
...
762 |             "tool" | "t" => Self::parse_tool_command(args),
    |                                   ^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
762 -             "tool" | "t" => Self::parse_tool_command(args),
762 +             "tool" | "t" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_stats_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:763:37
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_stats_command` not found for this struct
...
763 |             "stats" | "st" => Self::parse_stats_command(args),
    |                                     ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
763 -             "stats" | "st" => Self::parse_stats_command(args),
763 +             "stats" | "st" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_theme_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:764:37
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_theme_command` not found for this struct
...
764 |             "theme" | "th" => Self::parse_theme_command(args),
    |                                     ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
764 -             "theme" | "th" => Self::parse_theme_command(args),
764 +             "theme" | "th" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_debug_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:765:36
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_debug_command` not found for this struct
...
765 |             "debug" | "d" => Self::parse_debug_command(args),
    |                                    ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
765 -             "debug" | "d" => Self::parse_debug_command(args),
765 +             "debug" | "d" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_history_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:766:41
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_history_command` not found for this struct
...
766 |             "history" | "hist" => Self::parse_history_command(args),
    |                                         ^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
766 -             "history" | "hist" => Self::parse_history_command(args),
766 +             "history" | "hist" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_save_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:767:29
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_save_command` not found for this struct
...
767 |             "save" => Self::parse_save_command(args),
    |                             ^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
767 -             "save" => Self::parse_save_command(args),
767 +             "save" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_load_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:768:29
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_load_command` not found for this struct
...
768 |             "load" => Self::parse_load_command(args),
    |                             ^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
768 -             "load" => Self::parse_load_command(args),
768 +             "load" => Self::parse_command(args),
    |

error[E0599]: no function or associated item named `parse_import_command` found for struct `commands::types::CommandParser` in the current scope
   --> packages/domain/src/chat/commands/types.rs:769:31
    |
726 | pub struct CommandParser;
    | ------------------------ function or associated item `parse_import_command` not found for this struct
...
769 |             "import" => Self::parse_import_command(args),
    |                               ^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `commands::types::CommandParser`
    |
help: there is an associated function `parse_command` with a similar name
    |
769 -             "import" => Self::parse_import_command(args),
769 +             "import" => Self::parse_command(args),
    |

error[E0559]: variant `commands::types::ImmutableChatCommand::Settings` has no field named `reset`
   --> packages/domain/src/chat/commands/types.rs:845:13
    |
845 |             reset,
    |             ^^^^^ `commands::types::ImmutableChatCommand::Settings` does not have this field
    |
    = note: available fields are: `category`

error[E0308]: mismatched types
    --> packages/domain/src/chat/commands/types.rs:1240:9
     |
1179 |     ) -> AsyncStream<CommandOutput> {
     |          -------------------------- expected `fluent_ai_async::AsyncStream<commands::types::CommandOutput>` because of return type
...
1240 |         stream
     |         ^^^^^^ expected `AsyncStream<CommandOutput>`, found `UnboundedReceiverStream<CommandOutput>`
     |
     = note: expected struct `fluent_ai_async::AsyncStream<commands::types::CommandOutput>`
                found struct `UnboundedReceiverStream<commands::types::CommandOutput>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/validation.rs:110:41
    |
110 |                 self.validate_variables(variables)?;
    |                      ------------------ ^^^^^^^^^ expected `&HashMap<Arc<str>, Arc<str>>`, found `&HashMap<String, String>`
    |                      |
    |                      arguments to this method are incorrect
    |
    = note: expected reference `&std::collections::HashMap<Arc<str>, Arc<str>>`
               found reference `&std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/validation.rs:376:8
    |
376 |     fn validate_variables(
    |        ^^^^^^^^^^^^^^^^^^
377 |         &self,
378 |         variables: &HashMap<Arc<str>, Arc<str>>,
    |         ---------------------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/validation.rs:134:41
    |
134 |                 self.validate_tool_args(args)?;
    |                      ------------------ ^^^^ expected `&HashMap<Arc<str>, Arc<str>>`, found `&HashMap<String, String>`
    |                      |
    |                      arguments to this method are incorrect
    |
    = note: expected reference `&std::collections::HashMap<Arc<str>, Arc<str>>`
               found reference `&std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/validation.rs:396:8
    |
396 |     fn validate_tool_args(
    |        ^^^^^^^^^^^^^^^^^^
397 |         &self,
398 |         args: &HashMap<Arc<str>, Arc<str>>,
    |         ----------------------------------

error[E0308]: mismatched types
   --> packages/domain/src/chat/commands/validation.rs:147:48
    |
147 |                 self.validate_theme_properties(properties)?;
    |                      ------------------------- ^^^^^^^^^^ expected `&HashMap<Arc<str>, Arc<str>>`, found `&HashMap<String, String>`
    |                      |
    |                      arguments to this method are incorrect
    |
    = note: expected reference `&std::collections::HashMap<Arc<str>, Arc<str>>`
               found reference `&std::collections::HashMap<std::string::String, std::string::String>`
note: method defined here
   --> packages/domain/src/chat/commands/validation.rs:416:8
    |
416 |     fn validate_theme_properties(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^
417 |         &self,
418 |         properties: &HashMap<Arc<str>, Arc<str>>,
    |         ----------------------------------------

error[E0599]: no method named `wait` found for opaque type `impl Future<Output = Result<CommandOutput, CommandError>>` in the current scope
  --> packages/domain/src/chat/commands/mod.rs:62:20
   |
62 |         match task.wait() {
   |                    ^^^^ method not found in `impl Future<Output = Result<CommandOutput, CommandError>>`

error[E0599]: no method named `wait` found for struct `AsyncTask` in the current scope
  --> packages/domain/src/chat/commands/mod.rs:80:20
   |
80 |         match task.wait() {
   |                    ^^^^ method not found in `AsyncTask<Result<CommandOutput, CommandError>>`

error[E0559]: variant `commands::types::CommandError::ExecutionFailed` has no field named `reason`
  --> packages/domain/src/chat/commands/mod.rs:83:17
   |
83 |                 reason: Arc::from("Parse and execute task closed without result"),
   |                 ^^^^^^ field does not exist
   |
  ::: packages/domain/src/chat/commands/types.rs:24:5
   |
24 |     ExecutionFailed(String),
   |     --------------- `commands::types::CommandError::ExecutionFailed` defined here
   |
help: `commands::types::CommandError::ExecutionFailed` is a tuple variant, use the appropriate syntax
   |
82 -             None => Err(CommandError::ExecutionFailed {
83 -                 reason: Arc::from("Parse and execute task closed without result"),
84 -             }),
82 +             None => Err(CommandError::ExecutionFailed(/* std::string::String */)),
   |

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:236:9
    |
227 |     pub fn validate(&self) -> AsyncStream<()> {
    |                               --------------- expected `fluent_ai_async::AsyncStream<()>` because of return type
...
236 |         stream
    |         ^^^^^^ expected `AsyncStream<()>`, found `UnboundedReceiverStream<()>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<()>`
               found struct `UnboundedReceiverStream<()>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:910:9
    |
865 |     pub fn update_config(&self, new_config: ChatConfig) -> AsyncStream<()> {
    |                                                            --------------- expected `fluent_ai_async::AsyncStream<()>` because of return type
...
910 |         stream
    |         ^^^^^^ expected `AsyncStream<()>`, found `UnboundedReceiverStream<()>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<()>`
               found struct `UnboundedReceiverStream<()>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:987:9
    |
914 |     pub fn update_section<F>(&self, section: &str, updater: F) -> AsyncStream<()>
    |                                                                   --------------- expected `fluent_ai_async::AsyncStream<()>` because of return type
...
987 |         stream
    |         ^^^^^^ expected `AsyncStream<()>`, found `UnboundedReceiverStream<()>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<()>`
               found struct `UnboundedReceiverStream<()>`

error[E0308]: mismatched types
    --> packages/domain/src/chat/config.rs:1050:9
     |
1041 |     pub fn save_to_file(&self) -> AsyncStream<()> {
     |                                   --------------- expected `fluent_ai_async::AsyncStream<()>` because of return type
...
1050 |         stream
     |         ^^^^^^ expected `AsyncStream<()>`, found `UnboundedReceiverStream<()>`
     |
     = note: expected struct `fluent_ai_async::AsyncStream<()>`
                found struct `UnboundedReceiverStream<()>`

error[E0308]: mismatched types
    --> packages/domain/src/chat/config.rs:1108:9
     |
1099 |     pub fn load_from_file(&self) -> AsyncStream<()> {
     |                                     --------------- expected `fluent_ai_async::AsyncStream<()>` because of return type
...
1108 |         stream
     |         ^^^^^^ expected `AsyncStream<()>`, found `UnboundedReceiverStream<()>`
     |
     = note: expected struct `fluent_ai_async::AsyncStream<()>`
                found struct `UnboundedReceiverStream<()>`

error[E0277]: `fluent_ai_async::AsyncStreamSender<ConversationEvent>` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/chat/conversation/mod.rs:131:5
    |
116 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
131 |     event_sender: Option<AsyncStreamSender<ConversationEvent>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `fluent_ai_async::AsyncStreamSender<ConversationEvent>`
    |
    = help: the trait `std::fmt::Debug` is implemented for `std::option::Option<T>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/conversation/mod.rs:154:42
    |
154 |         conversation.event_sender = Some(sender);
    |                                     ---- ^^^^^^ expected `AsyncStreamSender<ConversationEvent>`, found `UnboundedSender<_>`
    |                                     |
    |                                     arguments to this enum variant are incorrect
    |
    = note: expected struct `fluent_ai_async::AsyncStreamSender<ConversationEvent>`
               found struct `UnboundedSender<_>`
help: the type constructed contains `UnboundedSender<_>` due to the type of the argument passed
   --> packages/domain/src/chat/conversation/mod.rs:154:37
    |
154 |         conversation.event_sender = Some(sender);
    |                                     ^^^^^------^
    |                                          |
    |                                          this argument influences the type of `Some`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^

error[E0308]: mismatched types
   --> packages/domain/src/chat/conversation/mod.rs:155:24
    |
155 |         (conversation, stream)
    |                        ^^^^^^ expected `AsyncStream<ConversationEvent>`, found `UnboundedReceiverStream<_>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<ConversationEvent>`
               found struct `UnboundedReceiverStream<_>`

error[E0599]: no method named `elapsed` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:234:54
    |
234 |                 let elapsed_secs = message.timestamp.elapsed().as_secs();
    |                                                      ^^^^^^^ method not found in `std::option::Option<u64>`

error[E0609]: no field `message_type` on type `&message::types::Message`
   --> packages/domain/src/chat/export.rs:238:68
    |
238 |             output.push_str(&format!("**Type:** {:?}\n\n", message.message_type));
    |                                                                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `role`, `content`, `id`, `timestamp`

error[E0308]: mismatched types
   --> packages/domain/src/chat/export.rs:239:51
    |
239 |             let content_str = std::str::from_utf8(&message.content).unwrap_or("<invalid utf8>");
    |                               ------------------- ^^^^^^^^^^^^^^^^ expected `&[u8]`, found `&String`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
               found reference `&std::string::String`
note: function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/str/converts.rs:89:14
    |
89  | pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {
    |              ^^^^^^^^^

error[E0599]: no method named `elapsed` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:256:54
    |
256 |                 let elapsed_secs = message.timestamp.elapsed().as_secs();
    |                                                      ^^^^^^^ method not found in `std::option::Option<u64>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/export.rs:260:51
    |
260 |             let content_str = std::str::from_utf8(&message.content).unwrap_or("<invalid utf8>");
    |                               ------------------- ^^^^^^^^^^^^^^^^ expected `&[u8]`, found `&String`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
               found reference `&std::string::String`
note: function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/str/converts.rs:89:14
    |
89  | pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {
    |              ^^^^^^^^^

error[E0609]: no field `message_type` on type `&message::types::Message`
   --> packages/domain/src/chat/export.rs:261:60
    |
261 |             output.push_str(&format!("{:?}: {}\n", message.message_type, content_str));
    |                                                            ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `role`, `content`, `id`, `timestamp`

error[E0599]: no method named `elapsed` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:283:54
    |
283 |                 let elapsed_secs = message.timestamp.elapsed().as_secs();
    |                                                      ^^^^^^^ method not found in `std::option::Option<u64>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/export.rs:288:51
    |
288 |             let content_str = std::str::from_utf8(&message.content).unwrap_or("<invalid utf8>");
    |                               ------------------- ^^^^^^^^^^^^^^^^ expected `&[u8]`, found `&String`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
               found reference `&std::string::String`
note: function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/str/converts.rs:89:14
    |
89  | pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {
    |              ^^^^^^^^^

error[E0609]: no field `message_type` on type `&message::types::Message`
   --> packages/domain/src/chat/export.rs:292:25
    |
292 |                 message.message_type, escaped_content
    |                         ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `role`, `content`, `id`, `timestamp`

error[E0599]: no method named `duration_since` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:374:18
    |
372 |               let timestamp_str = message
    |  _________________________________-
373 | |                 .timestamp
374 | |                 .duration_since(std::time::UNIX_EPOCH)
    | |                 -^^^^^^^^^^^^^^ method not found in `std::option::Option<u64>`
    | |_________________|
    |

error[E0599]: no method named `duration_since` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:403:18
    |
401 |               let timestamp_str = message
    |  _________________________________-
402 | |                 .timestamp
403 | |                 .duration_since(std::time::UNIX_EPOCH)
    | |                 -^^^^^^^^^^^^^^ method not found in `std::option::Option<u64>`
    | |_________________|
    |

error[E0599]: no method named `duration_since` found for enum `std::option::Option` in the current scope
   --> packages/domain/src/chat/export.rs:439:18
    |
437 |               let timestamp_str = message
    |  _________________________________-
438 | |                 .timestamp
439 | |                 .duration_since(std::time::UNIX_EPOCH)
    | |                 -^^^^^^^^^^^^^^ method not found in `std::option::Option<u64>`
    | |_________________|
    |

error[E0277]: `fluent_ai_async::AsyncStreamSender<FormattingEvent>` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/chat/formatting.rs:642:5
    |
629 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
642 |     event_sender: Option<AsyncStreamSender<FormattingEvent>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `fluent_ai_async::AsyncStreamSender<FormattingEvent>`
    |
    = help: the trait `std::fmt::Debug` is implemented for `std::option::Option<T>`

error[E0308]: mismatched types
  --> packages/domain/src/chat/message/message_processing.rs:33:5
   |
20 | pub fn process_message(message: Message) -> AsyncStream<Message> {
   |                                             -------------------- expected `fluent_ai_async::AsyncStream<message::types::Message>` because of return type
...
33 |     stream
   |     ^^^^^^ expected `AsyncStream<Message>`, found `UnboundedReceiverStream<Message>`
   |
   = note: expected struct `fluent_ai_async::AsyncStream<message::types::Message>`
              found struct `UnboundedReceiverStream<message::types::Message>`

error[E0308]: mismatched types
  --> packages/domain/src/chat/message/message_processing.rs:52:5
   |
44 | pub fn validate_message(message: Message) -> AsyncStream<Message> {
   |                                              -------------------- expected `fluent_ai_async::AsyncStream<message::types::Message>` because of return type
...
52 |     stream
   |     ^^^^^^ expected `AsyncStream<Message>`, found `UnboundedReceiverStream<Message>`
   |
   = note: expected struct `fluent_ai_async::AsyncStream<message::types::Message>`
              found struct `UnboundedReceiverStream<message::types::Message>`

error[E0223]: ambiguous associated type
  --> packages/domain/src/chat/message/message_processing.rs:78:9
   |
78 |         Message::User { content } => {
   |         ^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `User` implemented for `message::types::Message`, you could use the fully-qualified path
   |
78 -         Message::User { content } => {
78 +         <message::types::Message as Example>::User { content } => {
   |

error[E0223]: ambiguous associated type
  --> packages/domain/src/chat/message/message_processing.rs:83:9
   |
83 |         Message::Assistant { content } => {
   |         ^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `Assistant` implemented for `message::types::Message`, you could use the fully-qualified path
   |
83 -         Message::Assistant { content } => {
83 +         <message::types::Message as Example>::Assistant { content } => {
   |

error[E0277]: the trait bound `Arc<str>: Borrow<std::string::String>` is not satisfied
   --> packages/domain/src/chat/realtime.rs:279:75
    |
279 |         let typing_state = if let Some(existing) = self.typing_states.get(&key) {
    |                                                                       --- ^^^^ the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
    |                                                                       |
    |                                                                       required by a bound introduced by this call
    |
    = help: the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
            but trait `Borrow<str>` is implemented for it
    = help: for that trait implementation, expected `str`, found `std::string::String`
note: required by a bound in `SkipMap::<K, V>::get`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-skiplist-0.1.3/src/map.rs:160:12
    |
158 |     pub fn get<Q>(&self, key: &Q) -> Option<Entry<'_, K, V>>
    |            --- required by a bound in this associated function
159 |     where
160 |         K: Borrow<Q>,
    |            ^^^^^^^^^ required by this bound in `SkipMap::<K, V>::get`

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:283:39
    |
283 |             self.typing_states.insert(key, new_state.clone());
    |                                ------ ^^^ expected `Arc<str>`, found `String`
    |                                |
    |                                arguments to this method are incorrect
    |
    = note: expected struct `Arc<str>`
               found struct `std::string::String`
help: the return type of this call is `std::string::String` due to the type of the argument passed
   --> packages/domain/src/chat/realtime.rs:283:13
    |
283 |             self.typing_states.insert(key, new_state.clone());
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^---^^^^^^^^^^^^^^^^^^^^
    |                                       |
    |                                       this argument influences the return type of `insert`
note: method defined here
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-skiplist-0.1.3/src/map.rs:372:12
    |
372 |     pub fn insert(&self, key: K, value: V) -> Entry<'_, K, V> {
    |            ^^^^^^
help: call `Into::into` on this expression to convert `std::string::String` into `Arc<str>`
    |
283 |             self.typing_states.insert(key.into(), new_state.clone());
    |                                          +++++++

error[E0277]: the trait bound `Arc<str>: Borrow<std::string::String>` is not satisfied
   --> packages/domain/src/chat/realtime.rs:314:60
    |
314 |         if let Some(typing_state) = self.typing_states.get(&key) {
    |                                                        --- ^^^^ the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
    |                                                        |
    |                                                        required by a bound introduced by this call
    |
    = help: the trait `Borrow<std::string::String>` is not implemented for `Arc<str>`
            but trait `Borrow<str>` is implemented for it
    = help: for that trait implementation, expected `str`, found `std::string::String`
note: required by a bound in `SkipMap::<K, V>::get`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-skiplist-0.1.3/src/map.rs:160:12
    |
158 |     pub fn get<Q>(&self, key: &Q) -> Option<Entry<'_, K, V>>
    |            --- required by a bound in this associated function
159 |     where
160 |         K: Borrow<Q>,
    |            ^^^^^^^^^ required by this bound in `SkipMap::<K, V>::get`

error[E0308]: arguments to this function are incorrect
   --> packages/domain/src/chat/realtime.rs:923:41
    |
923 |         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.clone()));
    |                                         ^^^^^^^^^^^^^^^^^^^^
    |
note: expected `String`, found `Arc<str>`
   --> packages/domain/src/chat/realtime.rs:923:62
    |
923 |         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.clone()));
    |                                                              ^^^^^^^^^^^^^^^
    = note: expected struct `std::string::String`
               found struct `Arc<str>`
note: expected `String`, found `Arc<str>`
   --> packages/domain/src/chat/realtime.rs:923:79
    |
923 |         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.clone()));
    |                                                                               ^^^^^^^^^^^^^^^^^^
    = note: expected struct `std::string::String`
               found struct `Arc<str>`
note: associated function defined here
   --> packages/domain/src/chat/realtime.rs:753:12
    |
753 |     pub fn new(user_id: String, session_id: String) -> Self {
    |            ^^^ ---------------  ------------------
help: try using a conversion method
    |
923 -         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.clone()));
923 +         let connection_state = Arc::new(ConnectionState::new(user_id.to_string(), session_id.clone()));
    |
help: try using a conversion method
    |
923 -         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.clone()));
923 +         let connection_state = Arc::new(ConnectionState::new(user_id.clone(), session_id.to_string()));
    |

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:930:13
    |
930 |             user_id,
    |             ^^^^^^^ expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`
help: try using a conversion method
    |
930 |             user_id: user_id.to_string(),
    |             ++++++++        ++++++++++++

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:931:13
    |
931 |             session_id,
    |             ^^^^^^^^^^ expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`
help: try using a conversion method
    |
931 |             session_id: session_id.to_string(),
    |             +++++++++++           ++++++++++++

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:963:26
    |
963 |                 user_id: user_id.clone(),
    |                          ^^^^^^^^-----^^
    |                          |       |
    |                          |       help: try using a conversion method: `to_string`
    |                          expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:964:29
    |
964 |                 session_id: session_id.clone(),
    |                             ^^^^^^^^^^^-----^^
    |                             |          |
    |                             |          help: try using a conversion method: `to_string`
    |                             expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:991:26
    |
991 |                 user_id: user_id.clone(),
    |                          ^^^^^^^^-----^^
    |                          |       |
    |                          |       help: try using a conversion method: `to_string`
    |                          expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`

error[E0308]: mismatched types
   --> packages/domain/src/chat/realtime.rs:992:29
    |
992 |                 session_id: session_id.clone(),
    |                             ^^^^^^^^^^^-----^^
    |                             |          |
    |                             |          help: try using a conversion method: `to_string`
    |                             expected `String`, found `Arc<str>`
    |
    = note: expected struct `std::string::String`
               found struct `Arc<str>`

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:672:32
    |
672 |             .map(|r| r.message.timestamp.to_string())
    |                                ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
672 |             .map(|r| r.message.message.timestamp.to_string())
    |                                ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:676:46
    |
676 |             if ids2.contains(&result.message.timestamp.to_string()) {
    |                                              ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
676 |             if ids2.contains(&result.message.message.timestamp.to_string()) {
    |                                              ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:777:50
    |
777 |                 results.sort_by(|a, b| b.message.timestamp.cmp(&a.message.timestamp));
    |                                                  ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
777 |                 results.sort_by(|a, b| b.message.message.timestamp.cmp(&a.message.timestamp));
    |                                                  ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:777:75
    |
777 |                 results.sort_by(|a, b| b.message.timestamp.cmp(&a.message.timestamp));
    |                                                                           ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
777 |                 results.sort_by(|a, b| b.message.timestamp.cmp(&a.message.message.timestamp));
    |                                                                           ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:780:50
    |
780 |                 results.sort_by(|a, b| a.message.timestamp.cmp(&b.message.timestamp));
    |                                                  ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
780 |                 results.sort_by(|a, b| a.message.message.timestamp.cmp(&b.message.timestamp));
    |                                                  ++++++++

error[E0609]: no field `timestamp` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:780:75
    |
780 |                 results.sort_by(|a, b| a.message.timestamp.cmp(&b.message.timestamp));
    |                                                                           ^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
780 |                 results.sort_by(|a, b| a.message.timestamp.cmp(&b.message.message.timestamp));
    |                                                                           ++++++++

error[E0609]: no field `role` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:783:50
    |
783 |                 results.sort_by(|a, b| a.message.role.cmp(&b.message.role));
    |                                                  ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
783 |                 results.sort_by(|a, b| a.message.message.role.cmp(&b.message.role));
    |                                                  ++++++++

error[E0609]: no field `role` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:783:70
    |
783 |                 results.sort_by(|a, b| a.message.role.cmp(&b.message.role));
    |                                                                      ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
783 |                 results.sort_by(|a, b| a.message.role.cmp(&b.message.message.role));
    |                                                                      ++++++++

error[E0609]: no field `role` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:786:50
    |
786 |                 results.sort_by(|a, b| b.message.role.cmp(&a.message.role));
    |                                                  ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
786 |                 results.sort_by(|a, b| b.message.message.role.cmp(&a.message.role));
    |                                                  ++++++++

error[E0609]: no field `role` on type `SearchChatMessage`
   --> packages/domain/src/chat/search.rs:786:70
    |
786 |                 results.sort_by(|a, b| b.message.role.cmp(&a.message.role));
    |                                                                      ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
786 |                 results.sort_by(|a, b| b.message.role.cmp(&a.message.message.role));
    |                                                                      ++++++++

error[E0599]: no function or associated item named `uninit_array` found for union `MaybeUninit` in the current scope
   --> packages/domain/src/completion/candle.rs:460:79
    |
460 |     let mut buffer: [std::mem::MaybeUninit<T>; 1024] = std::mem::MaybeUninit::uninit_array();
    |                                                                               ^^^^^^^^^^^^ function or associated item not found in `MaybeUninit<_>`
    |
note: if you're trying to build a new `MaybeUninit<_>` consider using one of the following associated functions:
      MaybeUninit::<T>::new
      MaybeUninit::<T>::uninit
      MaybeUninit::<T>::zeroed
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/maybe_uninit.rs:307:5
    |
307 |     pub const fn new(val: T) -> MaybeUninit<T> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
330 |     pub const fn uninit() -> MaybeUninit<T> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
380 |     pub const fn zeroed() -> MaybeUninit<T> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `uninit` with a similar name
    |
460 -     let mut buffer: [std::mem::MaybeUninit<T>; 1024] = std::mem::MaybeUninit::uninit_array();
460 +     let mut buffer: [std::mem::MaybeUninit<T>; 1024] = std::mem::MaybeUninit::uninit();
    |

error[E0308]: mismatched types
   --> packages/domain/src/concurrency/mod.rs:110:24
    |
104 | impl<F, T> IntoTask<T> for F
    |      - found this type parameter
...
110 |         AsyncTask::new(self)
    |         -------------- ^^^^ expected `Receiver<T>`, found type parameter `F`
    |         |
    |         arguments to this function are incorrect
    |
    = note:      expected struct `crossbeam::crossbeam_channel::Receiver<T>`
            found type parameter `F`
note: associated function defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/task.rs:22:12
    |
22  |     pub fn new(rx: Receiver<T>) -> Self {
    |            ^^^

error[E0599]: no function or associated item named `spawn` found for struct `fluent_ai_async::AsyncTask` in the current scope
  --> packages/domain/src/context/extraction/extractor.rs:71:20
   |
71 |         AsyncTask::spawn(async move {
   |                    ^^^^^ function or associated item not found in `fluent_ai_async::AsyncTask<_>`
   |
note: if you're trying to build a new `fluent_ai_async::AsyncTask<_>` consider using one of the following associated functions:
      fluent_ai_async::AsyncTask::<T>::new
      fluent_ai_async::AsyncTask::<T>::from_value
  --> /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/task.rs:22:5
   |
22 |     pub fn new(rx: Receiver<T>) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
28 |     pub fn from_value(value: T) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `new` found for struct `completion::request::CompletionRequest` in the current scope
  --> packages/domain/src/context/extraction/extractor.rs:81:57
   |
81 |             let completion_request = CompletionRequest::new()
   |                                                         ^^^ function or associated item not found in `completion::request::CompletionRequest<'_>`
   |
  ::: packages/domain/src/completion/request.rs:21:1
   |
21 | pub struct CompletionRequest<'a> {
   | -------------------------------- function or associated item `new` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `new`, perhaps you need to implement one of them:
           candidate #1: `AgentRole`
           candidate #2: `Conversation`
           candidate #3: `Extractor`
           candidate #4: `Loader`
           candidate #5: `McpTool`
           candidate #6: `HashMapExt`
           candidate #7: `HashSetExt`
           candidate #8: `aws_lc_rs::aead::BoundKey`
           candidate #9: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
           candidate #10: `brotli::enc::threading::AnyBoxConstructor`
           candidate #11: `crypto_common::KeyInit`
           candidate #12: `crypto_common::KeyIvInit`
           candidate #13: `digest::VariableOutput`
           candidate #14: `digest::core_api::VariableOutputCore`
           candidate #15: `digest::digest::Digest`
           candidate #16: `digest::mac::Mac`
           candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
           candidate #18: `rand::distr::uniform::UniformSampler`
           candidate #19: `ring::aead::BoundKey`
           candidate #20: `typenum::marker_traits::Bit`

error[E0599]: no function or associated item named `new` found for struct `completion::request::CompletionRequest` in the current scope
   --> packages/domain/src/context/extraction/extractor.rs:185:50
    |
185 |             let mut request = CompletionRequest::new()
    |                                                  ^^^ function or associated item not found in `completion::request::CompletionRequest<'_>`
    |
   ::: packages/domain/src/completion/request.rs:21:1
    |
21  | pub struct CompletionRequest<'a> {
    | -------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `AgentRole`
            candidate #2: `Conversation`
            candidate #3: `Extractor`
            candidate #4: `Loader`
            candidate #5: `McpTool`
            candidate #6: `HashMapExt`
            candidate #7: `HashSetExt`
            candidate #8: `aws_lc_rs::aead::BoundKey`
            candidate #9: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
            candidate #10: `brotli::enc::threading::AnyBoxConstructor`
            candidate #11: `crypto_common::KeyInit`
            candidate #12: `crypto_common::KeyIvInit`
            candidate #13: `digest::VariableOutput`
            candidate #14: `digest::core_api::VariableOutputCore`
            candidate #15: `digest::digest::Digest`
            candidate #16: `digest::mac::Mac`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `rand::distr::uniform::UniformSampler`
            candidate #19: `ring::aead::BoundKey`
            candidate #20: `typenum::marker_traits::Bit`

error[E0599]: `prompt::Prompt` doesn't implement `std::fmt::Display`
    --> packages/domain/src/context/extraction/extractor.rs:186:37
     |
186  |                 .with_prompt(prompt.to_string())
     |                                     ^^^^^^^^^ method cannot be called on `prompt::Prompt` due to unsatisfied trait bounds
     |
    ::: packages/domain/src/prompt/mod.rs:6:1
     |
6    | pub struct Prompt {
     | ----------------- method `to_string` not found for this struct because it doesn't satisfy `prompt::Prompt: ToString` or `prompt::Prompt: std::fmt::Display`
     |
     = note: the following trait bounds were not satisfied:
             `prompt::Prompt: std::fmt::Display`
             which is required by `prompt::Prompt: ToString`
note: the trait `std::fmt::Display` must be implemented
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:1003:1
     |
1003 | pub trait Display: PointeeSized {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `to_string`, perhaps you need to implement it:
             candidate #1: `ToString`

error[E0599]: no method named `complete_stream` found for struct `agent::core::Agent` in the current scope
   --> packages/domain/src/context/extraction/extractor.rs:189:42
    |
189 |             let mut stream = match agent.complete_stream(&request).await {
    |                                          ^^^^^^^^^^^^^^^ method not found in `agent::core::Agent`
    |
   ::: packages/domain/src/agent/core.rs:45:1
    |
45  | pub struct Agent {
    | ---------------- method `complete_stream` not found for this struct

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
   --> packages/domain/src/context/provider.rs:223:5
    |
214 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
223 |     pub memory_requests: AtomicU64,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
   --> packages/domain/src/context/provider.rs:224:5
    |
214 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
224 |     pub successful_operations: AtomicU64,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
   --> packages/domain/src/context/provider.rs:225:5
    |
214 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
225 |     pub failed_operations: AtomicU64,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
   --> packages/domain/src/context/provider.rs:226:5
    |
214 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
226 |     pub total_processing_time_nanos: AtomicU64,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0308]: mismatched types
   --> packages/domain/src/context/provider.rs:403:9
    |
399 |       ) -> AsyncStream<Result<Document, ContextError>> {
    |            ------------------------------------------- expected `UnboundedReceiverStream<std::result::Result<context::document::Document, ContextError>>` because of return type
...
403 | /         spawn_stream(move |sender| {
404 | |             let start_time = SystemTime::now();
...   |
462 | |         })
    | |__________^ expected `UnboundedReceiverStream<...>`, found `AsyncStream<Result<Document, ...>>`
    |
    = note: expected struct `UnboundedReceiverStream<std::result::Result<context::document::Document, ContextError>>`
               found struct `fluent_ai_async::AsyncStream<std::result::Result<context::document::Document, ContextError>>`

error[E0560]: struct `context::document::Document` has no field named `id`
   --> packages/domain/src/context/provider.rs:489:13
    |
489 |             id: Uuid::new_v4().to_string(),
    |             ^^ `context::document::Document` does not have this field
    |
    = note: available fields are: `data`, `format`, `media_type`, `additional_props`

error[E0560]: struct `context::document::Document` has no field named `content`
   --> packages/domain/src/context/provider.rs:490:13
    |
490 |             content: format!("Content from file: {}", context.path),
    |             ^^^^^^^ `context::document::Document` does not have this field
    |
    = note: available fields are: `data`, `format`, `media_type`, `additional_props`

error[E0560]: struct `context::document::Document` has no field named `metadata`
   --> packages/domain/src/context/provider.rs:491:13
    |
491 |             metadata: {
    |             ^^^^^^^^ `context::document::Document` does not have this field
    |
    = note: available fields are: `data`, `format`, `media_type`, `additional_props`

error[E0560]: struct `context::document::Document` has no field named `embedding`
   --> packages/domain/src/context/provider.rs:498:13
    |
498 |             embedding: None,
    |             ^^^^^^^^^ `context::document::Document` does not have this field
    |
    = note: available fields are: `data`, `format`, `media_type`, `additional_props`

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/context/provider.rs:660:52
    |
660 |                     let documents = ZeroOneOrMany::Zero; // Placeholder
    |                                                    ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/context/provider.rs:700:52
    |
700 |                     let documents = ZeroOneOrMany::Zero; // Placeholder
    |                                                    ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/context/provider.rs:740:52
    |
740 |                     let documents = ZeroOneOrMany::Zero; // Placeholder
    |                                                    ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0308]: mismatched types
  --> packages/domain/src/core/mod.rs:70:24
   |
70 |         AsyncTask::new(async move { rx.await.map_err(|_| ChannelError::ReceiveError) }),
   |         -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Receiver<Result<T, ChannelError>>`, found `async` block
   |         |
   |         arguments to this function are incorrect
   |
   = note:     expected struct `crossbeam::crossbeam_channel::Receiver<std::result::Result<T, ChannelError>>`
           found `async` block `{async block@packages/domain/src/core/mod.rs:70:24: 70:34}`
note: associated function defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/async_task/task.rs:25:12
   |
25 |     pub fn new(rx: Receiver<T>) -> Self {
   |            ^^^

error[E0277]: `T` cannot be sent between threads safely
   --> packages/domain/src/core/mod.rs:70:24
    |
70  |         AsyncTask::new(async move { rx.await.map_err(|_| ChannelError::ReceiveError) }),
    |         -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely
    |         |
    |         required by a bound introduced by this call
    |
note: required because it appears within the type `std::result::Result<T, ChannelError>`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^
note: required by a bound in `fluent_ai_http3::async_task::AsyncTask::<T>::new`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/async_task/task.rs:21:8
    |
21  |     T: Send + 'static,
    |        ^^^^ required by this bound in `AsyncTask::<T>::new`
...
25  |     pub fn new(rx: Receiver<T>) -> Self {
    |            --- required by a bound in this associated function
help: consider restricting type parameter `T` with trait `Send`
    |
63  | pub fn channel<T: std::marker::Send>() -> (
    |                 +++++++++++++++++++

error[E0308]: mismatched types
  --> packages/domain/src/embedding/core.rs:33:13
   |
32 |         match result {
   |               ------ this expression has type `ZeroOneOrMany<f32>`
33 |             Ok(embedding) => {
   |             ^^^^^^^^^^^^^ expected `ZeroOneOrMany<f32>`, found `Result<_, _>`
   |
   = note: expected enum `ZeroOneOrMany<f32>`
              found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
  --> packages/domain/src/embedding/core.rs:37:13
   |
32 |         match result {
   |               ------ this expression has type `ZeroOneOrMany<f32>`
...
37 |             Err(_) => {
   |             ^^^^^^ expected `ZeroOneOrMany<f32>`, found `Result<_, _>`
   |
   = note: expected enum `ZeroOneOrMany<f32>`
              found enum `std::result::Result<_, _>`

error[E0277]: expected a `FnOnce()` closure, found `{async block@packages/domain/src/engine.rs:312:31: 312:41}`
   --> packages/domain/src/engine.rs:312:31
    |
312 |             return spawn_task(async move { Err(e) });
    |                    ---------- ^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce()` closure, found `{async block@packages/domain/src/engine.rs:312:31: 312:41}`
    |                    |
    |                    required by a bound introduced by this call
    |
    = help: the trait `FnOnce()` is not implemented for `{async block@packages/domain/src/engine.rs:312:31: 312:41}`
    = note: wrap the `{async block@packages/domain/src/engine.rs:312:31: 312:41}` in a closure with no arguments: `|| { /* code */ }`
note: required by a bound in `spawn_task`
   --> /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/task.rs:67:8
    |
65  | pub fn spawn_task<F, T>(f: F) -> AsyncTask<T>
    |        ---------- required by a bound in this function
66  | where
67  |     F: FnOnce() -> T + Send + 'static,
    |        ^^^^^^^^^^^^^ required by this bound in `spawn_task`

error[E0277]: expected a `FnOnce()` closure, found `{async block@packages/domain/src/engine.rs:345:20: 345:30}`
   --> packages/domain/src/engine.rs:345:20
    |
345 |           spawn_task(async move {
    |  _________----------_^
    | |         |
    | |         required by a bound introduced by this call
346 | |             let result = Self::execute_completion(
347 | |                 request_id,
348 | |                 model_name,
...   |
376 | |             result
377 | |         })
    | |_________^ expected an `FnOnce()` closure, found `{async block@packages/domain/src/engine.rs:345:20: 345:30}`
    |
    = help: the trait `FnOnce()` is not implemented for `{async block@packages/domain/src/engine.rs:345:20: 345:30}`
    = note: wrap the `{async block@packages/domain/src/engine.rs:345:20: 345:30}` in a closure with no arguments: `|| { /* code */ }`
note: required by a bound in `spawn_task`
   --> /Volumes/samsung_t9/fluent-ai/packages/fluent-ai-async/src/task.rs:67:8
    |
65  | pub fn spawn_task<F, T>(f: F) -> AsyncTask<T>
    |        ---------- required by a bound in this function
66  | where
67  |     F: FnOnce() -> T + Send + 'static,
    |        ^^^^^^^^^^^^^ required by this bound in `spawn_task`

error[E0277]: the trait bound `PersonalityConfig: Serialize` is not satisfied
    --> packages/domain/src/chat/config.rs:241:33
     |
241  |   #[derive(Debug, Clone, Default, Serialize, Deserialize)]
     |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `PersonalityConfig`
...
260  | /     /// Personality configuration
261  | |     pub personality: PersonalityConfig,
     | |______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `PersonalityConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 472 others
note: required by a bound in `engine::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `BehaviorConfig: Serialize` is not satisfied
    --> packages/domain/src/chat/config.rs:241:33
     |
241  |   #[derive(Debug, Clone, Default, Serialize, Deserialize)]
     |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `BehaviorConfig`
...
262  | /     /// Behavior configuration
263  | |     pub behavior: BehaviorConfig,
     | |________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `BehaviorConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 472 others
note: required by a bound in `engine::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/domain/src/memory/manager.rs:432:9
    |
407 |     pub fn new(config: MemoryConfig) -> AsyncStream<Self> {
    |                                         ----------------- expected `fluent_ai_async::AsyncStream<Memory>` because of return type
...
432 |         stream
    |         ^^^^^^ expected `AsyncStream<Memory>`, found `UnboundedReceiverStream<Memory>`
    |
    = note: expected struct `fluent_ai_async::AsyncStream<Memory>`
               found struct `UnboundedReceiverStream<Memory>`

error[E0277]: the trait bound `UIConfig: Serialize` is not satisfied
    --> packages/domain/src/chat/config.rs:241:33
     |
241  |   #[derive(Debug, Clone, Default, Serialize, Deserialize)]
     |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `UIConfig`
...
264  | /     /// UI configuration
265  | |     pub ui: UIConfig,
     | |____________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `UIConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 472 others
note: required by a bound in `engine::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `chat::config::IntegrationConfig: Serialize` is not satisfied
    --> packages/domain/src/chat/config.rs:241:33
     |
241  |   #[derive(Debug, Clone, Default, Serialize, Deserialize)]
     |                                   ^^^^^^^^^ the trait `Serialize` is not implemented for `chat::config::IntegrationConfig`
...
266  | /     /// Integration configuration
267  | |     pub integration: IntegrationConfig,
     | |______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `chat::config::IntegrationConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 472 others
note: required by a bound in `engine::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `PersonalityConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:261:22
     |
261  |     pub personality: PersonalityConfig,
     |                      ^^^^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `PersonalityConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PersonalityConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `BehaviorConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:263:19
     |
263  |     pub behavior: BehaviorConfig,
     |                   ^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `BehaviorConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `BehaviorConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `UIConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:265:13
     |
265  |     pub ui: UIConfig,
     |             ^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `UIConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `UIConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `chat::config::IntegrationConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:267:22
     |
267  |     pub integration: IntegrationConfig,
     |                      ^^^^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `chat::config::IntegrationConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `chat::config::IntegrationConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `PersonalityConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:261:22
     |
261  |     pub personality: PersonalityConfig,
     |                      ^^^^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `PersonalityConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PersonalityConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `BehaviorConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:263:19
     |
263  |     pub behavior: BehaviorConfig,
     |                   ^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `BehaviorConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `BehaviorConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `UIConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:265:13
     |
265  |     pub ui: UIConfig,
     |             ^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `UIConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `UIConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `chat::config::IntegrationConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/config.rs:267:22
     |
267  |     pub integration: IntegrationConfig,
     |                      ^^^^^^^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `chat::config::IntegrationConfig`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `chat::config::IntegrationConfig` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
               `&'a str` implements `engine::_::_serde::Deserialize<'de>`
               `()` implements `engine::_::_serde::Deserialize<'de>`
               `(T,)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
             and 489 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `PersonalityConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/config.rs:241:44
    |
241 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
    |                                            ^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `PersonalityConfig`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `PersonalityConfig` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
              `&'a str` implements `engine::_::_serde::Deserialize<'de>`
              `()` implements `engine::_::_serde::Deserialize<'de>`
              `(T,)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
            and 489 others
note: required by a bound in `engine::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `BehaviorConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/config.rs:241:44
    |
241 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
    |                                            ^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `BehaviorConfig`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `BehaviorConfig` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
              `&'a str` implements `engine::_::_serde::Deserialize<'de>`
              `()` implements `engine::_::_serde::Deserialize<'de>`
              `(T,)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
            and 489 others
note: required by a bound in `engine::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `UIConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/config.rs:241:44
    |
241 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
    |                                            ^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `UIConfig`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `UIConfig` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
              `&'a str` implements `engine::_::_serde::Deserialize<'de>`
              `()` implements `engine::_::_serde::Deserialize<'de>`
              `(T,)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
            and 489 others
note: required by a bound in `engine::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `chat::config::IntegrationConfig: engine::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/config.rs:241:44
    |
241 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
    |                                            ^^^^^^^^^^^ the trait `engine::_::_serde::Deserialize<'_>` is not implemented for `chat::config::IntegrationConfig`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `chat::config::IntegrationConfig` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `engine::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `engine::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `engine::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `engine::_::_serde::Deserialize<'de>`
              `&'a str` implements `engine::_::_serde::Deserialize<'de>`
              `()` implements `engine::_::_serde::Deserialize<'de>`
              `(T,)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `engine::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `engine::_::_serde::Deserialize<'de>`
            and 489 others
note: required by a bound in `engine::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0521]: borrowed data escapes outside of method
   --> packages/domain/src/completion/request.rs:169:9
    |
126 |   impl<'a> CompletionRequestBuilder<'a> {
    |        -- lifetime `'a` defined here
...
166 |       pub fn temperature(self, temp: f64) -> AsyncStream<Self> {
    |                          ---- `self` is a reference that is only valid in the method body
...
169 | /         tokio::spawn(async move {
170 | |             let mut builder = self;
171 | |             if TEMPERATURE_RANGE.contains(&temp) {
172 | |                 builder.temperature = temp;
...   |
178 | |         });
    | |          ^
    | |          |
    | |__________`self` escapes the method body here
    |            argument requires that `'a` must outlive `'static`

error[E0521]: borrowed data escapes outside of method
   --> packages/domain/src/completion/request.rs:193:9
    |
126 |   impl<'a> CompletionRequestBuilder<'a> {
    |        -- lifetime `'a` defined here
...
190 |       pub fn chunk_size(self, size: Option<usize>) -> AsyncStream<Self> {
    |                         ---- `self` is a reference that is only valid in the method body
...
193 | /         tokio::spawn(async move {
194 | |             let mut builder = self;
195 | |             builder.chunk_size = size;
196 | |             let _ = sender.send(builder);
197 | |         });
    | |          ^
    | |          |
    | |__________`self` escapes the method body here
    |            argument requires that `'a` must outlive `'static`

error[E0521]: borrowed data escapes outside of method
   --> packages/domain/src/completion/request.rs:212:9
    |
126 |   impl<'a> CompletionRequestBuilder<'a> {
    |        -- lifetime `'a` defined here
...
209 |       pub fn build(self) -> AsyncStream<CompletionRequest<'a>> {
    |                    ---- `self` is a reference that is only valid in the method body
...
212 | /         tokio::spawn(async move {
213 | |             let request = CompletionRequest {
214 | |                 system_prompt: self.system_prompt,
215 | |                 chat_history: self.chat_history,
...   |
225 | |             let _ = sender.send(request);
226 | |         });
    | |          ^
    | |          |
    | |__________`self` escapes the method body here
    |            argument requires that `'a` must outlive `'static`

error: lifetime may not live long enough
   --> packages/domain/src/completion/response.rs:296:9
    |
228 | impl<'a> CompactCompletionResponseBuilder<'a> {
    |      -- lifetime `'a` defined here
...
296 |         stream
    |         ^^^^^^ returning this value requires that `'a` must outlive `'static`
    |
    = note: requirement occurs because of the type `UnboundedReceiverStream<CompactCompletionResponse<'_>>`, which makes the generic argument `CompactCompletionResponse<'_>` invariant
    = note: the struct `UnboundedReceiverStream<T>` is invariant over the parameter `T`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance

Some errors have detailed explanations: E0061, E0119, E0223, E0277, E0308, E0432, E0521, E0559, E0560...
For more information about an error, try `rustc --explain E0061`.
warning: `fluent_ai_domain` (lib) generated 3 warnings
error: could not compile `fluent_ai_domain` (lib) due to 260 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `fluent_ai_domain` (lib) generated 3 warnings (3 duplicates)
error: could not compile `fluent_ai_domain` (lib) due to 276 previous errors; 3 warnings emitted
