    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
   Compiling fluent_ai_provider v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/provider)
    Checking fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
warning: usage of an `unsafe` block
  --> packages/provider/build.rs:53:5
   |
53 | /     unsafe {
54 | |         std::env::set_var("RUST_BACKTRACE", "1");
55 | |     }
   | |_____^
   |
note: the lint level is defined here
  --> packages/provider/build.rs:4:5
   |
4  |     unsafe_code,
   |     ^^^^^^^^^^^

warning: function `write_generated_code` is never used
   --> packages/provider/build.rs:163:4
    |
163 | fn write_generated_code(path: &str, content: &str) -> BuildResult<()> {
    |    ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: variants `CacheError`, `HttpClient`, `CodeGenError`, `ValidationError`, and `ConfigError` are never constructed
  --> packages/provider/build/errors.rs:26:5
   |
21 | pub enum BuildError {
   |          ---------- variants in this enum
...
26 |     CacheError(Cow<'static, str>),
   |     ^^^^^^^^^^
...
35 |     HttpClient(Cow<'static, str>),
   |     ^^^^^^^^^^
...
38 |     CodeGenError(Cow<'static, str>),
   |     ^^^^^^^^^^^^
...
41 |     ValidationError(Cow<'static, str>),
   |     ^^^^^^^^^^^^^^^
...
44 |     ConfigError(Cow<'static, str>),
   |     ^^^^^^^^^^^
   |
   = note: `BuildError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variants `NotFound`, `Expired`, and `Other` are never constructed
   --> packages/provider/build/errors.rs:104:5
    |
102 | pub enum CacheError {
    |          ---------- variants in this enum
103 |     /// Cache entry not found
104 |     NotFound,
    |     ^^^^^^^^
105 |     /// Cache entry is expired
106 |     Expired,
    |     ^^^^^^^
...
112 |     Other(String),
    |     ^^^^^
    |
    = note: `CacheError` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: associated function `with_location` is never used
   --> packages/provider/build/errors.rs:148:12
    |
137 | impl YamlError {
    | -------------- associated function in this implementation
...
148 |     pub fn with_location(
    |            ^^^^^^^^^^^^^

warning: associated items `with_status` and `is_retryable` are never used
   --> packages/provider/build/errors.rs:192:12
    |
181 | impl HttpClientError {
    | -------------------- associated items in this implementation
...
192 |     pub fn with_status(status: u16, message: impl Into<Cow<'static, str>>) -> Self {
    |            ^^^^^^^^^^^
...
201 |     pub fn is_retryable(&self) -> bool {
    |            ^^^^^^^^^^^^

warning: fields `timeout_secs`, `max_redirects`, and `user_agent` are never read
  --> packages/provider/build/http_client.rs:18:9
   |
16 | pub struct HttpClientConfig {
   |            ---------------- fields in this struct
17 |     /// Connection timeout in seconds
18 |     pub timeout_secs: u64,
   |         ^^^^^^^^^^^^
19 |     /// Maximum number of redirects to follow
20 |     pub max_redirects: usize,
   |         ^^^^^^^^^^^^^
21 |     /// User agent string
22 |     pub user_agent: &'static str,
   |         ^^^^^^^^^^
   |
   = note: `HttpClientConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `config` is never read
  --> packages/provider/build/http_client.rs:40:5
   |
39 | pub struct HttpClient {
   |            ---------- field in this struct
40 |     config: HttpClientConfig,
   |     ^^^^^^

warning: method `get` is never used
  --> packages/provider/build/http_client.rs:64:18
   |
45 | impl HttpClient {
   | --------------- method in this implementation
...
64 |     pub async fn get(&self, url: &str) -> BuildResult<String> {
   |                  ^^^

warning: methods `clear` and `stats` are never used
   --> packages/provider/build/cache_manager.rs:182:12
    |
79  | impl CacheManager {
    | ----------------- methods in this implementation
...
182 |     pub fn clear(&self) -> BuildResult<()> {
    |            ^^^^^
...
193 |     pub fn stats(&self) -> Arc<PerformanceStats> {
    |            ^^^^^

warning: field `templates` is never read
  --> packages/provider/build/code_generator.rs:22:5
   |
19 | pub struct CodeGenerator {
   |            ------------- field in this struct
...
22 |     templates: HashMap<&'static str, String>,
   |     ^^^^^^^^^
   |
   = note: `CodeGenerator` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> packages/provider/build/code_generator.rs:35:12
    |
25  | impl CodeGenerator {
    | ------------------ methods in this implementation
...
35  |     pub fn generate_provider_module(&self, provider: &ProviderInfo) -> BuildResult<String> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn generate_model_registry(&self, providers: &[ProviderInfo]) -> BuildResult<String> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
203 |     fn format_provider_capabilities(&self, provider: &ProviderInfo) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
212 |     fn generate_provider_variants(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
220 |     fn generate_provider_str_matches(&self, providers: &[ProviderInfo], field: &str) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
232 |     fn generate_provider_from_str(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
246 |     fn generate_model_variants(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
...
255 |     fn generate_model_str_matches(&self, providers: &[ProviderInfo], field: &str) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
268 |     fn generate_model_provider_matches(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
284 |     fn generate_model_max_tokens(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
299 |     fn generate_model_capabilities_matches(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
320 |     fn generate_all_model_capabilities(&self, providers: &[ProviderInfo]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: trait `ClientVerifier` is never used
  --> packages/provider/build/client_verifier.rs:19:11
   |
19 | pub trait ClientVerifier: Send + Sync {
   |           ^^^^^^^^^^^^^^

warning: struct `VerificationResult` is never constructed
  --> packages/provider/build/client_verifier.rs:33:12
   |
33 | pub struct VerificationResult {
   |            ^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `with_warning`, `with_error`, `add_warning`, `add_error`, and `is_success` are never used
  --> packages/provider/build/client_verifier.rs:57:12
   |
55 | impl VerificationResult {
   | ----------------------- associated items in this implementation
56 |     /// Create a new verification result
57 |     pub fn new() -> Self {
   |            ^^^
...
62 |     pub fn with_warning(mut self, warning: impl Into<String>) -> Self {
   |            ^^^^^^^^^^^^
...
68 |     pub fn with_error(mut self, error: impl Into<String>) -> Self {
   |            ^^^^^^^^^^
...
75 |     pub fn add_warning(&mut self, warning: impl Into<String>) {
   |            ^^^^^^^^^^^
...
80 |     pub fn add_error(&mut self, error: impl Into<String>) {
   |            ^^^^^^^^^
...
86 |     pub fn is_success(&self) -> bool {
   |            ^^^^^^^^^^

warning: struct `ModelVerificationResult` is never constructed
  --> packages/provider/build/client_verifier.rs:93:12
   |
93 | pub struct ModelVerificationResult {
   |            ^^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `add_warning`, `add_error`, and `is_success` are never used
   --> packages/provider/build/client_verifier.rs:117:12
    |
115 | impl ModelVerificationResult {
    | ---------------------------- associated items in this implementation
116 |     /// Create a new model verification result
117 |     pub fn new() -> Self {
    |            ^^^
...
122 |     pub fn add_warning(&mut self, warning: impl Into<String>) {
    |            ^^^^^^^^^^^
...
127 |     pub fn add_error(&mut self, error: impl Into<String>) {
    |            ^^^^^^^^^
...
133 |     pub fn is_success(&self) -> bool {
    |            ^^^^^^^^^^

warning: struct `DefaultClientVerifier` is never constructed
   --> packages/provider/build/client_verifier.rs:140:12
    |
140 | pub struct DefaultClientVerifier {
    |            ^^^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
   --> packages/provider/build/client_verifier.rs:146:12
    |
144 | impl DefaultClientVerifier {
    | -------------------------- associated function in this implementation
145 |     /// Create a new `DefaultClientVerifier`
146 |     pub fn new(perf_monitor: Arc<PerformanceMonitor>) -> Self {
    |            ^^^

warning: function `to_snake_case` is never used
  --> packages/provider/build/string_utils.rs:11:8
   |
11 | pub fn to_snake_case(s: &str) -> String {
   |        ^^^^^^^^^^^^^

warning: function `to_pascal_case` is never used
  --> packages/provider/build/string_utils.rs:36:8
   |
36 | pub fn to_pascal_case(s: &str) -> String {
   |        ^^^^^^^^^^^^^^

warning: function `join_path` is never used
   --> packages/provider/build/string_utils.rs:133:8
    |
133 | pub fn join_path(components: &[&str]) -> String {
    |        ^^^^^^^^^

warning: function `trim` is never used
   --> packages/provider/build/string_utils.rs:153:8
    |
153 | pub fn trim(s: &str) -> &str {
    |        ^^^^

warning: function `starts_with_any` is never used
   --> packages/provider/build/string_utils.rs:159:8
    |
159 | pub fn starts_with_any(s: &str, prefixes: &[&str]) -> bool {
    |        ^^^^^^^^^^^^^^^

warning: function `ends_with_any` is never used
   --> packages/provider/build/string_utils.rs:165:8
    |
165 | pub fn ends_with_any(s: &str, suffixes: &[&str]) -> bool {
    |        ^^^^^^^^^^^^^

warning: function `replace_all` is never used
   --> packages/provider/build/string_utils.rs:171:8
    |
171 | pub fn replace_all(s: &str, from: &str, to: &str) -> String {
    |        ^^^^^^^^^^^

warning: function `escape_rust_literal` is never used
   --> packages/provider/build/string_utils.rs:187:8
    |
187 | pub fn escape_rust_literal(s: &str) -> String {
    |        ^^^^^^^^^^^^^^^^^^^

warning: fields `yaml_files_processed`, `code_generation_ops`, and `current_memory_usage` are never read
  --> packages/provider/build/performance.rs:27:9
   |
13 | pub struct PerformanceStats {
   |            ---------------- fields in this struct
...
27 |     pub yaml_files_processed: AtomicUsize,
   |         ^^^^^^^^^^^^^^^^^^^^
...
30 |     pub code_generation_ops: AtomicUsize,
   |         ^^^^^^^^^^^^^^^^^^^
...
51 |     pub current_memory_usage: AtomicU64,
   |         ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `PerformanceStats` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `record_cache_write` and `record_network_request` are never used
  --> packages/provider/build/performance.rs:77:12
   |
60 | impl PerformanceStats {
   | --------------------- methods in this implementation
...
77 |     pub fn record_cache_write(&self) {
   |            ^^^^^^^^^^^^^^^^^^
...
87 |     pub fn record_network_request(&self) {
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: methods `record_cache_hit`, `record_cache_miss`, `record_cache_write`, `record_cache_eviction`, and `record_time` are never used
   --> packages/provider/build/performance.rs:112:12
    |
98  | impl PerformanceMonitor {
    | ----------------------- methods in this implementation
...
112 |     pub fn record_cache_hit(&self) {
    |            ^^^^^^^^^^^^^^^^
...
117 |     pub fn record_cache_miss(&self) {
    |            ^^^^^^^^^^^^^^^^^
...
122 |     pub fn record_cache_write(&self) {
    |            ^^^^^^^^^^^^^^^^^^
...
127 |     pub fn record_cache_eviction(&self) {
    |            ^^^^^^^^^^^^^^^^^^^^^
...
137 |     pub fn record_time<F, R>(&self, stat: &AtomicU64, op: F) -> R
    |            ^^^^^^^^^^^

error[E0603]: module `primitives` is private
  --> packages/domain/src/agent/chat.rs:14:20
   |
14 | use crate::memory::primitives::{MemoryTypeEnum, MemoryContent, MemoryNodeBuilder};
   |                    ^^^^^^^^^^ private module
   |
help: consider importing this enum through its public re-export instead:
      crate::MemoryTypeEnum
  --> packages/domain/src/agent/chat.rs:14:33
   |
14 | use crate::memory::primitives::{MemoryTypeEnum, MemoryContent, MemoryNodeBuilder};
   |                                 ^^^^^^^^^^^^^^
note: the module `primitives` is defined here
  --> packages/domain/src/memory/mod.rs:7:1
   |
7  | mod primitives;
   | ^^^^^^^^^^^^^^^

error[E0603]: module `primitives` is private
  --> packages/domain/src/agent/chat.rs:14:20
   |
14 | use crate::memory::primitives::{MemoryTypeEnum, MemoryContent, MemoryNodeBuilder};
   |                    ^^^^^^^^^^ private module
   |
help: consider importing this enum through its public re-export instead:
      crate::MemoryContent
  --> packages/domain/src/agent/chat.rs:14:49
   |
14 | use crate::memory::primitives::{MemoryTypeEnum, MemoryContent, MemoryNodeBuilder};
   |                                                 ^^^^^^^^^^^^^
note: the module `primitives` is defined here
  --> packages/domain/src/memory/mod.rs:7:1
   |
7  | mod primitives;
   | ^^^^^^^^^^^^^^^

error[E0603]: module `primitives` is private
  --> packages/domain/src/agent/chat.rs:14:20
   |
14 | use crate::memory::primitives::{MemoryTypeEnum, MemoryContent, MemoryNodeBuilder};
   |                    ^^^^^^^^^^ private module
   |
note: the module `primitives` is defined here
  --> packages/domain/src/memory/mod.rs:7:1
   |
7  | mod primitives;
   | ^^^^^^^^^^^^^^^

warning: unused doc comment
  --> packages/domain/src/lib.rs:74:1
   |
74 | /// Thread-local storage for configuration caching
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations
   |
   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion
   = note: `#[warn(unused_doc_comments)]` on by default

warning: unused imports: `CacheConfig` and `LoggingConfig`
  --> packages/domain/src/lib.rs:17:5
   |
17 |     CacheConfig, LoggingConfig,
   |     ^^^^^^^^^^^  ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AtomicCounter`
 --> packages/domain/src/agent/chat.rs:7:22
  |
7 | use atomic_counter::{AtomicCounter, RelaxedCounter};
  |                      ^^^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `Stdio` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `Stdio` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `Stdio` in the value namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `Stdio` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `AgentRoleAgent` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `AgentRoleAgent` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `AgentRoleAgent` in the value namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `AgentRoleAgent` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `AgentConversation` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `AgentConversation` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `AgentConversationMessage` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `AgentConversationMessage` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `AgentWithHistory` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `AgentWithHistory` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `ContextArgs` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `ContextArgs` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `ToolArgs` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `ToolArgs` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/agent/mod.rs:17:9
   |
17 | pub use role::*;
   |         ^^^^^^^ the name `ConversationHistoryArgs` in the type namespace is first re-exported here
18 | pub use types::*;
   |         -------- but the name `ConversationHistoryArgs` in the type namespace is also re-exported here

warning: unused import: `types::*`
  --> packages/domain/src/agent/mod.rs:18:9
   |
18 | pub use types::*;
   |         ^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> packages/domain/src/chat/commands/parsing.rs:9:13
  |
9 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `crate::chat::formatting::MessageContent`
  --> packages/domain/src/chat/macros.rs:19:5
   |
19 | use crate::chat::formatting::MessageContent;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Instant`
  --> packages/domain/src/chat/realtime.rs:10:27
   |
10 | use std::time::{Duration, Instant};
   |                           ^^^^^^^

warning: unused import: `timeout`
  --> packages/domain/src/chat/realtime.rs:18:36
   |
18 | use tokio::time::{interval, sleep, timeout};
   |                                    ^^^^^^^

warning: unused import: `uuid::Uuid`
  --> packages/domain/src/chat/realtime.rs:19:5
   |
19 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused import: `AtomicU64`
 --> packages/domain/src/chat/search.rs:9:25
  |
9 | use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};
  |                         ^^^^^^^^^

warning: unused import: `Duration`
  --> packages/domain/src/chat/search.rs:10:17
   |
10 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^

warning: unused import: `crossbeam_queue::SegQueue`
  --> packages/domain/src/chat/search.rs:13:5
   |
13 | use crossbeam_queue::SegQueue;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `wide::f32x8`
  --> packages/domain/src/chat/search.rs:18:5
   |
18 | use wide::f32x8;
   |     ^^^^^^^^^^^

warning: unused import: `Message`
  --> packages/domain/src/chat/search.rs:20:22
   |
20 | use crate::message::{Message, SearchChatMessage};
   |                      ^^^^^^^

warning: unused imports: `AsyncTask` and `spawn_async`
  --> packages/domain/src/chat/templates.rs:15:13
   |
15 | use crate::{AsyncTask, spawn_async};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> packages/domain/src/chat/mod.rs:32:9
   |
32 | pub use commands::*;
   |         ^^^^^^^^^^^ the name `MacroAction` in the type namespace is first re-exported here
...
37 | pub use macros::*;
   |         --------- but the name `MacroAction` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/chat/mod.rs:33:9
   |
33 | pub use config::*;
   |         ^^^^^^^^^ the name `IntegrationConfig` in the type namespace is first re-exported here
...
36 | pub use integrations::*;
   |         --------------- but the name `IntegrationConfig` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> packages/domain/src/chat/mod.rs:34:9
   |
34 | pub use export::*;
   |         ^^^^^^^^^ the name `ExportFormat` in the type namespace is first re-exported here
...
39 | pub use search::*;
   |         --------- but the name `ExportFormat` in the type namespace is also re-exported here

warning: unused import: `AtomicU64`
  --> packages/domain/src/completion/candle.rs:12:36
   |
12 | use std::sync::atomic::{AtomicU32, AtomicU64, Ordering};
   |                                    ^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> packages/domain/src/completion/candle.rs:15:13
   |
15 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `MemoryType`
  --> packages/domain/src/context/provider.rs:21:56
   |
21 | use fluent_ai_memory::memory::primitives::{MemoryNode, MemoryType};
   |                                                        ^^^^^^^^^^

warning: unused imports: `WalkBuilder` and `WalkState`
  --> packages/domain/src/context/provider.rs:27:14
   |
27 | use ignore::{WalkBuilder, WalkState};
   |              ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tokio_stream::Stream`
  --> packages/domain/src/context/provider.rs:32:5
   |
32 | use tokio_stream::Stream;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `AsyncTask` and `spawn_async`
 --> packages/domain/src/conversation.rs:8:13
  |
8 | use crate::{AsyncTask, spawn_async};
  |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `spawn_async`
  --> packages/domain/src/embedding/core.rs:11:24
   |
11 | use crate::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> packages/domain/src/engine.rs:9:5
  |
9 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `CompactCompletionResponse`
  --> packages/domain/src/engine.rs:14:25
   |
14 | use crate::completion::{CompactCompletionResponse, CompletionResponse};
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::marker::PhantomData`
 --> packages/domain/src/error.rs:7:5
  |
7 | use std::marker::PhantomData;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicBool`
 --> packages/domain/src/error.rs:8:25
  |
8 | use std::sync::atomic::{AtomicBool, AtomicU64, Ordering};
  |                         ^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/domain/src/extractor.rs:3:5
  |
3 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `futures::stream::Stream`
 --> packages/domain/src/extractor.rs:7:5
  |
7 | use futures::stream::Stream;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio_stream::wrappers::UnboundedReceiverStream`
  --> packages/domain/src/extractor.rs:10:5
   |
10 | use tokio_stream::wrappers::UnboundedReceiverStream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ToolDefinition`
  --> packages/domain/src/extractor.rs:13:79
   |
13 | use crate::completion::{CompletionModel, CompletionParams, CompletionRequest, ToolDefinition};
   |                                                                               ^^^^^^^^^^^^^^

warning: unused import: `crate::model::Model`
  --> packages/domain/src/extractor.rs:15:5
   |
15 | use crate::model::Model;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `futures::stream::Stream`
   --> packages/domain/src/extractor.rs:261:13
    |
261 |         use futures::stream::Stream;
    |             ^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cognitive`
  --> packages/domain/src/memory/mod.rs:51:7
   |
51 | #[cfg(feature = "cognitive")]
   |       ^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cognitive` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `fluent-ai-memory`
  --> packages/domain/src/memory/mod.rs:57:7
   |
57 | #[cfg(feature = "fluent-ai-memory")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `fluent-ai-memory` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `fluent-ai-memory`
  --> packages/domain/src/memory/mod.rs:84:11
   |
84 | #[cfg(not(feature = "fluent-ai-memory"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `fluent-ai-memory` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `crossbeam_utils::CachePadded`
 --> packages/domain/src/memory/primitives/types.rs:7:5
  |
7 | use crossbeam_utils::CachePadded;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/domain/src/memory/cognitive/types.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `simd-auto-detect`
   --> packages/domain/src/memory/config/vector.rs:361:39
    |
361 |         let instruction_set = if cfg!(feature = "simd-auto-detect") {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `simd-auto-detect` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: ambiguous glob re-exports
 --> packages/domain/src/memory/config/mod.rs:5:9
  |
5 | pub use database::*;
  |         ^^^^^^^^^^^ the name `RetryConfig` in the type namespace is first re-exported here
6 | pub use llm::*;
  |         ------ but the name `RetryConfig` in the type namespace is also re-exported here

warning: unused import: `std::time::SystemTime`
 --> packages/domain/src/memory/compatibility.rs:3:5
  |
3 | use std::time::SystemTime;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cognitive`
  --> packages/domain/src/memory/manager.rs:17:7
   |
17 | #[cfg(feature = "cognitive")]
   |       ^^^^^^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cognitive` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `std::future::Future`
 --> packages/domain/src/memory/manager.rs:6:5
  |
6 | use std::future::Future;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> packages/domain/src/memory/manager.rs:7:5
  |
7 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
  --> packages/domain/src/memory/manager.rs:10:5
   |
10 | use std::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `arrayvec::ArrayVec`
  --> packages/domain/src/memory/manager.rs:13:5
   |
13 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `MemoryManager as MemoryManagerTrait`, `MemoryRelationship`, `MemoryTypeEnum`, and `SurrealMemoryQuery`
  --> packages/domain/src/memory/manager.rs:24:41
   |
24 |     Error as MemoryError, MemoryConfig, MemoryManager as MemoryManagerTrait, MemoryMetadata,
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |     MemoryNode, MemoryType, SurrealDBMemoryManager,
26 |     memory::{MemoryRelationship, MemoryTypeEnum, SurrealMemoryQuery},
   |              ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused import: `parking_lot::Mutex`
  --> packages/domain/src/memory/manager.rs:29:5
   |
29 | use parking_lot::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
  --> packages/domain/src/memory/manager.rs:30:5
   |
30 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::ZeroOneOrMany`
  --> packages/domain/src/memory/manager.rs:32:5
   |
32 | use crate::ZeroOneOrMany;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `AsyncStream`, `AsyncTask`, and `spawn_async`
  --> packages/domain/src/memory/manager.rs:33:25
   |
33 | use crate::async_task::{AsyncStream, AsyncTask, spawn_async};
   |                         ^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `GlobalAlloc` and `Layout`
 --> packages/domain/src/memory/ops.rs:8:18
  |
8 | use std::alloc::{GlobalAlloc, Layout};
  |                  ^^^^^^^^^^^  ^^^^^^

warning: unused imports: `align_of` and `size_of`
  --> packages/domain/src/memory/ops.rs:11:16
   |
11 | use std::mem::{align_of, size_of};
   |                ^^^^^^^^  ^^^^^^^

warning: unused import: `std::ptr::NonNull`
  --> packages/domain/src/memory/ops.rs:12:5
   |
12 | use std::ptr::NonNull;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> packages/domain/src/memory/ops.rs:14:5
   |
14 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/domain/src/memory/ops.rs:16:5
   |
16 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `arrayvec::ArrayVec`
  --> packages/domain/src/memory/ops.rs:17:5
   |
17 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicCounter`
  --> packages/domain/src/memory/ops.rs:18:22
   |
18 | use atomic_counter::{AtomicCounter, RelaxedCounter};
   |                      ^^^^^^^^^^^^^

warning: unused import: `crossbeam_queue::ArrayQueue`
  --> packages/domain/src/memory/ops.rs:19:5
   |
19 | use crossbeam_queue::ArrayQueue;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `futures::stream::StreamExt`
  --> packages/domain/src/memory/ops.rs:20:5
   |
20 | use futures::stream::StreamExt;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jemalloc_sys as jemalloc`
  --> packages/domain/src/memory/ops.rs:21:5
   |
21 | use jemalloc_sys as jemalloc;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `MmapOptions` and `Mmap`
  --> packages/domain/src/memory/ops.rs:22:15
   |
22 | use memmap2::{Mmap, MmapOptions};
   |               ^^^^  ^^^^^^^^^^^

warning: unused import: `once_cell::sync::Lazy`
  --> packages/domain/src/memory/ops.rs:23:5
   |
23 | use once_cell::sync::Lazy;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
  --> packages/domain/src/memory/ops.rs:24:5
   |
24 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `wide::f32x8 as WideF32x8`
  --> packages/domain/src/memory/ops.rs:27:5
   |
27 | use wide::f32x8 as WideF32x8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `MemoryError`, `MemoryNode`, `MemoryRelationship`, and `MemoryType`
  --> packages/domain/src/memory/ops.rs:30:5
   |
30 |     MemoryError, MemoryNode, MemoryRelationship, MemoryType,
   |     ^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `crate::ZeroOneOrMany`
  --> packages/domain/src/memory/ops.rs:32:5
   |
32 | use crate::ZeroOneOrMany;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::future::Future`
 --> packages/domain/src/memory/tool.rs:6:5
  |
6 | use std::future::Future;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> packages/domain/src/memory/tool.rs:7:5
  |
7 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused import: `Ordering`
 --> packages/domain/src/memory/tool.rs:9:38
  |
9 | use std::sync::atomic::{AtomicUsize, Ordering};
  |                                      ^^^^^^^^

warning: unused import: `arrayvec::ArrayVec`
  --> packages/domain/src/memory/tool.rs:12:5
   |
12 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_json::Value`
  --> packages/domain/src/memory/tool.rs:17:5
   |
17 | use serde_json::Value;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `AsyncStream`, `AsyncTask`, and `spawn_async`
  --> packages/domain/src/memory/tool.rs:20:25
   |
20 | use crate::async_task::{AsyncStream, AsyncTask, spawn_async};
   |                         ^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `ErrorCategory`, `ErrorRecoverability`, `ErrorSeverity`, and `ZeroAllocResult`
  --> packages/domain/src/memory/tool.rs:23:5
   |
23 |     ErrorCategory, ErrorRecoverability, ErrorSeverity, ZeroAllocError, ZeroAllocResult,
   |     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^

warning: unused import: `ToolTrait as Tool`
  --> packages/domain/src/memory/tool.rs:25:41
   |
25 | use crate::tool::{McpTool, McpToolData, ToolTrait as Tool};
   |                                         ^^^^^^^^^^^^^^^^^

warning: unused imports: `MemoryNode` and `MemoryType`
  --> packages/domain/src/memory/workflow.rs:12:46
   |
12 | use crate::memory::primitives::{MemoryError, MemoryNode, MemoryType};
   |                                              ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `spawn_async`
 --> packages/domain/src/memory/types_legacy.rs:9:36
  |
9 | use crate::async_task::{AsyncTask, spawn_async};
  |                                    ^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> packages/domain/src/memory/mod.rs:47:9
   |
47 | pub use cognitive::*;
   |         ^^^^^^^^^^^^ the name `types` in the type namespace is first re-exported here
...
71 | pub use primitives::*;
   |         ------------- but the name `types` in the type namespace is also re-exported here

warning: unused import: `std::collections::HashMap`
 --> packages/domain/src/message.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/domain/src/model/info.rs:3:5
  |
3 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> packages/domain/src/model/info.rs:4:5
  |
4 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/domain/src/model/info.rs:9:5
  |
9 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/domain/src/model/registry.rs:4:5
  |
4 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/domain/src/model/registry.rs:5:5
  |
5 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RwLock`
 --> packages/domain/src/model/registry.rs:9:22
  |
9 | use std::sync::{Arc, RwLock, Weak};
  |                      ^^^^^^

warning: unused imports: `AnyChatCompletionCapable`, `AnyEmbeddingCapable`, `AnyModel`, and `AnyTextGenerationCapable`
  --> packages/domain/src/model/registry.rs:19:5
   |
19 |     AnyChatCompletionCapable, AnyEmbeddingCapable, AnyModel, AnyTextGenerationCapable, Model,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/domain/src/model/resolver.rs:3:5
  |
3 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> packages/domain/src/model/resolver.rs:4:33
  |
4 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/domain/src/model/resolver.rs:7:5
  |
7 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `once_cell::sync::Lazy`
  --> packages/domain/src/model/resolver.rs:11:5
   |
11 | use once_cell::sync::Lazy;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `strsim::jaro_winkler`
  --> packages/domain/src/model/resolver.rs:15:5
   |
15 | use strsim::jaro_winkler;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cylo`
  --> packages/domain/src/tool/core.rs:12:7
   |
12 | #[cfg(feature = "cylo")]
   |       ^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cylo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:156:11
    |
156 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:158:15
    |
158 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
  --> packages/domain/src/tool/core.rs:64:11
   |
64 |     #[cfg(feature = "cylo")]
   |           ^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cylo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
  --> packages/domain/src/tool/core.rs:66:15
   |
66 |     #[cfg(not(feature = "cylo"))]
   |               ^^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `cylo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:121:11
    |
121 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:128:15
    |
128 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:134:11
    |
134 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:140:15
    |
140 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:203:11
    |
203 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:210:15
    |
210 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:216:11
    |
216 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/domain/src/tool/core.rs:222:15
    |
222 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `AsyncTask` and `spawn_async`
  --> packages/domain/src/tool/mcp.rs:17:13
   |
17 | use crate::{AsyncTask, spawn_async};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: ambiguous glob re-exports
   --> packages/domain/src/lib.rs:658:9
    |
658 | pub use agent::*;
    |         ^^^^^^^^ the name `core` in the type namespace is first re-exported here
...
673 | pub use embedding::*;
    |         ------------ but the name `core` in the type namespace is also re-exported here

warning: `#[inline]` is ignored on function prototypes
   --> packages/domain/src/completion/candle.rs:422:5
    |
422 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_attributes)]` on by default

warning: `#[inline]` is ignored on function prototypes
   --> packages/domain/src/completion/candle.rs:429:5
    |
429 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^

warning: `#[inline]` is ignored on function prototypes
   --> packages/domain/src/completion/candle.rs:436:5
    |
436 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^

warning: `fluent_ai_provider` (build script) generated 30 warnings
error[E0308]: mismatched types
   --> packages/domain/src/lib.rs:187:13
    |
180 | async fn execute_with_circuit_breaker<F, T, E>(operation: F) -> std::result::Result<T, DomainInitError>
    |                                          - expected this type parameter
...
186 |         Ok(result) => match result {
    |                             ------ this expression has type `T`
187 |             Ok(value) => Ok(value),
    |             ^^^^^^^^^ expected type parameter `T`, found `Result<_, _>`
    |
    = note: expected type parameter `T`
                         found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> packages/domain/src/lib.rs:188:13
    |
180 | async fn execute_with_circuit_breaker<F, T, E>(operation: F) -> std::result::Result<T, DomainInitError>
    |                                          - expected this type parameter
...
186 |         Ok(result) => match result {
    |                             ------ this expression has type `T`
187 |             Ok(value) => Ok(value),
188 |             Err(e) => Err(DomainInitError::System(e.to_string())),
    |             ^^^^^^ expected type parameter `T`, found `Result<_, _>`
    |
    = note: expected type parameter `T`
                         found enum `std::result::Result<_, _>`

warning: fluent_ai_provider@0.1.0: Downloading models.yaml from GitHub
error: failed to run custom build command for `fluent_ai_provider v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/provider)`
note: To improve backtraces for build dependencies, set the CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG=true environment variable to enable debug information generation.

Caused by:
  process didn't exit successfully: `/Volumes/samsung_t9/fluent-ai/target/debug/build/fluent_ai_provider-00555dca487c7832/build-script-build` (exit status: 1)
  --- stdout
  cargo:rerun-if-changed=build.rs
  cargo:rerun-if-changed=build
  cargo:rerun-if-changed=providers
  cargo:warning=Downloading models.yaml from GitHub

  --- stderr
  Error: IoError(Os { code: 2, kind: NotFound, message: "No such file or directory" })
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> packages/domain/src/agent/builder.rs:126:38
    |
126 |             let memory = Memory::new(memory_config).await?;
    |                          ----------- ^^^^^^^^^^^^^ expected `fluent_ai_memory::MemoryConfig`, found `memory::config::vector::MemoryConfig`
    |                          |
    |                          arguments to this function are incorrect
    |
    = note: `memory::config::vector::MemoryConfig` and `fluent_ai_memory::MemoryConfig` have similar names, but are actually distinct types
note: `memory::config::vector::MemoryConfig` is defined in the current crate
   --> packages/domain/src/memory/config/vector.rs:617:1
    |
617 | pub struct MemoryConfig {
    | ^^^^^^^^^^^^^^^^^^^^^^^
note: `fluent_ai_memory::MemoryConfig` is defined in crate `fluent_ai_memory`
   --> /Volumes/samsung_t9/fluent-ai/packages/memory/src/utils/config.rs:7:1
    |
7   | pub struct MemoryConfig {
    | ^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/domain/src/memory/manager.rs:245:18
    |
245 |     pub async fn new(config: MemoryConfig) -> Result<Self, MemoryError> {
    |                  ^^^ --------------------

error[E0277]: `?` couldn't convert the error to `AgentError`
   --> packages/domain/src/agent/builder.rs:126:58
    |
126 |             let memory = Memory::new(memory_config).await?;
    |                          --------------------------------^ the trait `From<fluent_ai_memory::Error>` is not implemented for `AgentError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, fluent_ai_memory::Error>`
    |
note: `AgentError` needs to implement `From<fluent_ai_memory::Error>`
   --> packages/domain/src/agent/core.rs:29:1
    |
29  | pub enum AgentError {
    | ^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `AgentError` implements `From<MemoryToolError>`
              `AgentError` implements `From<memory::primitives::types::MemoryError>`

warning: unused variable: `message`
   --> packages/domain/src/agent/chat.rs:114:9
    |
114 |         message: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `memory`
   --> packages/domain/src/agent/chat.rs:115:9
    |
115 |         memory: &Arc<Memory>,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory`

warning: variable does not need to be mutable
   --> packages/domain/src/agent/chat.rs:118:13
    |
118 |         let mut relevant_memories = ArrayVec::<MemoryNode, MAX_RELEVANT_MEMORIES>::new();
    |             ----^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0308]: arguments to this function are incorrect
   --> packages/domain/src/agent/chat.rs:180:27
    |
180 |         let user_memory = MemoryNode::new(
    |                           ^^^^^^^^^^^^^^^
181 |             user_message.to_string(),
    |             ------------------------ unexpected argument #1 of type `std::string::String`
182 |             MemoryType::Episodic
    |             -------------------- argument #2 of type `memory::primitives::types::MemoryContent` is missing
    |
note: associated function defined here
   --> packages/domain/src/memory/primitives/node.rs:284:12
    |
284 |     pub fn new(memory_type: MemoryTypeEnum, content: MemoryContent) -> Self {
    |            ^^^                              ----------------------
help: did you mean
    |
180 -         let user_memory = MemoryNode::new(
181 -             user_message.to_string(),
182 -             MemoryType::Episodic
183 -         );
180 +         let user_memory = MemoryNode::new(MemoryType::Episodic, /* memory::primitives::types::MemoryContent */);
    |

error[E0599]: no method named `store_memory` found for reference `&MemoryTool` in the current scope
   --> packages/domain/src/agent/chat.rs:187:14
    |
186 | /         memory_tool
187 | |             .store_memory(&user_memory)
    | |             -^^^^^^^^^^^^ method not found in `&MemoryTool`
    | |_____________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `MemoryManagerTrait` defines an item `store_memory`, perhaps you need to implement it
   --> packages/domain/src/memory/mod.rs:85:1
    |
85  | pub trait MemoryManagerTrait: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> packages/domain/src/agent/chat.rs:198:32
    |
198 |         let assistant_memory = MemoryNode::new(
    |                                ^^^^^^^^^^^^^^^
199 |             assistant_response.to_string(),
    |             ------------------------------ unexpected argument #1 of type `std::string::String`
200 |             MemoryType::Episodic
    |             -------------------- argument #2 of type `memory::primitives::types::MemoryContent` is missing
    |
note: associated function defined here
   --> packages/domain/src/memory/primitives/node.rs:284:12
    |
284 |     pub fn new(memory_type: MemoryTypeEnum, content: MemoryContent) -> Self {
    |            ^^^                              ----------------------
help: did you mean
    |
198 -         let assistant_memory = MemoryNode::new(
199 -             assistant_response.to_string(),
200 -             MemoryType::Episodic
201 -         );
198 +         let assistant_memory = MemoryNode::new(MemoryType::Episodic, /* memory::primitives::types::MemoryContent */);
    |

error[E0599]: no method named `store_memory` found for reference `&MemoryTool` in the current scope
   --> packages/domain/src/agent/chat.rs:205:14
    |
204 | /         memory_tool
205 | |             .store_memory(&assistant_memory)
    | |             -^^^^^^^^^^^^ method not found in `&MemoryTool`
    | |_____________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `MemoryManagerTrait` defines an item `store_memory`, perhaps you need to implement it
   --> packages/domain/src/memory/mod.rs:85:1
    |
85  | pub trait MemoryManagerTrait: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `store_memory` found for reference `&MemoryTool` in the current scope
   --> packages/domain/src/agent/chat.rs:224:14
    |
223 | /         memory_tool
224 | |             .store_memory(&context_memory)
    | |             -^^^^^^^^^^^^ method not found in `&MemoryTool`
    | |_____________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `MemoryManagerTrait` defines an item `store_memory`, perhaps you need to implement it
   --> packages/domain/src/memory/mod.rs:85:1
    |
85  | pub trait MemoryManagerTrait: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AgentError`
  --> packages/domain/src/agent/core.rs:74:63
   |
74 |         let memory = Arc::new(Memory::new(memory_config).await?);
   |                               --------------------------------^ the trait `From<fluent_ai_memory::Error>` is not implemented for `AgentError`
   |                               |
   |                               this can't be annotated with `?` because it has type `Result<_, fluent_ai_memory::Error>`
   |
note: `AgentError` needs to implement `From<fluent_ai_memory::Error>`
  --> packages/domain/src/agent/core.rs:29:1
   |
29 | pub enum AgentError {
   | ^^^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AgentError` implements `From<MemoryToolError>`
             `AgentError` implements `From<memory::primitives::types::MemoryError>`

error[E0277]: `?` couldn't convert the error to `AgentError`
   --> packages/domain/src/agent/core.rs:111:63
    |
111 |         let memory = Arc::new(Memory::new(memory_config).await?);
    |                               --------------------------------^ the trait `From<fluent_ai_memory::Error>` is not implemented for `AgentError`
    |                               |
    |                               this can't be annotated with `?` because it has type `Result<_, fluent_ai_memory::Error>`
    |
note: `AgentError` needs to implement `From<fluent_ai_memory::Error>`
   --> packages/domain/src/agent/core.rs:29:1
    |
29  | pub enum AgentError {
    | ^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `AgentError` implements `From<MemoryToolError>`
              `AgentError` implements `From<memory::primitives::types::MemoryError>`

error[E0382]: use of moved value
   --> packages/domain/src/chat/commands/execution.rs:263:28
    |
245 |         key: Option<Arc<str>>,
    |         --- move occurs because `key` has type `std::option::Option<Arc<str>>`, which does not implement the `Copy` trait
...
260 |         if let (Some(k), Some(v)) = (key, value) {
    |                                      --- value moved here
...
263 |         } else if let Some(k) = key {
    |                            ^ value used here after move

warning: unused variable: `content`
   --> packages/domain/src/chat/commands/execution.rs:306:9
    |
306 |         content: Option<Arc<str>>,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_content`

warning: unused variable: `variables`
   --> packages/domain/src/chat/commands/execution.rs:307:9
    |
307 |         variables: HashMap<Arc<str>, Arc<str>>,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_variables`

error[E0308]: mismatched types
  --> packages/domain/src/chat/commands/mod.rs:72:9
   |
72 |         executor.parse_and_execute(input).await
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<CommandOutput, CommandError>`, found `Result<Result<CommandOutput, ...>, ...>`
   |
   = note: expected enum `std::result::Result<commands::types::CommandOutput, commands::types::CommandError>`
              found enum `std::result::Result<std::result::Result<commands::types::CommandOutput, commands::types::CommandError>, JoinError>`
help: use the `?` operator to extract the `std::result::Result<std::result::Result<commands::types::CommandOutput, commands::types::CommandError>, JoinError>` value, propagating a `Result::Err` value to the caller
   |
72 |         executor.parse_and_execute(input).await?
   |                                                +

error[E0614]: type `ChatConfig` cannot be dereferenced
   --> packages/domain/src/chat/config.rs:635:30
    |
635 |         let mut new_config = (**current_config).clone();
    |                              ^^^^^^^^^^^^^^^^^^ can't be dereferenced

error[E0107]: function takes 1 generic argument but 2 generic arguments were supplied
   --> packages/domain/src/chat/config.rs:740:35
    |
740 |                 let bytes = rkyv::to_bytes::<_, 1024>(&*config)?;
    |                                   ^^^^^^^^    ------ help: remove the unnecessary generic argument
    |                                   |
    |                                   expected 1 generic argument
    |
note: function defined here, with 1 generic parameter: `E`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rkyv-0.8.10/src/api/high/mod.rs:63:8
    |
63  | pub fn to_bytes<E>(
    |        ^^^^^^^^ -
    = note: `impl Trait` cannot be explicitly specified as a generic argument

error[E0599]: no function or associated item named `user` found for struct `message::Message` in the current scope
   --> packages/domain/src/chat/realtime.rs:512:31
    |
512 |             message: Message::user(message.user_id.clone(), message.content.clone()),
    |                               ^^^^ function or associated item not found in `message::Message<_>`
    |
   ::: packages/domain/src/message.rs:233:1
    |
233 | pub struct Message<const N: usize = 256> {
    | ---------------------------------------- function or associated item `user` not found for this struct
    |
note: if you're trying to build a new `message::Message<_>`, consider using `message::Message::<N>::new` which returns `std::result::Result<message::Message<_>, &'static str>`
   --> packages/domain/src/message.rs:261:5
    |
261 |     pub fn new(id: u64, message_type: MessageType, content: &[u8]) -> Result<Self, &'static str> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `dec` found for struct `ConsistentCounter` in the current scope
   --> packages/domain/src/chat/realtime.rs:553:37
    |
553 |             self.subscriber_counter.dec();
    |                                     ^^^ method not found in `ConsistentCounter`

error[E0599]: no method named `clone` found for struct `SegQueue` in the current scope
   --> packages/domain/src/chat/realtime.rs:565:48
    |
565 |         let message_queue = self.message_queue.clone();
    |                                                ^^^^^ method not found in `SegQueue<LiveUpdateMessage>`

error[E0599]: no method named `clone` found for struct `ConsistentCounter` in the current scope
   --> packages/domain/src/chat/realtime.rs:567:52
    |
567 |         let message_counter = self.message_counter.clone();
    |                                                    ^^^^^ method not found in `ConsistentCounter`

error[E0282]: type annotations needed for `Arc<_, _>`
   --> packages/domain/src/chat/search.rs:197:13
    |
197 |         let doc_id = Arc::from(message.timestamp.to_string());
    |             ^^^^^^
...
200 |         self.document_store.insert(doc_id.clone(), message.clone());
    |                                           ----- type must be known at this point
    |
help: consider giving `doc_id` an explicit type, where the type for type parameter `T` is specified
    |
197 |         let doc_id: Arc<T, A> = Arc::from(message.timestamp.to_string());
    |                   +++++++++++

error[E0282]: type annotations needed for `std::collections::HashMap<_, _>`
   --> packages/domain/src/chat/search.rs:269:13
    |
269 |         let mut scores = HashMap::new();
    |             ^^^^^^^^^^   -------------- type must be known at this point
    |
help: consider giving `scores` an explicit type, where the type for type parameter `K` is specified
    |
269 |         let mut scores: std::collections::HashMap<K, V> = HashMap::new();
    |                       +++++++++++++++++++++++++++++++++

error[E0277]: can't compare `std::string::String` with `Arc<str>`
   --> packages/domain/src/chat/search.rs:706:47
    |
706 |             results.retain(|r| r.message.role == *user_filter);
    |                                               ^^ no implementation for `std::string::String == Arc<str>`
    |
    = help: the trait `PartialEq<Arc<str>>` is not implemented for `std::string::String`
help: consider dereferencing both sides of the expression
    |
706 |             results.retain(|r| *r.message.role == **user_filter);
    |                                +                  +

error[E0277]: can't compare `std::string::String` with `Arc<str>`
    --> packages/domain/src/chat/search.rs:1184:40
     |
1184 |             messages.retain(|m| m.role == *user_filter);
     |                                        ^^ no implementation for `std::string::String == Arc<str>`
     |
     = help: the trait `PartialEq<Arc<str>>` is not implemented for `std::string::String`
help: consider dereferencing both sides of the expression
     |
1184 |             messages.retain(|m| *m.role == **user_filter);
     |                                 +          +

error[E0277]: the trait bound `std::string::String: AsRef<std::string::String>` is not satisfied
    --> packages/domain/src/chat/search.rs:1257:30
     |
1257 |                 message.role.as_ref(),
     |                              ^^^^^^ the trait `AsRef<std::string::String>` is not implemented for `std::string::String`
     |
     = help: the following other types implement trait `AsRef<T>`:
               `std::string::String` implements `AsRef<OsStr>`
               `std::string::String` implements `AsRef<Path>`
               `std::string::String` implements `AsRef<[u8]>`
               `std::string::String` implements `AsRef<str>`

error[E0308]: mismatched types
    --> packages/domain/src/chat/search.rs:1267:82
     |
1267 |                 row.push(message.metadata.as_ref().map(|m| m.as_ref()).unwrap_or(""));
     |                                                                        --------- ^^ expected `&String`, found `&str`
     |                                                                        |
     |                                                                        arguments to this method are incorrect
     |
     = note: expected reference `&std::string::String`
                found reference `&'static str`
help: the return type of this call is `&'static str` due to the type of the argument passed
    --> packages/domain/src/chat/search.rs:1267:26
     |
1267 |                 row.push(message.metadata.as_ref().map(|m| m.as_ref()).unwrap_or(""));
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--^
     |                                                                                  |
     |                                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:1025:12
     |
1025 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^
help: use `Option::map_or` to deref inner value of `Option`
     |
1267 -                 row.push(message.metadata.as_ref().map(|m| m.as_ref()).unwrap_or(""));
1267 +                 row.push(message.metadata.as_ref().map(|m| m.as_ref()).map_or("", |v| v));
     |

error[E0277]: the trait bound `std::string::String: AsRef<std::string::String>` is not satisfied
    --> packages/domain/src/chat/search.rs:1267:62
     |
1267 |                 row.push(message.metadata.as_ref().map(|m| m.as_ref()).unwrap_or(""));
     |                                                              ^^^^^^ the trait `AsRef<std::string::String>` is not implemented for `std::string::String`
     |
     = help: the following other types implement trait `AsRef<T>`:
               `std::string::String` implements `AsRef<OsStr>`
               `std::string::String` implements `AsRef<Path>`
               `std::string::String` implements `AsRef<[u8]>`
               `std::string::String` implements `AsRef<str>`

error[E0599]: the method `join` exists for struct `Vec<&std::string::String>`, but its trait bounds were not satisfied
    --> packages/domain/src/chat/search.rs:1270:38
     |
1270 |             csv_output.push_str(&row.join(","));
     |                                      ^^^^ method cannot be called on `Vec<&std::string::String>` due to unsatisfied trait bounds
     |
     = note: the following trait bounds were not satisfied:
             `[&std::string::String]: std::slice::Join<_>`

error[E0308]: mismatched types
   --> packages/domain/src/context/provider.rs:142:25
    |
142 |             created_at: SystemTime::now(),
    |                         ^^^^^^^^^^^^^^^^^ expected `DateTime<Utc>`, found `SystemTime`
    |
    = note: expected struct `chrono::DateTime<Utc>`
               found struct `SystemTime`
help: call `Into::into` on this expression to convert `SystemTime` into `chrono::DateTime<Utc>`
    |
142 |             created_at: SystemTime::now().into(),
    |                                          +++++++

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `last_accessed`
   --> packages/domain/src/context/provider.rs:143:13
    |
143 |             last_accessed: SystemTime::now(),
    |             ^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
143 |             last_accessed_at: SystemTime::now(),
    |                          +++

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `access_count`
   --> packages/domain/src/context/provider.rs:144:13
    |
144 |             access_count: 0,
    |             ^^^^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `confidence`
   --> packages/domain/src/context/provider.rs:147:13
    |
147 |             confidence: 1.0,
    |             ^^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `version`
   --> packages/domain/src/context/provider.rs:148:13
    |
148 |             version: 1,
    |             ^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `parent_id`
   --> packages/domain/src/context/provider.rs:149:13
    |
149 |             parent_id: None,
    |             ^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `children_ids`
   --> packages/domain/src/context/provider.rs:150:13
    |
150 |             children_ids: vec![],
    |             ^^^^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `associations`
   --> packages/domain/src/context/provider.rs:151:13
    |
151 |             associations: HashMap::new(),
    |             ^^^^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0560]: struct `fluent_ai_memory::MemoryMetadata` has no field named `custom_fields`
   --> packages/domain/src/context/provider.rs:152:13
    |
152 |             custom_fields: HashMap::new(),
    |             ^^^^^^^^^^^^^ `fluent_ai_memory::MemoryMetadata` does not have this field
    |
    = note: available fields are: `keywords`, `category`, `last_accessed_at`, `embedding`, `custom`

error[E0609]: no field `custom_fields` on type `fluent_ai_memory::MemoryMetadata`
   --> packages/domain/src/context/provider.rs:156:18
    |
156 |         metadata.custom_fields.insert(
    |                  ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `user_id`, `agent_id`, `context`, `keywords`, `tags` ... and 7 others

error[E0063]: missing fields `created_at` and `updated_at` in initializer of `fluent_ai_memory::MemoryNode`
   --> packages/domain/src/context/provider.rs:162:27
    |
162 |         let memory_node = MemoryNode {
    |                           ^^^^^^^^^^ missing `created_at` and `updated_at`

error[E0599]: no method named `store_memory` found for struct `Arc<SurrealDBMemoryManager>` in the current scope
   --> packages/domain/src/context/provider.rs:172:14
    |
171 | /         self.memory_manager
172 | |             .store_memory(&memory_node)
    | |_____________-^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `MemoryManagerTrait` defines an item `store_memory`, perhaps you need to implement it
   --> packages/domain/src/memory/mod.rs:85:1
    |
85  | pub trait MemoryManagerTrait: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `get_memory` with a similar name
    |
172 -             .store_memory(&memory_node)
172 +             .get_memory(&memory_node)
    |

error[E0599]: no method named `search_by_embedding` found for struct `Arc<SurrealDBMemoryManager>` in the current scope
   --> packages/domain/src/context/provider.rs:206:14
    |
204 |           let results = self
    |  _______________________-
205 | |             .memory_manager
206 | |             .search_by_embedding(&query_embedding, Some(10))
    | |             -^^^^^^^^^^^^^^^^^^^ method not found in `Arc<SurrealDBMemoryManager>`
    | |_____________|
    |

error[E0599]: no variant or associated item named `Document` found for enum `fluent_ai_memory::memory::MemoryTypeEnum` in the current scope
   --> packages/domain/src/context/provider.rs:292:70
    |
292 |                 .store_document(&path_str, &content, MemoryTypeEnum::Document)
    |                                                                      ^^^^^^^^ variant or associated item not found in `fluent_ai_memory::memory::MemoryTypeEnum`

error[E0599]: no variant or associated item named `Document` found for enum `fluent_ai_memory::memory::MemoryTypeEnum` in the current scope
   --> packages/domain/src/context/provider.rs:376:41
    |
376 |                         MemoryTypeEnum::Document,
    |                                         ^^^^^^^^ variant or associated item not found in `fluent_ai_memory::memory::MemoryTypeEnum`

error[E0599]: no variant or associated item named `Document` found for enum `fluent_ai_memory::memory::MemoryTypeEnum` in the current scope
   --> packages/domain/src/context/provider.rs:472:41
    |
472 |                         MemoryTypeEnum::Document,
    |                                         ^^^^^^^^ variant or associated item not found in `fluent_ai_memory::memory::MemoryTypeEnum`

error[E0599]: no variant or associated item named `Document` found for enum `fluent_ai_memory::memory::MemoryTypeEnum` in the current scope
   --> packages/domain/src/context/provider.rs:553:41
    |
553 |                         MemoryTypeEnum::Document,
    |                                         ^^^^^^^^ variant or associated item not found in `fluent_ai_memory::memory::MemoryTypeEnum`

error[E0277]: `Result<RwLockReadGuard<'_, EngineConfig>, PoisonError<...>>` is not a future
   --> packages/domain/src/engine.rs:205:28
    |
205 |         self.config.read().await.clone()
    |                            ^^^^^ `Result<RwLockReadGuard<'_, EngineConfig>, PoisonError<...>>` is not a future
    |
    = help: the trait `futures::Future` is not implemented for `Result<RwLockReadGuard<'_, EngineConfig>, PoisonError<...>>`
    = note: Result<RwLockReadGuard<'_, EngineConfig>, PoisonError<...>> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<RwLockReadGuard<'_, EngineConfig>, PoisonError<...>>` to implement `std::future::IntoFuture`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-18004035097784107306.txt'
    = note: consider using `--verbose` to print the full type name to the console
help: remove the `.await`
    |
205 -         self.config.read().await.clone()
205 +         self.config.read().clone()
    |

error[E0277]: `Result<RwLockWriteGuard<'_, EngineConfig>, PoisonError<...>>` is not a future
   --> packages/domain/src/engine.rs:211:30
    |
211 |         *self.config.write().await = config;
    |                              ^^^^^ `Result<RwLockWriteGuard<'_, EngineConfig>, PoisonError<...>>` is not a future
    |
    = help: the trait `futures::Future` is not implemented for `Result<RwLockWriteGuard<'_, EngineConfig>, PoisonError<...>>`
    = note: Result<RwLockWriteGuard<'_, EngineConfig>, PoisonError<...>> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<RwLockWriteGuard<'_, EngineConfig>, PoisonError<...>>` to implement `std::future::IntoFuture`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-17349476177815730882.txt'
    = note: consider using `--verbose` to print the full type name to the console
help: remove the `.await`
    |
211 -         *self.config.write().await = config;
211 +         *self.config.write() = config;
    |

error[E0599]: no function or associated item named `new` found for struct `completion::response::CompletionResponse` in the current scope
   --> packages/domain/src/engine.rs:298:44
    |
298 |         let response = CompletionResponse::new(&response_content, config.model_name.as_ref())
    |                                            ^^^ function or associated item not found in `completion::response::CompletionResponse<'_>`
    |
   ::: packages/domain/src/completion/response.rs:14:1
    |
14  | pub struct CompletionResponse<'a> {
    | --------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Extractor`
            candidate #2: `McpTool`
            candidate #3: `conversation::Conversation`
            candidate #4: `loader::Loader`
            candidate #5: `role::AgentRole`
            candidate #6: `HashMapExt`
            candidate #7: `HashSetExt`
            candidate #8: `aws_lc_rs::aead::BoundKey`
            candidate #9: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
            candidate #10: `brotli::enc::threading::AnyBoxConstructor`
            candidate #11: `crypto_common::KeyInit`
            candidate #12: `crypto_common::KeyIvInit`
            candidate #13: `digest::VariableOutput`
            candidate #14: `digest::core_api::VariableOutputCore`
            candidate #15: `digest::digest::Digest`
            candidate #16: `digest::mac::Mac`
            candidate #17: `ext_sort::chunk::ExternalChunk`
            candidate #18: `itertools::adaptors::coalesce::CountItem`
            candidate #19: `munge::internal::Destructurer`
            candidate #20: `ndarray::data_traits::DataOwned`
            candidate #21: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #22: `prometheus::atomic64::Atomic`
            candidate #23: `protobuf::message::Message`
            candidate #24: `quick_cache::shard::SharedPlaceholder`
            candidate #25: `quick_cache::shard::SharedPlaceholder`
            candidate #26: `rand::distr::uniform::UniformSampler`
            candidate #27: `rand::distributions::uniform::UniformSampler`
            candidate #28: `ring::aead::BoundKey`
            candidate #29: `rkyv::rancor::Source`
            candidate #30: `rstar::point::PointExt`
            candidate #31: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #32: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #33: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #34: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #35: `spade::triangulation::Triangulation`
            candidate #36: `tendril::tendril::Atomicity`
            candidate #37: `typenum::marker_traits::Bit`

error[E0599]: no method named `as_single` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/extractor.rs:168:18
    |
166 | /             completion_request
167 | |                 .chat_history
168 | |                 .as_single()
    | |                 -^^^^^^^^^ method not found in `ZeroOneOrMany<message::Message>`
    | |_________________|
    |

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/domain/src/extractor.rs:174:39
    |
174 |         let stream = completion_model.prompt(prompt);
    |                                       ^^^^^^-------- argument #2 of type `&CompletionParams` is missing
    |
note: method defined here
   --> packages/domain/src/completion/core.rs:22:8
    |
22  |     fn prompt(
    |        ^^^^^^
...
25  |         params: &CompletionParams,
    |         ------
help: provide the argument
    |
174 |         let stream = completion_model.prompt(prompt, /* &CompletionParams */);
    |                                                    +++++++++++++++++++++++++

error[E0609]: no field `content` on type `CompletionChunk`
   --> packages/domain/src/extractor.rs:184:25
    |
184 |             match chunk.content {
    |                         ^^^^^^^ unknown field

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/domain/src/extractor.rs:185:22
    |
185 |                 Some(content) => complete_response.push_str(&content),
    |                      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/domain/src/extractor.rs:185:17
    |
185 |                 Some(content) => complete_response.push_str(&content),
    |                 ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:591:17
    |
591 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0308]: mismatched types
  --> packages/domain/src/lib.rs:60:41
   |
60 |     Lazy::new(|| CircuitBreaker::new(5, Duration::from_secs(30)));
   |                  -------------------    ^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `Duration`
   |                  |
   |                  arguments to this function are incorrect
   |
note: associated function defined here
  --> packages/domain/src/error.rs:44:12
   |
44 |     pub fn new(failure_threshold: u64, recovery_timeout_ms: u64) -> Self {
   |            ^^^                         ------------------------

error[E0308]: `if` and `else` have incompatible types
   --> packages/domain/src/lib.rs:145:13
    |
140 | /         if let Some(cached) = config_ref.as_ref() {
141 | |             Arc::clone(cached)
    | |             ------------------ expected because of this
142 | |         } else {
143 | |             let global_config = CONFIG_CACHE.load();
144 | |             *config_ref = Some(Arc::clone(&global_config));
145 | |             global_config
    | |             ^^^^^^^^^^^^^ expected `Arc<MemoryConfig>`, found `Guard<Arc<MemoryConfig>>`
146 | |         }
    | |_________- `if` and `else` have incompatible types
    |
    = note: expected struct `Arc<_>`
               found struct `Guard<Arc<_>>`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/domain/src/lib.rs:458:40
    |
458 |     let _ = CIRCUIT_BREAKER.call(|| -> Result<(), &'static str> {
    |                                        ^^^^^^   -------------- help: remove the unnecessary generic argument
    |                                        |
    |                                        expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/domain/src/model/error.rs:61:10
    |
61  | pub type Result<T> = std::result::Result<T, ModelError>;
    |          ^^^^^^ -

error[E0277]: `(dyn model::traits::Model + 'static)` doesn't implement `std::fmt::Debug`
  --> packages/domain/src/agent/builder.rs:20:5
   |
18 | #[derive(Debug)]
   |          ----- in this derive macro expansion
19 | pub struct AgentBuilder<const TOOLS_CAPACITY: usize = MAX_AGENT_TOOLS> {
20 |     model: Option<&'static dyn Model>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `(dyn model::traits::Model + 'static)`
   |
   = help: the following other types implement trait `std::fmt::Debug`:
             &dyn protobuf::reflect::message::generated::MessageFactory
             dyn ammonia::AttributeFilter
             dyn std::any::Any + std::marker::Send + Sync
             dyn std::any::Any + std::marker::Send
             dyn std::any::Any
             dyn tracing::Value

error[E0277]: `(dyn model::traits::Model + 'static)` doesn't implement `std::fmt::Debug`
  --> packages/domain/src/agent/core.rs:44:5
   |
42 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
43 | pub struct Agent {
44 |     pub model: &'static dyn Model,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `(dyn model::traits::Model + 'static)`
   |
   = help: the following other types implement trait `std::fmt::Debug`:
             &dyn protobuf::reflect::message::generated::MessageFactory
             dyn ammonia::AttributeFilter
             dyn std::any::Any + std::marker::Send + Sync
             dyn std::any::Any + std::marker::Send
             dyn std::any::Any
             dyn tracing::Value

error[E0308]: mismatched types
   --> packages/domain/src/agent/role.rs:167:9
    |
166 |     pub fn get_memory_tool(&self) -> Option<&dyn std::any::Any> {
    |                                      -------------------------- expected `std::option::Option<&(dyn std::any::Any + 'static)>` because of return type
167 |         self.memory.as_ref().map(|m| m.as_ref())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::any::Any`, found trait `std::any::Any + std::marker::Send + Sync`
    |
    = note: expected enum `std::option::Option<&(dyn std::any::Any + 'static)>`
               found enum `std::option::Option<&dyn std::any::Any + std::marker::Send + Sync>`

error[E0599]: no method named `entry` found for struct `Arc<SkipMap<Arc<str>, Vec<Arc<str>>>>` in the current scope
  --> packages/domain/src/chat/commands/registry.rs:81:14
   |
80 | /         self.categories
81 | |             .entry(info.category.clone())
   | |             -^^^^^ method not found in `Arc<SkipMap<Arc<str>, Vec<Arc<str>>>>`
   | |_____________|
   |

error[E0599]: no method named `get_mut` found for struct `Arc<SkipMap<Arc<str>, Vec<Arc<str>>>>` in the current scope
   --> packages/domain/src/chat/commands/registry.rs:112:62
    |
112 |         if let Some(mut category_commands) = self.categories.get_mut(&info.category) {
    |                                              ----------------^^^^^^^----------------
    |                                              |               |
    |                                              |               this is an associated function, not a method
    |                                              help: use associated function syntax instead: `Arc::<SkipMap<Arc<str>, Vec<Arc<str>>>>::get_mut(&mut self.categories, &info.category)`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`

error[E0277]: the trait bound `commands::types::CommandInfo: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/chat/commands/registry.rs:306:38
     |
306  |         serde_json::to_string_pretty(&commands).map_err(|e| CommandError::ConfigurationError {
     |         ---------------------------- ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `commands::types::CommandInfo`
     |         |
     |         required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `commands::types::CommandInfo` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Vec<commands::types::CommandInfo>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `serde_json::to_string_pretty`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/ser.rs:2258:17
     |
2256 | pub fn to_string_pretty<T>(value: &T) -> Result<String>
     |        ---------------- required by a bound in this function
2257 | where
2258 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string_pretty`

error[E0277]: the trait bound `commands::types::CommandInfo: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/commands/registry.rs:314:13
     |
314  |             serde_json::from_str(json).map_err(|e| CommandError::ConfigurationError {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `commands::types::CommandInfo`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `commands::types::CommandInfo` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1145 others
     = note: required for `Vec<commands::types::CommandInfo>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `serde_json::from_str`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/de.rs:2699:8
     |
2697 | pub fn from_str<'a, T>(s: &'a str) -> Result<T>
     |        -------- required by a bound in this function
2698 | where
2699 |     T: de::Deserialize<'a>,
     |        ^^^^^^^^^^^^^^^^^^^ required by this bound in `from_str`

error[E0609]: no field `verbosity` on type `&PersonalityConfig`
   --> packages/domain/src/chat/config.rs:336:51
    |
336 |         if !valid_verbosity.contains(&personality.verbosity.as_ref()) {
    |                                                   ^^^^^^^^^ unknown field
    |
    = note: available fields are: `personality_type`, `response_style`, `tone`, `custom_instructions`, `creativity` ... and 4 others

error[E0609]: no field `proactivity` on type `&BehaviorConfig`
   --> packages/domain/src/chat/config.rs:362:44
    |
362 |         if !(0.0..=1.0).contains(&behavior.proactivity) {
    |                                            ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `auto_response`, `response_delay`, `enable_filtering`, `max_concurrent_chats`

error[E0609]: no field `question_frequency` on type `&BehaviorConfig`
   --> packages/domain/src/chat/config.rs:371:44
    |
371 |         if !(0.0..=1.0).contains(&behavior.question_frequency) {
    |                                            ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `auto_response`, `response_delay`, `enable_filtering`, `max_concurrent_chats`

error[E0609]: no field `conversation_flow` on type `&BehaviorConfig`
   --> packages/domain/src/chat/config.rs:381:44
    |
381 |         if !valid_flows.contains(&behavior.conversation_flow.as_ref()) {
    |                                            ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `auto_response`, `response_delay`, `enable_filtering`, `max_concurrent_chats`

error[E0609]: no field `follow_up_behavior` on type `&BehaviorConfig`
   --> packages/domain/src/chat/config.rs:389:48
    |
389 |         if !valid_followups.contains(&behavior.follow_up_behavior.as_ref()) {
    |                                                ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `auto_response`, `response_delay`, `enable_filtering`, `max_concurrent_chats`

error[E0609]: no field `error_handling` on type `&BehaviorConfig`
   --> packages/domain/src/chat/config.rs:397:53
    |
397 |         if !valid_error_handling.contains(&behavior.error_handling.as_ref()) {
    |                                                     ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `auto_response`, `response_delay`, `enable_filtering`, `max_concurrent_chats`

error[E0609]: no field `layout` on type `&UIConfig`
   --> packages/domain/src/chat/config.rs:432:40
    |
432 |         if !valid_layouts.contains(&ui.layout.as_ref()) {
    |                                        ^^^^^^ unknown field
    |
    = note: available fields are: `theme`, `font_size`, `dark_mode`, `enable_animations`

error[E0609]: no field `color_scheme` on type `&UIConfig`
   --> packages/domain/src/chat/config.rs:440:46
    |
440 |         if !valid_color_schemes.contains(&ui.color_scheme.as_ref()) {
    |                                              ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `theme`, `font_size`, `dark_mode`, `enable_animations`

error[E0609]: no field `display_density` on type `&UIConfig`
   --> packages/domain/src/chat/config.rs:448:42
    |
448 |         if !valid_densities.contains(&ui.display_density.as_ref()) {
    |                                          ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `theme`, `font_size`, `dark_mode`, `enable_animations`

error[E0609]: no field `animations` on type `&UIConfig`
   --> packages/domain/src/chat/config.rs:456:43
    |
456 |         if !valid_animations.contains(&ui.animations.as_ref()) {
    |                                           ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `theme`, `font_size`, `dark_mode`, `enable_animations`

error[E0609]: no field `external_services` on type `&chat::config::IntegrationConfig`
   --> packages/domain/src/chat/config.rs:483:37
    |
483 |         for service in &integration.external_services {
    |                                     ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `enabled_integrations`, `credentials`, `webhooks`

error[E0609]: no field `api_configurations` on type `&chat::config::IntegrationConfig`
   --> packages/domain/src/chat/config.rs:493:33
    |
493 |         for api in &integration.api_configurations {
    |                                 ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `enabled_integrations`, `credentials`, `webhooks`

error[E0609]: no field `authentication` on type `&chat::config::IntegrationConfig`
   --> packages/domain/src/chat/config.rs:503:34
    |
503 |         for auth in &integration.authentication {
    |                                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `enabled_integrations`, `credentials`, `webhooks`

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:906:34
    |
906 |         self.config.creativity = creativity.clamp(0.0, 1.0);
    |         ----------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |         |
    |         expected due to the type of this binding

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:912:33
    |
912 |         self.config.formality = formality.clamp(0.0, 1.0);
    |         ---------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |         |
    |         expected due to the type of this binding

error[E0609]: no field `traits` on type `PersonalityConfig`
   --> packages/domain/src/chat/config.rs:924:21
    |
924 |         self.config.traits.push(trait_name.into());
    |                     ^^^^^^ unknown field
    |
    = note: available fields are: `personality_type`, `response_style`, `tone`, `custom_instructions`, `creativity` ... and 4 others

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:936:29
    |
936 |         self.config.humor = humor.clamp(0.0, 1.0);
    |         -----------------   ^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |         |
    |         expected due to the type of this binding

error[E0308]: mismatched types
   --> packages/domain/src/chat/config.rs:942:31
    |
942 |         self.config.empathy = empathy.clamp(0.0, 1.0);
    |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |         |
    |         expected due to the type of this binding

error[E0609]: no field `verbosity` on type `PersonalityConfig`
   --> packages/domain/src/chat/config.rs:948:21
    |
948 |         self.config.verbosity = verbosity.into();
    |                     ^^^^^^^^^ unknown field
    |
    = note: available fields are: `personality_type`, `response_style`, `tone`, `custom_instructions`, `creativity` ... and 4 others

error[E0277]: the trait bound `message::Message: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/chat/export.rs:91:34
     |
91   |     serde_json::to_string_pretty(limited_messages).map_err(|e| ExportError::SerializationError {
     |     ---------------------------- ^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `message::Message`
     |     |
     |     required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `[message::Message]` to implement `validation::_::_serde::Serialize`
note: required by a bound in `serde_json::to_string_pretty`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/ser.rs:2258:17
     |
2256 | pub fn to_string_pretty<T>(value: &T) -> Result<String>
     |        ---------------- required by a bound in this function
2257 | where
2258 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string_pretty`

error[E0609]: no field `role` on type `&message::Message`
   --> packages/domain/src/chat/export.rs:111:55
    |
111 |         output.push_str(&format!("## {}\n\n", message.role));
    |                                                       ^^^^ unknown field
    |
    = note: available fields are: `id`, `message_type`, `content`, `metadata`, `timestamp` ... and 2 others

error[E0308]: mismatched types
    --> packages/domain/src/chat/export.rs:112:25
     |
112  |         output.push_str(&message.content);
     |                -------- ^^^^^^^^^^^^^^^^ expected `&str`, found `&ArrayVec<u8, 256>`
     |                |
     |                arguments to this method are incorrect
     |
     = note: expected reference `&str`
                found reference `&ArrayVec<u8, 256>`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs:1112:12
     |
1112 |     pub fn push_str(&mut self, string: &str) {
     |            ^^^^^^^^

error[E0277]: `std::time::Instant` doesn't implement `std::fmt::Display`
   --> packages/domain/src/chat/export.rs:116:61
    |
116 |             output.push_str(&format!("*Timestamp: {}*\n\n", message.timestamp));
    |                                                   --        ^^^^^^^^^^^^^^^^^ `std::time::Instant` cannot be formatted with the default formatter
    |                                                   |
    |                                                   required by this formatting parameter
    |
    = help: the trait `std::fmt::Display` is not implemented for `std::time::Instant`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `role` on type `&message::Message`
   --> packages/domain/src/chat/export.rs:137:54
    |
137 |         output.push_str(&format!("{}: {}\n", message.role, message.content));
    |                                                      ^^^^ unknown field
    |
    = note: available fields are: `id`, `message_type`, `content`, `metadata`, `timestamp` ... and 2 others

error[E0277]: `std::time::Instant` doesn't implement `std::fmt::Display`
   --> packages/domain/src/chat/export.rs:140:57
    |
140 |             output.push_str(&format!("Timestamp: {}\n", message.timestamp));
    |                                                  --     ^^^^^^^^^^^^^^^^^ `std::time::Instant` cannot be formatted with the default formatter
    |                                                  |
    |                                                  required by this formatting parameter
    |
    = help: the trait `std::fmt::Display` is not implemented for `std::time::Instant`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `replace` found for struct `ArrayVec<u8, 256>` in the current scope
    --> packages/domain/src/chat/export.rs:169:47
     |
169  |         let escaped_content = message.content.replace('"', "\"\"");
     |                                               ^^^^^^^
     |
     = help: items from traits can only be used if the trait is in scope
help: there is a method `replacen` with a similar name, but with different arguments
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bstr-1.12.0/src/ext_slice.rs:1592:5
     |
1592 | /     fn replacen<N: AsRef<[u8]>, R: AsRef<[u8]>>(
1593 | |         &self,
1594 | |         needle: N,
1595 | |         replacement: R,
1596 | |         limit: usize,
1597 | |     ) -> Vec<u8> {
     | |________________^
help: trait `ByteSlice` which provides `replace` is implemented but not in scope; perhaps you want to import it
     |
6    + use gix::bstr::ByteSlice;
     |

error[E0609]: no field `role` on type `&message::Message`
   --> packages/domain/src/chat/export.rs:173:25
    |
173 |                 message.role, escaped_content, message.timestamp
    |                         ^^^^ unknown field
    |
    = note: available fields are: `id`, `message_type`, `content`, `metadata`, `timestamp` ... and 2 others

error[E0609]: no field `role` on type `&message::Message`
   --> packages/domain/src/chat/export.rs:176:65
    |
176 |             output.push_str(&format!("\"{}\",\"{}\"\n", message.role, escaped_content));
    |                                                                 ^^^^ unknown field
    |
    = note: available fields are: `id`, `message_type`, `content`, `metadata`, `timestamp` ... and 2 others

error[E0282]: type annotations needed for `Arc<_, _>`
   --> packages/domain/src/chat/formatting.rs:105:13
    |
105 |         let html_arc = Arc::from(html);
    |             ^^^^^^^^
...
108 |         self.cache.insert(content_arc, html_arc.clone());
    |                                                 ----- type must be known at this point
    |
help: consider giving `html_arc` an explicit type, where the type for type parameter `T` is specified
    |
105 |         let html_arc: Arc<T, A> = Arc::from(html);
    |                     +++++++++++

error[E0308]: mismatched types
   --> packages/domain/src/chat/macros.rs:611:9
    |
610 |       pub fn get_execution_stats(&self, macro_id: Uuid) -> Option<ExecutionStats> {
    |                                                            ---------------------- expected `std::option::Option<ExecutionStats>` because of return type
611 | /         self.execution_stats
612 | |             .get(&macro_id)
613 | |             .map(|entry| (*entry.value()).clone())
    | |__________________________________________________^ expected `Option<ExecutionStats>`, found `Option<Arc<ExecutionStats>>`
    |
    = note: expected enum `std::option::Option<ExecutionStats>`
               found enum `std::option::Option<Arc<ExecutionStats>>`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/chat/realtime.rs:40:9
     |
40   |         message: Message,
     |         ^^^^^^^---------
     |         |
     |         the trait `validation::_::_serde::Serialize` is not implemented for `message::Message`
     |         required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
note: required by a bound in `validation::_::_serde::ser::SerializeStructVariant::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1930:21
     |
1928 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1929 |     where
1930 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStructVariant::serialize_field`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/realtime.rs:40:18
     |
40   |         message: Message,
     |                  ^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1165 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/realtime.rs:40:18
     |
40   |         message: Message,
     |                  ^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1165 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/chat/realtime.rs:24:35
   |
24 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1165 others
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `clone` found for struct `SkipMap` in the current scope
   --> packages/domain/src/chat/realtime.rs:315:48
    |
315 |         let typing_states = self.typing_states.clone();
    |                                                ^^^^^ method not found in `SkipMap<Arc<str>, Arc<TypingState>>`

error[E0599]: no method named `clone` found for struct `AtomicU64` in the current scope
   --> packages/domain/src/chat/realtime.rs:316:52
    |
316 |         let expiry_duration = self.expiry_duration.clone();
    |                                                    ^^^^^ method not found in `AtomicU64`

error[E0599]: no method named `clone` found for struct `AtomicU64` in the current scope
   --> packages/domain/src/chat/realtime.rs:317:54
    |
317 |         let cleanup_interval = self.cleanup_interval.clone();
    |                                                      ^^^^^ method not found in `AtomicU64`

error[E0599]: no method named `clone` found for struct `ConsistentCounter` in the current scope
   --> packages/domain/src/chat/realtime.rs:319:46
    |
319 |         let active_users = self.active_users.clone();
    |                                              ^^^^^ method not found in `ConsistentCounter`

error[E0599]: no method named `dec` found for struct `ConsistentCounter` in the current scope
   --> packages/domain/src/chat/realtime.rs:824:37
    |
824 |             self.connection_counter.dec();
    |                                     ^^^ method not found in `ConsistentCounter`

error[E0599]: no method named `clone` found for struct `SkipMap` in the current scope
   --> packages/domain/src/chat/realtime.rs:872:44
    |
872 |         let connections = self.connections.clone();
    |                                            ^^^^^ method not found in `SkipMap<Arc<str>, Arc<ConnectionState>>`

error[E0599]: no method named `clone` found for struct `AtomicU64` in the current scope
   --> packages/domain/src/chat/realtime.rs:873:56
    |
873 |         let heartbeat_timeout = self.heartbeat_timeout.clone();
    |                                                        ^^^^^ method not found in `AtomicU64`

error[E0599]: no method named `clone` found for struct `AtomicU64` in the current scope
   --> packages/domain/src/chat/realtime.rs:874:64
    |
874 |         let health_check_interval = self.health_check_interval.clone();
    |                                                                ^^^^^ method not found in `AtomicU64`

error[E0599]: no method named `clone` found for struct `ConsistentCounter` in the current scope
   --> packages/domain/src/chat/realtime.rs:876:72
    |
876 |         let failed_connection_counter = self.failed_connection_counter.clone();
    |                                                                        ^^^^^ method not found in `ConsistentCounter`

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/chat/templates.rs:146:24
     |
146  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CompiledTemplate`
...
162  | /     /// Compiled template
163  | |     compiled: Option<CompiledTemplate>,
     | |______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/templates.rs:163:15
     |
163  |     compiled: Option<CompiledTemplate>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1153 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/chat/templates.rs:163:15
     |
163  |     compiled: Option<CompiledTemplate>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1153 others
     = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CompiledTemplate: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/chat/templates.rs:146:35
    |
146 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CompiledTemplate`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CompiledTemplate` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1153 others
    = note: required for `std::option::Option<CompiledTemplate>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:691:41
    |
691 |             "if" => self.parse_if_block(parts),
    |                          -------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                          |
    |                          arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:702:8
    |
702 |     fn parse_if_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
691 |             "if" => self.parse_if_block(&parts),
    |                                         +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:692:45
    |
692 |             "each" => self.parse_each_block(parts),
    |                            ---------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                            |
    |                            arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:722:8
    |
722 |     fn parse_each_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
692 |             "each" => self.parse_each_block(&parts),
    |                                             +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:693:45
    |
693 |             "with" => self.parse_with_block(parts),
    |                            ---------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                            |
    |                            arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:745:8
    |
745 |     fn parse_with_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
693 |             "with" => self.parse_with_block(&parts),
    |                                             +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:773:41
    |
773 |             "if" => self.parse_if_block(parts),
    |                          -------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                          |
    |                          arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:702:8
    |
702 |     fn parse_if_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
773 |             "if" => self.parse_if_block(&parts),
    |                                         +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:774:43
    |
774 |             "for" => self.parse_for_block(parts),
    |                           --------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                           |
    |                           arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:785:8
    |
785 |     fn parse_for_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
774 |             "for" => self.parse_for_block(&parts),
    |                                           +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:775:51
    |
775 |             "include" => self.parse_include_block(parts),
    |                               ------------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                               |
    |                               arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:804:8
    |
804 |     fn parse_include_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
775 |             "include" => self.parse_include_block(&parts),
    |                                                   +

error[E0308]: mismatched types
   --> packages/domain/src/chat/templates.rs:776:47
    |
776 |             "macro" => self.parse_macro_block(parts),
    |                             ----------------- ^^^^^ expected `&[&str]`, found `Vec<&str>`
    |                             |
    |                             arguments to this method are incorrect
    |
    = note: expected reference `&[&str]`
                  found struct `Vec<&str>`
note: method defined here
   --> packages/domain/src/chat/templates.rs:822:8
    |
822 |     fn parse_macro_block(&self, parts: &[&str]) -> TemplateResult<TemplateAst> {
    |        ^^^^^^^^^^^^^^^^^        --------------
help: consider borrowing here
    |
776 |             "macro" => self.parse_macro_block(&parts),
    |                                               +

error[E0308]: mismatched types
    --> packages/domain/src/chat/templates.rs:1152:49
     |
1152 |                         Ok(value.to_string() == right)
     |                            -----------------    ^^^^^ expected `Arc<str>`, found `&str`
     |                            |
     |                            expected because this is `Arc<str>`
     |
     = note: expected struct `Arc<str>`
             found reference `&str`
help: call `Into::into` on this expression to convert `&str` into `Arc<str>`
     |
1152 |                         Ok(value.to_string() == right.into())
     |                                                      +++++++

error[E0308]: mismatched types
    --> packages/domain/src/chat/templates.rs:1166:49
     |
1166 |                         Ok(value.to_string() != right)
     |                            -----------------    ^^^^^ expected `Arc<str>`, found `&str`
     |                            |
     |                            expected because this is `Arc<str>`
     |
     = note: expected struct `Arc<str>`
             found reference `&str`
help: call `Into::into` on this expression to convert `&str` into `Arc<str>`
     |
1166 |                         Ok(value.to_string() != right.into())
     |                                                      +++++++

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:223:17
    |
222 |             return Err(CompletionCoreError::InvalidRequest(
    |                        ----------------------------------- arguments to this enum variant are incorrect
223 |                 "prompt cannot be empty",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:43:5
    |
43  |     InvalidRequest(String),
    |     ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:229:17
    |
228 |             return Err(CompletionCoreError::InvalidRequest(
    |                        ----------------------------------- arguments to this enum variant are incorrect
229 |                 "max_tokens must be > 0",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:43:5
    |
43  |     InvalidRequest(String),
    |     ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:275:56
    |
275 |             .map_err(|_| CompletionCoreError::Internal("invalid UTF-8 in response"))
    |                          ----------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                          |                             |
    |                          |                             expected `String`, found `&str`
    |                          arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:64:5
    |
64  |     Internal(String),
    |     ^^^^^^^^

error[E0308]: mismatched types
   --> packages/domain/src/completion/candle.rs:404:17
    |
403 |             return Err(CompletionCoreError::Internal(
    |                        ----------------------------- arguments to this enum variant are incorrect
404 |                 "response text cannot be empty",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `&str`
    |
note: tuple variant defined here
   --> packages/domain/src/completion/candle.rs:64:5
    |
64  |     Internal(String),
    |     ^^^^^^^^

error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied
   --> packages/domain/src/completion/candle.rs:506:23
    |
506 |     let mut buffer = [std::mem::MaybeUninit::uninit(); 1024];
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`
    |
    = note: required for `MaybeUninit<T>` to implement `std::marker::Copy`
    = note: the `Copy` trait is required because this value will be copied for each element of the array
help: consider further restricting type parameter `T` with trait `Copy`
    |
504 |     F: FnOnce(&mut [std::mem::MaybeUninit<T>]) -> R, T: std::marker::Copy
    |                                                      ++++++++++++++++++++
help: create an inline `const` block
    |
506 |     let mut buffer = [const { std::mem::MaybeUninit::uninit() }; 1024];
    |                       +++++++                                 +

error[E0277]: the trait bound `message::Message: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/completion/request.rs:17:24
     |
17   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `message::Message`
...
22   | /     /// Conversation history
23   | |     pub chat_history: ZeroOneOrMany<Message>,
     | |____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `ZeroOneOrMany<message::Message>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:23:23
     |
23   |     pub chat_history: ZeroOneOrMany<Message>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1146 others
     = note: required for `ZeroOneOrMany<message::Message>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `&'a serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:35:28
     |
35   |     pub additional_params: Option<&'a Value>,
     |                            ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&'a serde_json::Value` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
             but it is implemented for `serde_json::Value`
     = help: for that trait implementation, expected `serde_json::Value`, found `&'a serde_json::Value`
     = note: required for `std::option::Option<&'a serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:23:23
     |
23   |     pub chat_history: ZeroOneOrMany<Message>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1146 others
     = note: required for `ZeroOneOrMany<message::Message>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `&'a serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/completion/request.rs:35:28
     |
35   |     pub additional_params: Option<&'a Value>,
     |                            ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&'a serde_json::Value` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&'a serde_json::Value`
             but it is implemented for `serde_json::Value`
     = help: for that trait implementation, expected `serde_json::Value`, found `&'a serde_json::Value`
     = note: required for `std::option::Option<&'a serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `message::Message: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/completion/request.rs:17:35
   |
17 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `message::Message`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `message::Message` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1146 others
   = note: required for `ZeroOneOrMany<message::Message>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `&serde_json::Value: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/completion/request.rs:17:35
   |
17 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&serde_json::Value`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `&serde_json::Value` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `&serde_json::Value`
           but it is implemented for `serde_json::Value`
   = help: for that trait implementation, expected `serde_json::Value`, found `&serde_json::Value`
   = note: required for `std::option::Option<&serde_json::Value>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/completion/request.rs:114:42
    |
114 |             chat_history: ZeroOneOrMany::Zero,
    |                                          ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/completion/request.rs:115:39
    |
115 |             documents: ZeroOneOrMany::Zero,
    |                                       ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0599]: no variant or associated item named `Zero` found for enum `ZeroOneOrMany` in the current scope
   --> packages/domain/src/completion/request.rs:116:35
    |
116 |             tools: ZeroOneOrMany::Zero,
    |                                   ^^^^ variant or associated item not found in `ZeroOneOrMany<_>`

error[E0277]: `SurrealDBMemoryManager` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/context/provider.rs:106:5
    |
104 | #[derive(Debug)]
    |          ----- in this derive macro expansion
105 | pub struct MemoryIntegration {
106 |     memory_manager: Arc<SurrealDBMemoryManager>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `SurrealDBMemoryManager`
    |
    = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`

error[E0277]: `(dyn fluent_ai_memory::vector::EmbeddingModel + 'static)` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/context/provider.rs:107:5
    |
104 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
107 |     embedding_model: Arc<dyn EmbeddingModel>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `(dyn fluent_ai_memory::vector::EmbeddingModel + 'static)`
    |
    = help: the following other types implement trait `std::fmt::Debug`:
              &dyn protobuf::reflect::message::generated::MessageFactory
              dyn ammonia::AttributeFilter
              dyn std::any::Any + std::marker::Send + Sync
              dyn std::any::Any + std::marker::Send
              dyn std::any::Any
              dyn tracing::Value

error[E0277]: the trait bound `std::result::Result<std::string::String, ContextError>: From<std::string::String>` is not satisfied
   --> packages/domain/src/context/provider.rs:275:52
    |
275 |         String::from_utf8_lossy(&mmap).to_string().into()
    |                                                    ^^^^ the trait `From<std::string::String>` is not implemented for `std::result::Result<std::string::String, ContextError>`
    |
    = help: the following other types implement trait `From<T>`:
              `std::result::Result<(), idna::Errors>` implements `From<idna::Errors>`
              `std::result::Result<(), ring::error::unspecified::Unspecified>` implements `From<ring::bssl::Result>`
              `std::result::Result<R, L>` implements `From<rayon::iter::Either<L, R>>`
              `std::result::Result<miniz_oxide::MZStatus, miniz_oxide::MZError>` implements `From<&miniz_oxide::StreamResult>`
              `std::result::Result<miniz_oxide::MZStatus, miniz_oxide::MZError>` implements `From<miniz_oxide::StreamResult>`
    = note: required for `std::string::String` to implement `Into<std::result::Result<std::string::String, ContextError>>`
help: consider removing this method call, as the receiver has type `Cow<'_, str>` and `Cow<'_, str>: From<std::string::String>` trivially holds
    |
275 -         String::from_utf8_lossy(&mmap).to_string().into()
275 +         String::from_utf8_lossy(&mmap).into()
    |

error[E0277]: the trait bound `std::string::String: From<T>` is not satisfied
   --> packages/domain/src/embedding/config.rs:136:43
    |
136 |         EmbeddingConfig::new().with_model(self)
    |                                ---------- ^^^^ the trait `From<T>` is not implemented for `std::string::String`
    |                                |
    |                                required by a bound introduced by this call
    |
    = note: required for `T` to implement `Into<std::string::String>`
note: required by a bound in `embedding::config::EmbeddingConfig::with_model`
   --> packages/domain/src/embedding/config.rs:75:45
    |
75  |     pub fn with_model(mut self, model: impl Into<String>) -> Self {
    |                                             ^^^^^^^^^^^^ required by this bound in `EmbeddingConfig::with_model`
help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement
    |
134 | impl<T: AsRef<str>> IntoEmbeddingConfig for T where std::string::String: From<T> {
    |                                               ++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> packages/domain/src/embedding/usage.rs:57:18
   |
57 |         self.add(&rhs)
   |              --- ^^^^ expected `EmbeddingUsage`, found `&EmbeddingUsage`
   |              |
   |              arguments to this method are incorrect
   |
help: the return type of this call is `&EmbeddingUsage` due to the type of the argument passed
  --> packages/domain/src/embedding/usage.rs:57:9
   |
57 |         self.add(&rhs)
   |         ^^^^^^^^^----^
   |                  |
   |                  this argument influences the return type of `add`
note: method defined here
  --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:93:8
   |
93 |     fn add(self, rhs: Rhs) -> Self::Output;
   |        ^^^
help: consider removing the borrow
   |
57 -         self.add(&rhs)
57 +         self.add(rhs)
   |

error[E0658]: use of unstable library feature `thread_id_value`
   --> packages/domain/src/error.rs:279:52
    |
279 |             thread_id: std::thread::current().id().as_u64().get(),
    |                                                    ^^^^^^
    |
    = note: see issue #67939 <https://github.com/rust-lang/rust/issues/67939> for more information
    = help: add `#![feature(thread_id_value)]` to the crate attributes to enable
    = note: this compiler was built on 2025-07-06; consider upgrading it if it is out of date

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:599:20
    |
599 |             total: RelaxedCounter::new(0),
    |                    ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:601:17
    |
601 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:602:17
    |
602 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:603:17
    |
603 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:604:17
    |
604 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:605:17
    |
605 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:606:17
    |
606 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:607:17
    |
607 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:608:17
    |
608 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:609:17
    |
609 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:610:17
    |
610 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:613:17
    |
613 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:614:17
    |
614 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:615:17
    |
615 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:616:17
    |
616 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:619:17
    |
619 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:620:17
    |
620 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:621:17
    |
621 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in constants
   --> packages/domain/src/error.rs:622:17
    |
622 |                 RelaxedCounter::new(0),
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:112:28
    |
112 |             system_prompt: system_prompt.clone(),
    |                            ^^^^^^^^^^^^^^^^^^^^^ expected `Cow<'_, str>`, found `String`
    |
    = note: expected enum `Cow<'_, str>`
             found struct `std::string::String`
help: call `Into::into` on this expression to convert `std::string::String` into `Cow<'_, str>`
    |
112 |             system_prompt: system_prompt.clone().into(),
    |                                                 +++++++

error[E0560]: struct `message::Message` has no field named `role`
   --> packages/domain/src/extractor.rs:114:17
    |
114 |                 role: "user".to_string(),
    |                 ^^^^ `message::Message<_>` does not have this field
    |
    = note: available fields are: `id`, `message_type`, `metadata`, `priority`, `retry_count`

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:115:26
    |
115 |                 content: text.to_string(),
    |                          ^^^^^^^^^^^^^^^^ expected `ArrayVec<u8, 256>`, found `String`
    |
    = note: expected struct `ArrayVec<u8, 256>`
               found struct `std::string::String`

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:120:26
    |
120 |             temperature: self.agent.temperature,
    |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `Option<f64>`
    |
    = note: expected type `f64`
               found enum `std::option::Option<f64>`
help: consider using `Option::expect` to unwrap the `std::option::Option<f64>` value, panicking if the value is an `Option::None`
    |
120 |             temperature: self.agent.temperature.expect("REASON"),
    |                                                +++++++++++++++++

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:121:25
    |
121 |             max_tokens: self.agent.max_tokens,
    |                         ^^^^^^^^^^^^^^^^^^^^^ expected `Option<NonZero<u64>>`, found `Option<u64>`
    |
    = note: expected enum `std::option::Option<NonZero<u64>>`
               found enum `std::option::Option<u64>`

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:123:32
    |
123 |             additional_params: self.agent.additional_params.clone(),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&Value>`, found `Option<Value>`
    |
    = note: expected enum `std::option::Option<&serde_json::Value>`
               found enum `std::option::Option<serde_json::Value>`
help: try using `.as_ref()` to convert `std::option::Option<serde_json::Value>` to `std::option::Option<&serde_json::Value>`
    |
123 |             additional_params: self.agent.additional_params.clone().as_ref(),
    |                                                                    +++++++++

error[E0308]: mismatched types
   --> packages/domain/src/extractor.rs:287:9
    |
260 |     fn prompt(&self, prompt: Prompt, params: &CompletionParams) -> crate::async_task::AsyncStream<CompletionChunk> {
    |                                                                    ----------------------------------------------- expected `async_task::AsyncStream<CompletionChunk>` because of return type
...
287 |         Box::pin(tokio_stream::wrappers::UnboundedReceiverStream::new(rx))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `AsyncStream<CompletionChunk>`, found `Pin<Box<UnboundedReceiverStream<...>>>`
    |
    = note: expected struct `async_task::AsyncStream<CompletionChunk>`
               found struct `Pin<Box<UnboundedReceiverStream<CompletionChunk>>>`

error[E0277]: the trait bound `CachePadded<MemoryNodeMetadata>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:23:24
     |
23   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<MemoryNodeMetadata>`
...
32   | /     /// Cache-padded metadata to prevent false sharing
33   | |     metadata: Arc<CachePadded<MemoryNodeMetadata>>,
     | |__________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<MemoryNodeMetadata>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, MemoryRelationshipEntry>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:23:24
     |
23   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `SkipMap<Uuid, MemoryRelationshipEntry>`
...
35   | /     /// Lock-free relationship tracking with skip-list
36   | |     relationships: Arc<SkipMap<Uuid, MemoryRelationshipEntry>>,
     | |______________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SkipMap<Uuid, MemoryRelationshipEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<MemoryNodeStats>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:23:24
     |
23   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<MemoryNodeStats>`
...
38   | /     /// Atomic access statistics for concurrent monitoring
39   | |     stats: Arc<CachePadded<MemoryNodeStats>>,
     | |____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<MemoryNodeStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<MemoryNodeMetadata>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:33:15
     |
33   |     metadata: Arc<CachePadded<MemoryNodeMetadata>>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeMetadata>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeMetadata>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `SkipMap<Uuid, MemoryRelationshipEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:36:20
     |
36   |     relationships: Arc<SkipMap<Uuid, MemoryRelationshipEntry>>,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, MemoryRelationshipEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, MemoryRelationshipEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<MemoryNodeStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:39:12
     |
39   |     stats: Arc<CachePadded<MemoryNodeStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<MemoryNodeMetadata>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:33:15
     |
33   |     metadata: Arc<CachePadded<MemoryNodeMetadata>>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeMetadata>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeMetadata>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `SkipMap<Uuid, MemoryRelationshipEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:36:20
     |
36   |     relationships: Arc<SkipMap<Uuid, MemoryRelationshipEntry>>,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, MemoryRelationshipEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, MemoryRelationshipEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<MemoryNodeStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/node.rs:39:12
     |
39   |     stats: Arc<CachePadded<MemoryNodeStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1150 others
     = note: required for `Box<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<MemoryNodeMetadata>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/primitives/node.rs:23:35
   |
23 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeMetadata>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeMetadata>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1150 others
   = note: required for `Box<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<MemoryNodeMetadata>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, MemoryRelationshipEntry>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/primitives/node.rs:23:35
   |
23 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, MemoryRelationshipEntry>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, MemoryRelationshipEntry>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1150 others
   = note: required for `Box<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<SkipMap<Uuid, MemoryRelationshipEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<MemoryNodeStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/primitives/node.rs:23:35
   |
23 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<MemoryNodeStats>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<MemoryNodeStats>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1150 others
   = note: required for `Box<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<MemoryNodeStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/primitives/node.rs:632:41
    |
632 |             .ok_or_else(|| MemoryError::validation("Memory type is required"))?;
    |                                         ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
632 -             .ok_or_else(|| MemoryError::validation("Memory type is required"))?;
632 +             .ok_or_else(|| MemoryError::Validation("Memory type is required"))?;
    |

error[E0277]: the trait bound `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>: Serialize` is not satisfied
    --> packages/domain/src/memory/primitives/types.rs:306:24
     |
306  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>`
...
318  | /     /// Concurrent metadata with crossbeam access optimization
319  | |     pub metadata: Arc<parking_lot::RwLock<HashMap<Arc<str>, Arc<serde_json::Value>>>>,
     | |_____________________________________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-9359296889965955912.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/types.rs:319:19
     |
319  |     pub metadata: Arc<parking_lot::RwLock<HashMap<Arc<str>, Arc<serde_json::Value>>>>,
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1152 others
     = note: required for `Box<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-9359296889965955912.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/primitives/types.rs:319:19
     |
319  |     pub metadata: Arc<parking_lot::RwLock<HashMap<Arc<str>, Arc<serde_json::Value>>>>,
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1152 others
     = note: required for `Box<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-9359296889965955912.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>: Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/primitives/types.rs:306:35
    |
306 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1152 others
    = note: required for `Box<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `Arc<RwLock<RawRwLock, HashMap<Arc<str>, Arc<Value>>>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-9359296889965955912.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f32: std::cmp::Eq` is not satisfied
   --> packages/domain/src/memory/primitives/types.rs:402:5
    |
391 | #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
    |                                   -- in this derive macro expansion
...
402 |     pub strength: f32,
    |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `f32`
    |
    = help: the following other types implement trait `std::cmp::Eq`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and 4 others
note: required by a bound in `AssertParamIsEq`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:367:31
    |
367 | pub struct AssertParamIsEq<T: Eq + PointeeSized> {
    |                               ^^ required by this bound in `AssertParamIsEq`

error[E0277]: the trait bound `f32: std::hash::Hash` is not satisfied
   --> packages/domain/src/memory/primitives/types.rs:402:5
    |
391 | #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
    |                                       ---- in this derive macro expansion
...
402 |     pub strength: f32,
    |     ^^^^^^^^^^^^^^^^^ the trait `std::hash::Hash` is not implemented for `f32`
    |
    = help: the following other types implement trait `std::hash::Hash`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and 4 others

error[E0308]: mismatched types
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ expected `&Vec<_, _>`, found `&AlignedActivationPattern`
...
22   |     #[serde(skip_serializing_if = "Vec::is_empty")]
     |                                   --------------- arguments to this function are incorrect
     |
     = note: expected reference `&Vec<_, _>`
                found reference `&memory::cognitive::types::AlignedActivationPattern`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2762:18
     |
2762 |     pub const fn is_empty(&self) -> bool {
     |                  ^^^^^^^^
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<memory::cognitive::types::AtomicAttentionWeights>`
...
25   | /     /// Atomic attention weights for concurrent updates
26   | |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     | |_______________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<memory::cognitive::types::AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-13879022765372816336.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SegQueue<memory::cognitive::types::WorkingMemoryItem>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `SegQueue<memory::cognitive::types::WorkingMemoryItem>`
...
28   | /     /// Lock-free working memory queue
29   | |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     | |____________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SegQueue<memory::cognitive::types::WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>`
...
31   | /     /// Long-term memory skip-list for O(log n) access
32   | |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     | |______________________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-8544186932842278726.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<memory::cognitive::types::TemporalContext>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
...
34   | /     /// Temporal context with optimized time operations
35   | |     temporal_context: Arc<CachePadded<TemporalContext>>,
     | |_______________________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<AtomicF32>`
...
37   | /     /// Atomic uncertainty and confidence tracking
38   | |     uncertainty: Arc<CachePadded<AtomicF32>>,
     | |____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:19:24
     |
19   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `CachePadded<CognitiveStats>`
...
42   | /     /// Statistics for monitoring cognitive performance
43   | |     stats: Arc<CachePadded<CognitiveStats>>,
     | |___________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:26:24
     |
26   |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::AtomicAttentionWeights>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-9978554561893813254.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `SegQueue<memory::cognitive::types::WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:29:21
     |
29   |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<memory::cognitive::types::WorkingMemoryItem>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<memory::cognitive::types::WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:32:23
     |
32   |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-8103050795539500201.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:35:23
     |
35   |     temporal_context: Arc<CachePadded<TemporalContext>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-3033260476768292968.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:38:18
     |
38   |     uncertainty: Arc<CachePadded<AtomicF32>>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:39:17
     |
39   |     confidence: Arc<CachePadded<AtomicF32>>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:40:21
     |
40   |     meta_awareness: Arc<CachePadded<AtomicF32>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:43:12
     |
43   |     stats: Arc<CachePadded<CognitiveStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:26:24
     |
26   |     attention_weights: Arc<CachePadded<AtomicAttentionWeights>>,
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::AtomicAttentionWeights>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::AtomicAttentionWeights>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-6429710075900109979.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `SegQueue<memory::cognitive::types::WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:29:21
     |
29   |     working_memory: Arc<SegQueue<WorkingMemoryItem>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<memory::cognitive::types::WorkingMemoryItem>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<memory::cognitive::types::WorkingMemoryItem>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:32:23
     |
32   |     long_term_memory: Arc<SkipMap<Uuid, CognitiveMemoryEntry>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-13421273119019513447.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:35:23
     |
35   |     temporal_context: Arc<CachePadded<TemporalContext>>,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
     = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-11797199994449107583.txt'
     = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:38:18
     |
38   |     uncertainty: Arc<CachePadded<AtomicF32>>,
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:39:17
     |
39   |     confidence: Arc<CachePadded<AtomicF32>>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:40:21
     |
40   |     meta_awareness: Arc<CachePadded<AtomicF32>>,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:43:12
     |
43   |     stats: Arc<CachePadded<CognitiveStats>>,
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CachePadded<AtomicAttentionWeights>: Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::AtomicAttentionWeights>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::AtomicAttentionWeights>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<memory::cognitive::types::AtomicAttentionWeights>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-2093030747719264355.txt'
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SegQueue<memory::cognitive::types::WorkingMemoryItem>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SegQueue<memory::cognitive::types::WorkingMemoryItem>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SegQueue<memory::cognitive::types::WorkingMemoryItem>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<SegQueue<memory::cognitive::types::WorkingMemoryItem>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SkipMap<Uuid, CognitiveMemoryEntry>: Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<SkipMap<Uuid, memory::cognitive::types::CognitiveMemoryEntry>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-16640129696689612860.txt'
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<TemporalContext>: Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<memory::cognitive::types::TemporalContext>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<memory::cognitive::types::TemporalContext>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<memory::cognitive::types::TemporalContext>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: the full name for the type has been written to '/Volumes/samsung_t9/fluent-ai/target/debug/deps/fluent_ai_domain-bc173f09c7643dd4.long-type-2012629034563981746.txt'
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<AtomicF32>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<AtomicF32>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<AtomicF32>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<AtomicF32>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CachePadded<CognitiveStats>: validation::_::_serde::Deserialize<'_>` is not satisfied
  --> packages/domain/src/memory/cognitive/types.rs:19:35
   |
19 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `CachePadded<CognitiveStats>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CachePadded<CognitiveStats>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
             `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
             `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
             `&'a str` implements `validation::_::_serde::Deserialize<'de>`
             `()` implements `validation::_::_serde::Deserialize<'de>`
             `(T,)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
             `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
           and 1156 others
   = note: required for `Box<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `Arc<CachePadded<CognitiveStats>>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ expected `&Vec<_, _>`, found `&AlignedCoherenceFingerprint`
...
397  |     #[serde(skip_serializing_if = "Vec::is_empty")]
     |                                   --------------- arguments to this function are incorrect
     |
     = note: expected reference `&Vec<_, _>`
                found reference `&memory::cognitive::types::AlignedCoherenceFingerprint`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2762:18
     |
2762 |     pub const fn is_empty(&self) -> bool {
     |                  ^^^^^^^^
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `AtomicF32`
...
406  | /     /// Atomic collapse probability tracking
407  | |     collapse_probability: Arc<AtomicF32>,
     | |________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:394:24
     |
394  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `AtomicF64`
...
409  | /     /// Quantum entropy measurement
410  | |     quantum_entropy: Arc<AtomicF64>,
     | |___________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
     = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Serialize`
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:407:27
     |
407  |     collapse_probability: Arc<AtomicF32>,
     |                           ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:410:22
     |
410  |     quantum_entropy: Arc<AtomicF64>,
     |                      ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:407:27
     |
407  |     collapse_probability: Arc<AtomicF32>,
     |                           ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/cognitive/types.rs:410:22
     |
410  |     quantum_entropy: Arc<AtomicF64>,
     |                      ^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1156 others
     = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `AtomicF32: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/cognitive/types.rs:394:35
    |
394 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF32`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF32` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1156 others
    = note: required for `Box<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `Arc<AtomicF32>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AtomicF64: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/cognitive/types.rs:394:35
    |
394 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `AtomicF64`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `AtomicF64` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1156 others
    = note: required for `Box<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `Arc<AtomicF64>` to implement `validation::_::_serde::Deserialize<'_>`
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/database.rs:488:38
    |
488 |                     Err(MemoryError::validation(
    |                                      ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
488 -                     Err(MemoryError::validation(
488 +                     Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/database.rs:497:38
    |
497 |                     Err(MemoryError::validation(
    |                                      ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
497 -                     Err(MemoryError::validation(
497 +                     Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/database.rs:509:38
    |
509 |                     Err(MemoryError::validation(
    |                                      ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
509 -                     Err(MemoryError::validation(
509 +                     Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/database.rs:518:38
    |
518 |                     Err(MemoryError::validation(
    |                                      ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
518 -                     Err(MemoryError::validation(
518 +                     Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:196:37
    |
196 |             return Err(MemoryError::validation("Model name cannot be empty"));
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
196 -             return Err(MemoryError::validation("Model name cannot be empty"));
196 +             return Err(MemoryError::Validation("Model name cannot be empty"));
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:215:37
    |
215 |             return Err(MemoryError::validation("Max tokens must be greater than 0"));
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
215 -             return Err(MemoryError::validation("Max tokens must be greater than 0"));
215 +             return Err(MemoryError::Validation("Max tokens must be greater than 0"));
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:218:37
    |
218 |             return Err(MemoryError::validation(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
218 -             return Err(MemoryError::validation(
218 +             return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:229:37
    |
229 |             return Err(MemoryError::validation(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
229 -             return Err(MemoryError::validation(
229 +             return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:240:37
    |
240 |             return Err(MemoryError::validation("Top-p must be between 0.0 and 1.0"));
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
240 -             return Err(MemoryError::validation("Top-p must be between 0.0 and 1.0"));
240 +             return Err(MemoryError::Validation("Top-p must be between 0.0 and 1.0"));
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:249:37
    |
249 |             return Err(MemoryError::validation(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
249 -             return Err(MemoryError::validation(
249 +             return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:260:37
    |
260 |             return Err(MemoryError::validation(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
260 -             return Err(MemoryError::validation(
260 +             return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:803:37
    |
803 |             return Err(MemoryError::validation(format!(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
803 -             return Err(MemoryError::validation(format!(
803 +             return Err(MemoryError::Validation(format!(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:820:37
    |
820 |             return Err(MemoryError::validation(format!(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
820 -             return Err(MemoryError::validation(format!(
820 +             return Err(MemoryError::Validation(format!(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/llm.rs:828:37
    |
828 |             return Err(MemoryError::validation("Model name cannot be empty"));
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
828 -             return Err(MemoryError::validation("Model name cannot be empty"));
828 +             return Err(MemoryError::Validation("Model name cannot be empty"));
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/vector.rs:877:37
    |
877 |             return Err(MemoryError::validation(
    |                                     ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
877 -             return Err(MemoryError::validation(
877 +             return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/vector.rs:885:41
    |
885 |                 return Err(MemoryError::validation(
    |                                         ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
885 -                 return Err(MemoryError::validation(
885 +                 return Err(MemoryError::Validation(
    |

error[E0599]: no variant or associated item named `validation` found for enum `memory::primitives::types::MemoryError` in the current scope
   --> packages/domain/src/memory/config/vector.rs:890:41
    |
890 |                 return Err(MemoryError::validation(
    |                                         ^^^^^^^^^^ variant or associated item not found in `memory::primitives::types::MemoryError`
    |
   ::: packages/domain/src/memory/primitives/types.rs:451:1
    |
451 | pub enum MemoryError {
    | -------------------- variant or associated item `validation` not found for this enum
    |
note: if you're trying to build a new `memory::primitives::types::MemoryError` consider using one of the following associated functions:
      memory::primitives::types::MemoryError::not_found
      memory::primitives::types::MemoryError::invalid_type
      memory::primitives::types::MemoryError::invalid_content
   --> packages/domain/src/memory/primitives/types.rs:469:5
    |
469 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
475 |     pub fn invalid_type(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
481 |     pub fn invalid_content(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `validation`, perhaps you need to implement it:
            candidate #1: `async_graphql::extensions::Extension`
help: there is a variant with a similar name (notice the capitalization difference)
    |
890 -                 return Err(MemoryError::validation(
890 +                 return Err(MemoryError::Validation(
    |

error[E0063]: missing fields `db_type`, `options`, `password` and 2 other fields in initializer of `fluent_ai_memory::utils::config::DatabaseConfig`
  --> packages/domain/src/memory/manager.rs:54:23
   |
54 |             database: fluent_ai_memory::utils::config::DatabaseConfig {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `db_type`, `options`, `password` and 2 other fields

error[E0782]: expected a type, found a trait
   --> packages/domain/src/memory/manager.rs:111:60
    |
111 |         let node = Box::new(MemoryNode::new(String::new(), MemoryType::Episodic));
    |                                                            ^^^^^^^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
111 |         let node = Box::new(MemoryNode::new(String::new(), <dyn MemoryType>::Episodic));
    |                                                            ++++           +

error[E0782]: expected a type, found a trait
   --> packages/domain/src/memory/manager.rs:130:49
    |
130 |         Box::new(MemoryNode::new(String::new(), MemoryType::Episodic))
    |                                                 ^^^^^^^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
130 |         Box::new(MemoryNode::new(String::new(), <dyn MemoryType>::Episodic))
    |                                                 ++++           +

error[E0277]: `SurrealDBMemoryManager` doesn't implement `std::fmt::Debug`
   --> packages/domain/src/memory/manager.rs:231:5
    |
228 | #[derive(Debug, Clone)]
    |          ----- in this derive macro expansion
...
231 |     memory: Arc<SurrealDBMemoryManager>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `SurrealDBMemoryManager`
    |
    = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in statics
  --> packages/domain/src/memory/ops.rs:49:48
   |
49 | static SIMD_OPERATIONS_COUNT: RelaxedCounter = RelaxedCounter::new(0);
   |                                                ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: calls in statics are limited to constant functions, tuple structs and tuple variants
   = note: consider wrapping this expression in `std::sync::LazyLock::new(|| ...)`

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in statics
  --> packages/domain/src/memory/ops.rs:50:37
   |
50 | static CACHE_HITS: RelaxedCounter = RelaxedCounter::new(0);
   |                                     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: calls in statics are limited to constant functions, tuple structs and tuple variants
   = note: consider wrapping this expression in `std::sync::LazyLock::new(|| ...)`

error[E0015]: cannot call non-const associated function `atomic_counter::RelaxedCounter::new` in statics
  --> packages/domain/src/memory/ops.rs:51:39
   |
51 | static CACHE_MISSES: RelaxedCounter = RelaxedCounter::new(0);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: calls in statics are limited to constant functions, tuple structs and tuple variants
   = note: consider wrapping this expression in `std::sync::LazyLock::new(|| ...)`

error[E0560]: struct `McpToolData` has no field named `input_schema`
   --> packages/domain/src/memory/tool.rs:118:13
    |
118 |             input_schema: serde_json::json!({
    |             ^^^^^^^^^^^^ `McpToolData` does not have this field
    |
    = note: available fields are: `parameters`, `server`

error[E0277]: the trait bound `compatibility::CompatibilityMode: validation::_::_serde::Serialize` is not satisfied
    --> packages/domain/src/memory/mod.rs:102:24
     |
102  |   #[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
     |                          ^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Serialize` is not implemented for `compatibility::CompatibilityMode`
...
112  | /     /// Compatibility mode for legacy systems
113  | |     pub compatibility_mode: CompatibilityMode,
     | |_____________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `compatibility::CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1178 others
note: required by a bound in `validation::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `serde::Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `compatibility::CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/mod.rs:113:29
     |
113  |     pub compatibility_mode: CompatibilityMode,
     |                             ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `compatibility::CompatibilityMode`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `compatibility::CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1146 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `compatibility::CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
    --> packages/domain/src/memory/mod.rs:113:29
     |
113  |     pub compatibility_mode: CompatibilityMode,
     |                             ^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `compatibility::CompatibilityMode`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `compatibility::CompatibilityMode` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
               `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
               `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
               `&'a str` implements `validation::_::_serde::Deserialize<'de>`
               `()` implements `validation::_::_serde::Deserialize<'de>`
               `(T,)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
               `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
             and 1146 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `compatibility::CompatibilityMode: validation::_::_serde::Deserialize<'_>` is not satisfied
   --> packages/domain/src/memory/mod.rs:102:42
    |
102 | #[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
    |                                          ^^^^^^^^^^^^^^^^^^ the trait `validation::_::_serde::Deserialize<'_>` is not implemented for `compatibility::CompatibilityMode`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `compatibility::CompatibilityMode` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `validation::_::_serde::Deserialize<'de>`:
              `&'a Path` implements `validation::_::_serde::Deserialize<'de>`
              `&'a [u8]` implements `validation::_::_serde::Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `validation::_::_serde::Deserialize<'de>`
              `&'a str` implements `validation::_::_serde::Deserialize<'de>`
              `()` implements `validation::_::_serde::Deserialize<'de>`
              `(T,)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1)` implements `validation::_::_serde::Deserialize<'de>`
              `(T0, T1, T2)` implements `validation::_::_serde::Deserialize<'de>`
            and 1146 others
note: required by a bound in `validation::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `serde::Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `compatibility::CompatibilityMode: std::default::Default` is not satisfied
   --> packages/domain/src/memory/mod.rs:164:5
    |
158 | #[derive(Debug, Default)]
    |                 ------- in this derive macro expansion
...
164 |     compatibility_mode: CompatibilityMode,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `compatibility::CompatibilityMode`

error[E0599]: no method named `with_performance_config` found for struct `memory::config::vector::VectorStoreConfig` in the current scope
   --> packages/domain/src/memory/mod.rs:261:22
    |
260 | /                 VectorStoreConfig::new(VectorStoreType::Memory, EmbeddingConfig::default(), 1536)?
261 | |                     .with_performance_config(PerformanceConfig::minimal()),
    | |_____________________-^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/domain/src/memory/config/vector.rs:18:1
    |
18  |   pub struct VectorStoreConfig {
    |   ---------------------------- method `with_performance_config` not found for this struct
    |
help: there is a method `with_index_config` with a similar name
    |
261 -                     .with_performance_config(PerformanceConfig::minimal()),
261 +                     .with_index_config(PerformanceConfig::minimal()),
    |

error[E0599]: no method named `with_performance_config` found for struct `memory::config::vector::VectorStoreConfig` in the current scope
   --> packages/domain/src/memory/mod.rs:283:22
    |
281 | /                 VectorStoreConfig::new(VectorStoreType::FAISS, EmbeddingConfig::default(), 1536)?
282 | |                     .with_index_config(IndexConfig::optimized(IndexType::IVFPQ, 1536, 1000000))
283 | |                     .with_performance_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
    | |_____________________-^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/domain/src/memory/config/vector.rs:18:1
    |
18  |   pub struct VectorStoreConfig {
    |   ---------------------------- method `with_performance_config` not found for this struct
    |
help: there is a method `with_index_config` with a similar name
    |
283 -                     .with_performance_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
283 +                     .with_index_config(PerformanceConfig::optimized(VectorStoreType::FAISS)),
    |

error[E0599]: the method `clone` exists for struct `Box<(dyn std::any::Any + std::marker::Send + Sync + 'static)>`, but its trait bounds were not satisfied
   --> packages/domain/src/model/registry.rs:54:31
    |
54  |               model: self.model.clone(),
    |                                 ^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/any.rs:113:1
    |
113 |   pub trait Any: 'static {
    |   ---------------------- doesn't satisfy `_: Clone` or `_: Sized`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:231:1
    |
231 | / pub struct Box<
232 | |     T: ?Sized,
233 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
234 | | >(Unique<T>, A);
    | |_- doesn't satisfy `_: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `dyn std::any::Any + std::marker::Send + Sync: Sized`
            which is required by `Box<dyn std::any::Any + std::marker::Send + Sync>: Clone`
            `dyn std::any::Any + std::marker::Send + Sync: Clone`
            which is required by `Box<dyn std::any::Any + std::marker::Send + Sync>: Clone`

error[E0308]: mismatched types
   --> packages/domain/src/model/registry.rs:250:17
    |
250 |             for (provider, name) in type_entries.iter() {
    |                 ^^^^^^^^^^^^^^^^    ------------------- this is an iterator with items of type `dashmap::setref::multiple::RefMulti<'_, (&'static str, &'static str)>`
    |                 |
    |                 expected `RefMulti<'_, (&str, &str)>`, found `(_, _)`
    |
    = note: expected struct `dashmap::setref::multiple::RefMulti<'_, (&'static str, &'static str)>`
                found tuple `(_, _)`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> packages/domain/src/model/registry.rs:294:46
    |
275 |     pub fn get_as<T: ?Sized + 'static>(
    |                   - this type parameter needs to be `Sized`
...
294 |         match handle.as_any().downcast_ref::<T>() {
    |                               ------------   ^ doesn't have a size known at compile-time
    |                               |
    |                               required by a bound introduced by this call
    |
note: required by an implicit `Sized` bound in `<(dyn std::any::Any + 'static)>::downcast_ref`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/any.rs:225:25
    |
225 |     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    |                         ^ required by the implicit `Sized` requirement on this type parameter in `<dyn Any>::downcast_ref`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
    |
275 -     pub fn get_as<T: ?Sized + 'static>(
275 +     pub fn get_as<T: 'static>(
    |
help: consider removing this method call, as the receiver has type `dashmap::mapref::one::Ref<'_, &'static str, Arc<ModelHandle>>` and `dashmap::mapref::one::Ref<'_, &'static str, Arc<ModelHandle>>: Sized` trivially holds
    |
294 -         match handle.as_any().downcast_ref::<T>() {
294 +         match handle.downcast_ref::<T>() {
    |

error[E0308]: mismatched types
   --> packages/domain/src/model/registry.rs:295:45
    |
275 |     pub fn get_as<T: ?Sized + 'static>(
    |                   - expected this type parameter
...
295 |             Some(model) => Ok(Some(Arc::new(model.clone()))),
    |                                    -------- ^^^^^^^^^^^^^ expected type parameter `T`, found `&T`
    |                                    |
    |                                    arguments to this function are incorrect
    |
    = note: expected type parameter `_`
                    found reference `&_`
note: `T` does not implement `Clone`, so `&T` was cloned instead
   --> packages/domain/src/model/registry.rs:295:45
    |
295 |             Some(model) => Ok(Some(Arc::new(model.clone()))),
    |                                             ^^^^^
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/sync.rs:406:12
    |
406 |     pub fn new(data: T) -> Arc<T> {
    |            ^^^
help: consider further restricting type parameter `T` with trait `Clone`
    |
275 |     pub fn get_as<T: ?Sized + 'static + Clone>(
    |                                       +++++++

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> packages/domain/src/model/registry.rs:295:45
    |
275 |     pub fn get_as<T: ?Sized + 'static>(
    |                   - this type parameter needs to be `Sized`
...
295 |             Some(model) => Ok(Some(Arc::new(model.clone()))),
    |                                    -------- ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |                                    |
    |                                    required by a bound introduced by this call
    |
note: required by a bound in `Arc::<T>::new`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/sync.rs:393:6
    |
393 | impl<T> Arc<T> {
    |      ^ required by this bound in `Arc::<T>::new`
...
406 |     pub fn new(data: T) -> Arc<T> {
    |            --- required by a bound in this associated function
help: consider removing the `?Sized` bound to make the type parameter `Sized`
    |
275 -     pub fn get_as<T: ?Sized + 'static>(
275 +     pub fn get_as<T: 'static>(
    |
help: consider removing this method call, as the receiver has type `&T` and `&T: Sized` trivially holds
    |
295 -             Some(model) => Ok(Some(Arc::new(model.clone()))),
295 +             Some(model) => Ok(Some(Arc::new(model))),
    |

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> packages/domain/src/model/registry.rs:329:46
    |
310 |     pub fn get_boxed<T: ?Sized + 'static>(
    |                      - this type parameter needs to be `Sized`
...
329 |         match handle.as_any().downcast_ref::<T>() {
    |                               ------------   ^ doesn't have a size known at compile-time
    |                               |
    |                               required by a bound introduced by this call
    |
note: required by an implicit `Sized` bound in `<(dyn std::any::Any + 'static)>::downcast_ref`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/any.rs:225:25
    |
225 |     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    |                         ^ required by the implicit `Sized` requirement on this type parameter in `<dyn Any>::downcast_ref`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
    |
310 -     pub fn get_boxed<T: ?Sized + 'static>(
310 +     pub fn get_boxed<T: 'static>(
    |
help: consider removing this method call, as the receiver has type `dashmap::mapref::one::Ref<'_, &'static str, Arc<ModelHandle>>` and `dashmap::mapref::one::Ref<'_, &'static str, Arc<ModelHandle>>: Sized` trivially holds
    |
329 -         match handle.as_any().downcast_ref::<T>() {
329 +         match handle.downcast_ref::<T>() {
    |

error[E0308]: mismatched types
   --> packages/domain/src/model/registry.rs:330:45
    |
310 |     pub fn get_boxed<T: ?Sized + 'static>(
    |                      - expected this type parameter
...
330 |             Some(model) => Ok(Some(Box::new(model.clone()))),
    |                                    -------- ^^^^^^^^^^^^^ expected type parameter `T`, found `&T`
    |                                    |
    |                                    arguments to this function are incorrect
    |
    = note: expected type parameter `_`
                    found reference `&_`
note: `T` does not implement `Clone`, so `&T` was cloned instead
   --> packages/domain/src/model/registry.rs:330:45
    |
330 |             Some(model) => Ok(Some(Box::new(model.clone()))),
    |                                             ^^^^^
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:260:12
    |
260 |     pub fn new(x: T) -> Self {
    |            ^^^
help: consider further restricting type parameter `T` with trait `Clone`
    |
310 |     pub fn get_boxed<T: ?Sized + 'static + Clone>(
    |                                          +++++++

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> packages/domain/src/model/registry.rs:330:45
    |
310 |     pub fn get_boxed<T: ?Sized + 'static>(
    |                      - this type parameter needs to be `Sized`
...
330 |             Some(model) => Ok(Some(Box::new(model.clone()))),
    |                                    -------- ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |                                    |
    |                                    required by a bound introduced by this call
    |
note: required by a bound in `Box::<T>::new`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:244:6
    |
244 | impl<T> Box<T> {
    |      ^ required by this bound in `Box::<T>::new`
...
260 |     pub fn new(x: T) -> Self {
    |            --- required by a bound in this associated function
help: consider removing the `?Sized` bound to make the type parameter `Sized`
    |
310 -     pub fn get_boxed<T: ?Sized + 'static>(
310 +     pub fn get_boxed<T: 'static>(
    |
help: consider removing this method call, as the receiver has type `&T` and `&T: Sized` trivially holds
    |
330 -             Some(model) => Ok(Some(Box::new(model.clone()))),
330 +             Some(model) => Ok(Some(Box::new(model))),
    |

error[E0283]: type annotations needed
   --> packages/domain/src/model/resolver.rs:236:14
    |
236 |         self.resolve_with_registry(&self.registry, model_name, provider)
    |              ^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the method `resolve_with_registry`
    |
    = note: cannot satisfy `_: model::traits::Model`
note: required by a bound in `ModelResolver::resolve_with_registry`
   --> packages/domain/src/model/resolver.rs:240:41
    |
240 |     pub fn resolve_with_registry<'a, M: Model + 'static>(
    |                                         ^^^^^ required by this bound in `ModelResolver::resolve_with_registry`
help: consider specifying the generic argument
    |
236 |         self.resolve_with_registry::<M>(&self.registry, model_name, provider)
    |                                   +++++

error[E0308]: mismatched types
   --> packages/domain/src/model/resolver.rs:277:21
    |
275 |                 return Ok(ModelResolution::new(
    |                           -------------------- arguments to this function are incorrect
276 |                     provider,
277 |                     model,
    |                     ^^^^^ expected `&str`, found `RegisteredModel<M>`
    |
    = note: expected reference `&str`
                  found struct `RegisteredModel<M>`
note: associated function defined here
   --> packages/domain/src/model/resolver.rs:155:12
    |
155 |     pub fn new(
    |            ^^^
156 |         provider: &'a str,
157 |         model: &'a str,
    |         --------------

error[E0308]: mismatched types
  --> packages/domain/src/usage.rs:59:18
   |
59 |         self.add(&rhs)
   |              --- ^^^^ expected `Usage`, found `&Usage`
   |              |
   |              arguments to this method are incorrect
   |
help: the return type of this call is `&usage::Usage` due to the type of the argument passed
  --> packages/domain/src/usage.rs:59:9
   |
59 |         self.add(&rhs)
   |         ^^^^^^^^^----^
   |                  |
   |                  this argument influences the return type of `add`
note: method defined here
  --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:93:8
   |
93 |     fn add(self, rhs: Rhs) -> Self::Output;
   |        ^^^
help: consider removing the borrow
   |
59 -         self.add(&rhs)
59 +         self.add(rhs)
   |

warning: unused import: `Hasher`
 --> packages/domain/src/model/resolver.rs:6:23
  |
6 | use std::hash::{Hash, Hasher};
  |                       ^^^^^^

warning: unused import: `McpTool`
  --> packages/domain/src/memory/tool.rs:25:19
   |
25 | use crate::tool::{McpTool, McpToolData, ToolTrait as Tool};
   |                   ^^^^^^^

warning: unused variable: `message`
   --> packages/domain/src/agent/chat.rs:146:9
    |
146 |         message: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `memory_node`
   --> packages/domain/src/agent/chat.rs:147:9
    |
147 |         memory_node: &MemoryNode,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_node`

error[E0521]: borrowed data escapes outside of method
   --> packages/domain/src/chat/commands/execution.rs:678:9
    |
674 |       pub fn parse_and_execute(&self, input: &str) -> AsyncTask<CommandResult<CommandOutput>> {
    |                                       -----  - let's call the lifetime of this reference `'1`
    |                                       |
    |                                       `input` is a reference that is only valid in the method body
...
678 | /         spawn_async(async move {
679 | |             let command = parser.parse(input).map_err(|e| CommandError::ParseError {
680 | |                 detail: Arc::from(e.to_string()),
681 | |             })?;
682 | |             executor.execute(command).await
683 | |         })
    | |          ^
    | |          |
    | |__________`input` escapes the method body here
    |            argument requires that `'1` must outlive `'static`

error[E0716]: temporary value dropped while borrowed
   --> packages/domain/src/chat/commands/parsing.rs:299:25
    |
299 |             .unwrap_or(&Arc::from(command_name));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement
    |                         |
    |                         creates a temporary value which is freed while still in use
...
302 |         match resolved_name.as_ref() {
    |               ------------- borrow later used here
    |
help: consider using a `let` binding to create a longer lived value
    |
296 ~         let binding = Arc::from(command_name);
297 ~         let resolved_name = self
298 |             .aliases
299 |             .get(command_name)
300 ~             .unwrap_or(&binding);
    |

warning: variable does not need to be mutable
   --> packages/domain/src/chat/config.rs:528:13
    |
528 |         let mut manager = Self {
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0382]: use of moved value: `manager`
   --> packages/domain/src/chat/config.rs:554:9
    |
528 |         let mut manager = Self {
    |             ----------- move occurs because `manager` has type `ConfigurationManager`, which does not implement the `Copy` trait
...
541 |         tokio::spawn(async move {
    |                      ---------- value moved here
542 |             manager
    |             ------- variable moved due to use in coroutine
...
554 |         manager
    |         ^^^^^^^ value used here after move

error[E0733]: recursion in an async fn requires boxing
   --> packages/domain/src/chat/macros.rs:493:5
    |
493 | /     async fn execute_action(
494 | |         &self,
495 | |         action: &MacroAction,
496 | |         context: &mut MacroExecutionContext,
497 | |     ) -> Result<ActionExecutionResult, MacroSystemError> {
    | |________________________________________________________^
...
543 |                       let result = self.execute_action(action, context).await?;
    |                                    ------------------------------------------ recursive call here
    |
    = note: a recursive `async fn` call must introduce indirection such as `Box::pin` to avoid an infinitely sized future

warning: unused variable: `variable`
   --> packages/domain/src/chat/templates.rs:880:17
    |
880 |                 variable,
    |                 ^^^^^^^^ help: try ignoring the field: `variable: _`

warning: unused variable: `variables`
    --> packages/domain/src/chat/templates.rs:1064:17
     |
1064 |                 variables,
     |                 ^^^^^^^^^ help: try ignoring the field: `variables: _`

warning: unused variable: `args`
    --> packages/domain/src/chat/templates.rs:1069:40
     |
1069 |             TemplateAst::Macro { name, args } => {
     |                                        ^^^^ help: try ignoring the field: `args: _`

error[E0382]: borrow of moved value: `template`
    --> packages/domain/src/chat/templates.rs:1431:27
     |
1413 |     pub fn update(&self, template: ChatTemplate) -> TemplateResult<()> {
     |                          -------- move occurs because `template` has type `ChatTemplate`, which does not implement the `Copy` trait
...
1428 |             .insert(template.metadata.name.clone(), template);
     |                                                     -------- value moved here
...
1431 |         self.cache.remove(&template.metadata.name);
     |                           ^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move
     |
help: consider cloning the value if the performance cost is acceptable
     |
1428 |             .insert(template.metadata.name.clone(), template.clone());
     |                                                             ++++++++

warning: variable does not need to be mutable
    --> packages/domain/src/chat/templates.rs:1583:21
     |
1583 |         if let Some(mut stats) = self.usage_stats.get(name) {
     |                     ----^^^^^
     |                     |
     |                     help: remove this `mut`

error[E0621]: explicit lifetime required in the type of `requests`
   --> packages/domain/src/completion/candle.rs:472:9
    |
472 | /         Box::pin(async move {
473 | |             let mut results = Vec::with_capacity(requests.len());
474 | |             for request in requests {
475 | |                 results.push(self.complete(request).await);
476 | |             }
477 | |             results
478 | |         })
    | |__________^ lifetime `'a` required
    |
help: add explicit lifetime `'a` to the type of `requests`
    |
469 -         requests: Vec<CompletionCoreRequest<'_>>,
469 +         requests: Vec<CompletionCoreRequest<'a>>,
    |

error[E0621]: explicit lifetime required in the type of `request`
   --> packages/domain/src/completion/candle.rs:489:9
    |
489 | /         Box::pin(async move {
490 | |             tokio::time::timeout(timeout, self.complete(request))
491 | |                 .await
492 | |                 .map_err(|_| CompletionCoreError::Timeout)?
493 | |         })
    | |__________^ lifetime `'a` required
    |
help: add explicit lifetime `'a` to the type of `request`
    |
485 -         request: CompletionCoreRequest<'_>,
485 +         request: CompletionCoreRequest<'a>,
    |

warning: variable does not need to be mutable
   --> packages/domain/src/model/registry.rs:155:25
    |
155 |             if let Some(mut provider_models) = GLOBAL_REGISTRY.models.get_mut(provider.as_str()) {
    |                         ----^^^^^^^^^^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/domain/src/model/registry.rs:165:25
    |
165 |             if let Some(mut type_entries) = GLOBAL_REGISTRY.type_registry.get_mut(&type_id) {
    |                         ----^^^^^^^^^^^^
    |                         |
    |                         help: remove this `mut`

error: lifetime may not live long enough
   --> packages/domain/src/model/registry.rs:165:45
    |
152 |         let cleanup: Box<dyn Fn() + Send + Sync> = Box::new(move || {
    |                                                             ------- lifetime `'1` represents this closure's body
...
165 |             if let Some(mut type_entries) = GLOBAL_REGISTRY.type_registry.get_mut(&type_id) {
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'static`
    |
    = note: closure implements `Fn`, so references to captured variables can't escape the closure
    = note: requirement occurs because of the type `DashMap<TypeId, DashSet<(&str, &str), ahash::RandomState>, ahash::RandomState>`, which makes the generic argument `TypeId` invariant
    = note: the struct `DashMap<K, V, S>` is invariant over the parameter `K`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance

Some errors have detailed explanations: E0015, E0061, E0063, E0107, E0277, E0282, E0283, E0308, E0382...
For more information about an error, try `rustc --explain E0015`.
warning: `fluent_ai_domain` (lib) generated 137 warnings
error: could not compile `fluent_ai_domain` (lib) due to 276 previous errors; 137 warnings emitted
