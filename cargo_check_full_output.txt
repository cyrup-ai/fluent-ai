    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Checking fluent_ai_http3 v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/http3)
   Compiling fluent_ai_provider v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/provider)
    Checking sweetmcp_memory v0.1.0 (https://github.com/cyrup-ai/sweetmcp?branch=main#27c806d9)
    Checking cylo v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/cylo)
warning: fluent_ai_provider@0.1.0: Build script simplified to unblock compilation
    Checking fluent_ai_memory v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/memory)
error[E0425]: cannot find value `state` in this scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/committee.rs:315:49
    |
274 |         _state: &CodeState,
    |         ------ `_state` defined here
...
315 |             self.perspective, rubric.objective, state.code, action, self.perspective
    |                                                 ^^^^^
    |
help: the leading underscore in `_state` marks it as unused, consider renaming it to `state`
    |
274 -         _state: &CodeState,
274 +         state: &CodeState,
    |

error[E0425]: cannot find value `state` in this scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/committee.rs:648:31
    |
631 |         _state: &CodeState,
    |         ------ `_state` defined here
...
648 |             let state_clone = state.clone();
    |                               ^^^^^
    |
help: the leading underscore in `_state` marks it as unused, consider renaming it to `state`
    |
631 -         _state: &CodeState,
631 +         state: &CodeState,
    |

error[E0560]: struct `EvaluationRound` has no field named `consensus`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/committee.rs:585:17
    |
585 |                 consensus: None, // Remove consensus from round tracking for now
    |                 ^^^^^^^^^ `EvaluationRound` does not have this field
    |
    = note: all struct fields are already assigned

error[E0382]: borrow of moved value: `new_state`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:159:57
    |
149 |         let new_state = self.apply_action(&parent_state, &action).await?;
    |             --------- move occurs because `new_state` has type `CodeState`, which does not implement the `Copy` trait
...
158 |             state: new_state,
    |                    --------- value moved here
159 |             untried_actions: Self::get_possible_actions(&new_state, &self.spec),
    |                                                         ^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
158 |             state: new_state.clone(),
    |                             ++++++++

error[E0282]: type annotations needed for `JoinSet<std::result::Result<(std::string::String, f64), _>>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:208:13
    |
208 |         let mut join_set = JoinSet::new();
    |             ^^^^^^^^^^^^
...
215 |                     match result {
    |                           ------ type must be known at this point
    |
help: consider giving `join_set` an explicit type, where the type for type parameter `E` is specified
    |
208 |         let mut join_set: JoinSet<std::result::Result<_, E>> = JoinSet::new();
    |                         ++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:412:43
    |
412 |         let new_latency = state.latency * factors.latency_factor;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`

error[E0277]: cannot multiply `f64` by `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:412:41
    |
412 |         let new_latency = state.latency * factors.latency_factor;
    |                                         ^ no implementation for `f64 * f32`
    |
    = help: the trait `std::ops::Mul<f32>` is not implemented for `f64`
    = help: the following other types implement trait `std::ops::Mul<Rhs>`:
              `&f64` implements `std::ops::Mul<&Complex<f64>>`
              `&f64` implements `std::ops::Mul<Complex<f64>>`
              `&f64` implements `std::ops::Mul<f64>`
              `&f64` implements `std::ops::Mul`
              `f64` implements `std::ops::Mul<&Complex<f64>>`
              `f64` implements `std::ops::Mul<&DualQuaternion<f64>>`
              `f64` implements `std::ops::Mul<&Matrix<f64, R, C, S>>`
              `f64` implements `std::ops::Mul<&OPoint<f64, D>>`
            and 16 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:413:41
    |
413 |         let new_memory = state.memory * factors.memory_factor;
    |                                         ^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`

error[E0277]: cannot multiply `f64` by `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:413:39
    |
413 |         let new_memory = state.memory * factors.memory_factor;
    |                                       ^ no implementation for `f64 * f32`
    |
    = help: the trait `std::ops::Mul<f32>` is not implemented for `f64`
    = help: the following other types implement trait `std::ops::Mul<Rhs>`:
              `&f64` implements `std::ops::Mul<&Complex<f64>>`
              `&f64` implements `std::ops::Mul<Complex<f64>>`
              `&f64` implements `std::ops::Mul<f64>`
              `&f64` implements `std::ops::Mul`
              `f64` implements `std::ops::Mul<&Complex<f64>>`
              `f64` implements `std::ops::Mul<&DualQuaternion<f64>>`
              `f64` implements `std::ops::Mul<&Matrix<f64, R, C, S>>`
              `f64` implements `std::ops::Mul<&OPoint<f64, D>>`
            and 16 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:414:48
    |
414 |         let new_relevance = (state.relevance * factors.relevance_factor).min(100.0);
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`

error[E0277]: cannot multiply `f64` by `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:414:46
    |
414 |         let new_relevance = (state.relevance * factors.relevance_factor).min(100.0);
    |                                              ^ no implementation for `f64 * f32`
    |
    = help: the trait `std::ops::Mul<f32>` is not implemented for `f64`
    = help: the following other types implement trait `std::ops::Mul<Rhs>`:
              `&f64` implements `std::ops::Mul<&Complex<f64>>`
              `&f64` implements `std::ops::Mul<Complex<f64>>`
              `&f64` implements `std::ops::Mul<f64>`
              `&f64` implements `std::ops::Mul`
              `f64` implements `std::ops::Mul<&Complex<f64>>`
              `f64` implements `std::ops::Mul<&DualQuaternion<f64>>`
              `f64` implements `std::ops::Mul<&Matrix<f64, R, C, S>>`
              `f64` implements `std::ops::Mul<&OPoint<f64, D>>`
            and 16 others

    Checking fluent_ai_domain v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/domain)
error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:430:26
    |
430 |         if new_latency > max_latency || new_memory > max_memory || new_relevance < min_relevance {
    |            -----------   ^^^^^^^^^^^ expected `f64`, found `f32`
    |            |
    |            expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
430 |         if new_latency > max_latency.into() || new_memory > max_memory || new_relevance < min_relevance {
    |                                     +++++++

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:430:54
    |
430 |         if new_latency > max_latency || new_memory > max_memory || new_relevance < min_relevance {
    |                                         ----------   ^^^^^^^^^^ expected `f64`, found `f32`
    |                                         |
    |                                         expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
430 |         if new_latency > max_latency || new_memory > max_memory.into() || new_relevance < min_relevance {
    |                                                                +++++++

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:430:84
    |
430 |         if new_latency > max_latency || new_memory > max_memory || new_relevance < min_relevance {
    |                                                                    -------------   ^^^^^^^^^^^^^ expected `f64`, found `f32`
    |                                                                    |
    |                                                                    expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
430 |         if new_latency > max_latency || new_memory > max_memory || new_relevance < min_relevance.into() {
    |                                                                                                 +++++++

error[E0609]: no field `applied` on type `&OptimizationOutcome`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/orchestrator.rs:148:84
    |
148 |                 if outcomes.len() > 10 && outcomes.iter().rev().take(5).all(|o| !o.applied) {
    |                                                                                    ^^^^^^^ unknown field

error[E0277]: `?` couldn't convert the error to `cognitive::types::CognitiveError`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/orchestrator.rs:187:91
    |
187 | ...                   fs::write(&output_path, serde_json::to_string_pretty(&outcome)?)
    |                                               --------------------------------------^ the trait `std::convert::From<serde_json::Error>` is not implemented for `cognitive::types::CognitiveError`
    |                                               |
    |                                               this can't be annotated with `?` because it has type `Result<_, serde_json::Error>`
    |
note: `cognitive::types::CognitiveError` needs to implement `From<serde_json::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/types.rs:223:1
    |
223 | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0609]: no field `applied` on type `&&OptimizationOutcome`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/orchestrator.rs:212:63
    |
212 |                 let successful = outcomes.iter().filter(|o| o.applied).count();
    |                                                               ^^^^^^^ unknown field

error[E0271]: type mismatch resolving `<&Vec<f32> as IntoIterator>::Item == f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/attention.rs:80:40
    |
80  |             all_weighted_values.extend(&head_scores.weighted_values);
    |                                 ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `&f32`
    |                                 |
    |                                 required by a bound introduced by this call
    |
note: required by a bound in `extend`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:413:31
    |
413 |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);
    |                               ^^^^^^^^ required by this bound in `Extend::extend`

error[E0277]: the trait bound `&str: surrealdb::opt::IntoEndpoint<surrealdb::engine::any::Any>` is not satisfied
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:63:73
    |
63  |         let db = surrealdb::Surreal::new::<surrealdb::engine::any::Any>(surreal_url).await
    |                  ------------------------------------------------------ ^^^^^^^^^^^ the trait `surrealdb::opt::IntoEndpoint<surrealdb::engine::any::Any>` is not implemented for `&str`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `surrealdb::opt::IntoEndpoint<Scheme>`:
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::local::SurrealKv>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::http::Http>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::http::Https>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::ws::Ws>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::ws::Wss>`
note: required by a bound in `surrealdb::method::<impl Surreal<C>>::new`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/api/method/mod.rs:253:30
    |
253 |     pub fn new<P>(address: impl IntoEndpoint<P, Client = C>) -> Connect<C, Self> {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `surrealdb::method::<impl Surreal<C>>::new`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:98:66
    |
98  |           let evolution_engine = Arc::new(tokio::sync::RwLock::new(EvolutionEngine::new(
    |  __________________________________________________________________^^^^^^^^^^^^^^^^^^^^-
99  | |             settings.evolution_rate,
    | |             ----------------------- expected `CodeState`, found `f32`
100 | |         )));
    | |_________- argument #2 of type `u64` is missing
    |
note: associated function defined here
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/evolution.rs:206:12
    |
206 |     pub fn new(initial_state: CodeState, max_generations: u64) -> Self {
    |            ^^^ ------------------------  --------------------
help: provide the argument
    |
98  -         let evolution_engine = Arc::new(tokio::sync::RwLock::new(EvolutionEngine::new(
99  -             settings.evolution_rate,
100 -         )));
98  +         let evolution_engine = Arc::new(tokio::sync::RwLock::new(EvolutionEngine::new(/* CodeState */, /* u64 */)));
    |

error[E0308]: `?` operator has incompatible types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:126:44
    |
126 |           cognitive_memory.cognitive_state = self.cognitive_mesh
    |  ____________________________________________^
127 | |             .analyze_memory_context(&cognitive_memory.base_memory)
128 | |             .await?;
    | |___________________^ expected `cognitive::types::CognitiveState`, found `cognitive::state::CognitiveState`
    |
    = note: `?` operator cannot convert from `cognitive::state::CognitiveState` to `cognitive::types::CognitiveState`
    = note: `cognitive::state::CognitiveState` and `cognitive::types::CognitiveState` have similar names, but are actually distinct types
note: `cognitive::state::CognitiveState` is defined in module `crate::cognitive::state` of the current crate
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/state.rs:13:1
    |
13  | pub struct CognitiveState {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `cognitive::types::CognitiveState` is defined in module `crate::cognitive::types` of the current crate
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/types.rs:10:1
    |
10  | pub struct CognitiveState {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: `MemoryStream` is not an iterator
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:193:14
    |
190 |           let memories = self
    |  ________________________-
191 | |             .legacy_manager
192 | |             .search_by_content(&query.original)
193 | |             .collect::<Vec<_>>()
    | |             -^^^^^^^ `MemoryStream` is not an iterator
    | |_____________|
    |
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/memory/memory_manager.rs:192:1
    |
192 |   pub struct MemoryStream {
    |   ----------------------- method `collect` not found for this struct because it doesn't satisfy `MemoryStream: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `MemoryStream: Iterator`
            which is required by `&mut MemoryStream: Iterator`
note: the trait `Iterator` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:39:1
    |
39  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is in scope
help: trait `StreamExt` which provides `collect` is implemented but not in scope; perhaps you want to import it
    |
3   + use futures::StreamExt;
    |

error[E0599]: no method named `record_fitness` found for struct `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:235:19
    |
235 |         evolution.record_fitness(metrics);
    |                   ^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>`

error[E0599]: no method named `evolve_if_needed` found for struct `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:238:51
    |
238 |         if let Some(evolution_result) = evolution.evolve_if_needed().await {
    |                                                   ^^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>`

error[E0382]: borrow of moved value: `error_locations`
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/error_correction.rs:353:70
     |
347  |             let error_locations = ml_decoder.decode_syndrome(syndrome);
     |                 --------------- move occurs because `error_locations` has type `Vec<usize>`, which does not implement the `Copy` trait
...
351  |                 error_location: error_locations,
     |                                 --------------- value moved here
352  |                 error_type: ErrorType::BitFlip, // Simplified
353  |                 correction_operation: self.generate_correction_gates(&error_locations),
     |                                                                      ^^^^^^^^^^^^^^^^ value borrowed here after move
     |
     = note: borrow occurs due to deref coercion to `[usize]`
note: deref defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3382:5
     |
3382 |     type Target = [T];
     |     ^^^^^^^^^^^
help: consider cloning the value if the performance cost is acceptable
     |
351  |                 error_location: error_locations.clone(),
     |                                                ++++++++

error[E0277]: `?` couldn't convert the error to `quantum::types::CognitiveError`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/router.rs:231:34
    |
231 |         superposition.normalize()?;
    |                       -----------^ the trait `std::convert::From<std::string::String>` is not implemented for `quantum::types::CognitiveError`
    |                       |
    |                       this can't be annotated with `?` because it has type `Result<_, std::string::String>`
    |
note: `quantum::types::CognitiveError` needs to implement `From<std::string::String>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0277]: `?` couldn't convert the error to `quantum::types::CognitiveError`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/router.rs:295:34
    |
295 |         superposition.normalize()?;
    |                       -----------^ the trait `std::convert::From<std::string::String>` is not implemented for `quantum::types::CognitiveError`
    |                       |
    |                       this can't be annotated with `?` because it has type `Result<_, std::string::String>`
    |
note: `quantum::types::CognitiveError` needs to implement `From<std::string::String>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0382]: borrow of moved value: `measurement.context`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/router.rs:395:17
    |
390 |             target_context: measurement.context,
    |                             ------------------- value moved here
...
395 |                 measurement.context, measurement.probability
    |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
    = note: move occurs because `measurement.context` has type `std::string::String`, which does not implement the `Copy` trait
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:139:41
    |
139 |         let error_correction = Arc::new(QuantumErrorCorrection::new());
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `f64` is missing
    |
note: associated function defined here
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/error_correction.rs:170:12
    |
170 |     pub fn new(error_rate_threshold: f64) -> Self {
    |            ^^^ -------------------------
help: provide the argument
    |
139 |         let error_correction = Arc::new(QuantumErrorCorrection::new(/* f64 */));
    |                                                                     +++++++++

error[E0599]: no function or associated item named `new` found for struct `PhaseEvolution` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:143:56
    |
143 |         let phase_evolution = Arc::new(PhaseEvolution::new(
    |                                                        ^^^ function or associated item not found in `PhaseEvolution`
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/state.rs:23:1
    |
23  | pub struct PhaseEvolution {
    | ------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `UniformSampler`
            candidate #7: `VariableOutput`
            candidate #8: `VariableOutputCore`
            candidate #9: `ahash::HashMapExt`
            candidate #10: `ahash::HashSetExt`
            candidate #11: `aws_lc_rs::aead::BoundKey`
            candidate #12: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
            candidate #13: `brotli::enc::threading::AnyBoxConstructor`
            candidate #14: `ext_sort::chunk::ExternalChunk`
            candidate #15: `itertools::adaptors::coalesce::CountItem`
            candidate #16: `ndarray::DataOwned`
            candidate #17: `ndarray::data_traits::DataOwned`
            candidate #18: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #19: `petgraph::adj::IndexType`
            candidate #20: `petgraph::matrix_graph::Nullable`
            candidate #21: `protobuf::message::Message`
            candidate #22: `quick_cache::shard::SharedPlaceholder`
            candidate #23: `quick_cache::shard::SharedPlaceholder`
            candidate #24: `rand::distributions::uniform::UniformSampler`
            candidate #25: `ring::aead::BoundKey`
            candidate #26: `rstar::point::PointExt`
            candidate #27: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #28: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #29: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #30: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #31: `sha2::digest::Mac`
            candidate #32: `spade::triangulation::Triangulation`
            candidate #33: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `TimeDependentTerm` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:146:36
    |
146 |                 TimeDependentTerm::new(0.1, 1.0),
    |                                    ^^^ function or associated item not found in `TimeDependentTerm`
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/state.rs:32:1
    |
32  | pub struct TimeDependentTerm {
    | ---------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `UniformSampler`
            candidate #7: `VariableOutput`
            candidate #8: `VariableOutputCore`
            candidate #9: `ahash::HashMapExt`
            candidate #10: `ahash::HashSetExt`
            candidate #11: `aws_lc_rs::aead::BoundKey`
            candidate #12: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
            candidate #13: `brotli::enc::threading::AnyBoxConstructor`
            candidate #14: `ext_sort::chunk::ExternalChunk`
            candidate #15: `itertools::adaptors::coalesce::CountItem`
            candidate #16: `ndarray::DataOwned`
            candidate #17: `ndarray::data_traits::DataOwned`
            candidate #18: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #19: `petgraph::adj::IndexType`
            candidate #20: `petgraph::matrix_graph::Nullable`
            candidate #21: `protobuf::message::Message`
            candidate #22: `quick_cache::shard::SharedPlaceholder`
            candidate #23: `quick_cache::shard::SharedPlaceholder`
            candidate #24: `rand::distributions::uniform::UniformSampler`
            candidate #25: `ring::aead::BoundKey`
            candidate #26: `rstar::point::PointExt`
            candidate #27: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #28: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #29: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #30: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #31: `sha2::digest::Mac`
            candidate #32: `spade::triangulation::Triangulation`
            candidate #33: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `TimeDependentTerm` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:147:36
    |
147 |                 TimeDependentTerm::new(0.05, 2.0),
    |                                    ^^^ function or associated item not found in `TimeDependentTerm`
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/state.rs:32:1
    |
32  | pub struct TimeDependentTerm {
    | ---------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `UniformSampler`
            candidate #7: `VariableOutput`
            candidate #8: `VariableOutputCore`
            candidate #9: `ahash::HashMapExt`
            candidate #10: `ahash::HashSetExt`
            candidate #11: `aws_lc_rs::aead::BoundKey`
            candidate #12: `brotli::enc::backward_references::hash_to_binary_tree::Allocable`
            candidate #13: `brotli::enc::threading::AnyBoxConstructor`
            candidate #14: `ext_sort::chunk::ExternalChunk`
            candidate #15: `itertools::adaptors::coalesce::CountItem`
            candidate #16: `ndarray::DataOwned`
            candidate #17: `ndarray::data_traits::DataOwned`
            candidate #18: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #19: `petgraph::adj::IndexType`
            candidate #20: `petgraph::matrix_graph::Nullable`
            candidate #21: `protobuf::message::Message`
            candidate #22: `quick_cache::shard::SharedPlaceholder`
            candidate #23: `quick_cache::shard::SharedPlaceholder`
            candidate #24: `rand::distributions::uniform::UniformSampler`
            candidate #25: `ring::aead::BoundKey`
            candidate #26: `rstar::point::PointExt`
            candidate #27: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #28: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #29: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #30: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #31: `sha2::digest::Mac`
            candidate #32: `spade::triangulation::Triangulation`
            candidate #33: `tendril::tendril::Atomicity`

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:157:52
    |
157 |             superposition: SuperpositionState::new(untried_actions.len()),
    |                            ----------------------- ^^^^^^^^^^^^^^^^^^^^^ expected `Duration`, found `usize`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/state.rs:40:12
    |
40  |     pub fn new(coherence_time: Duration) -> Self {
    |            ^^^ ------------------------

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:187:13
    |
187 |             entanglement_graph,
    |             ^^^^^^^^^^^^^^^^^^ expected `Arc<RwLock<EntanglementGraph>>`, found `Arc<RwLock<impl Future<Output = ...>>>`
    |
    = note: expected struct `Arc<tokio::sync::RwLock<EntanglementGraph>>`
               found struct `Arc<tokio::sync::RwLock<impl futures::Future<Output = std::result::Result<EntanglementGraph, quantum::types::CognitiveError>>>>`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:237:57
    |
237 |                 let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                         ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:241:37
    |
241 |                     child.amplitude.norm() * (1.0 - child.quantum_state.decoherence);
    |                                     ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0502]: cannot borrow `tree` as immutable because it is also borrowed as mutable
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:307:51
    |
288 |         let node = tree
    |                    ---- mutable borrow occurs here
...
307 |         let child_id = format!("{}-q{}", node_id, tree.len());
    |                                                   ^^^^ immutable borrow occurs here
...
311 |             amplitude: self.calculate_child_amplitude(&node.amplitude, &action),
    |                                                       --------------- mutable borrow later used here

error[E0382]: borrow of moved value: `new_quantum_state`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:317:17
    |
304 |         let new_quantum_state = self.apply_quantum_action(&parent_state, &action).await?;
    |             ----------------- move occurs because `new_quantum_state` has type `QuantumNodeState`, which does not implement the `Copy` trait
...
315 |             quantum_state: new_quantum_state,
    |                            ----------------- value moved here
316 |             untried_actions: Self::get_quantum_actions(
317 |                 &new_quantum_state.classical_state,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
315 |             quantum_state: new_quantum_state.clone(),
    |                                             ++++++++

error[E0599]: no method named `measure` found for reference `&SuperpositionState` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:345:43
    |
345 |         let probabilities = superposition.measure(&measurement)?;
    |                                           ^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no method named `evolve` found for struct `SuperpositionState` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:381:27
    |
381 |         new_superposition.evolve(self.phase_evolution.compute(0.1))?;
    |                           ^^^^^^ method not found in `SuperpositionState`
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `evolve` not found for this struct

error[E0599]: no method named `compute` found for struct `Arc<PhaseEvolution>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:381:55
    |
381 |         new_superposition.evolve(self.phase_evolution.compute(0.1))?;
    |                                                       ^^^^^^^ method not found in `Arc<PhaseEvolution>`

error[E0599]: no method named `add_entanglement` found for struct `tokio::sync::RwLockWriteGuard<'_, EntanglementGraph>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:432:36
    |
432 |                 entanglement_graph.add_entanglement(
    |                 -------------------^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name
    |
432 -                 entanglement_graph.add_entanglement(
432 +                 entanglement_graph.create_entanglement(
    |

error[E0599]: no variant or associated item named `Weak` found for enum `quantum::types::EntanglementType` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:435:39
    |
435 |                     EntanglementType::Weak,
    |                                       ^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Weak` not found for this enum

error[E0599]: no method named `correct_amplitude` found for struct `Arc<QuantumErrorCorrection>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:529:57
    |
529 |                 let corrected_reward = error_correction.correct_amplitude(quantum_reward)?;
    |                                                         ^^^^^^^^^^^^^^^^^ method not found in `Arc<QuantumErrorCorrection>`

error[E0599]: no method named `get_entangled` found for struct `tokio::sync::RwLockReadGuard<'_, EntanglementGraph>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:564:55
    |
564 |             if let Ok(entangled) = entanglement_graph.get_entangled(&node_id) {
    |                                                       ^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, EntanglementGraph>`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:590:54
    |
590 |                 let avg_reward = node.quantum_reward.norm() / node.visits as f64;
    |                                                      ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:604:17
    |
604 |                 node.amplitude *= amplification_factor;
    |                 --------------^^^^^^^^^^^^^^^^^^^^^^^^
    |                 |
    |                 cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign<{float}>` might be missing for `Complex64`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign<{float}>`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:630:43
    |
630 |                 let amp = child.amplitude.norm();
    |                                           ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:631:47
    |
631 |                 max_amplitude = max_amplitude.max(amp);
    |                                               ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
625 |         let mut max_amplitude: f32 = 0.0;
    |                              +++++

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:637:61
    |
637 |         let concentration = max_amplitude / total_amplitude.max(1e-10);
    |                                                             ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
626 |         let mut total_amplitude: f32 = 0.0;
    |                                +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:688:54
    |
688 |                     let score = child.quantum_reward.norm() / child.visits as f64;
    |                                                      ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0282]: type annotations needed for `&(_, _)`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:694:22
    |
694 |             .max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap())
    |                      ^^^^^^            ----------- type must be known at this point
    |
help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified
    |
694 |             .max_by(|(_, a): &(_, _), (_, b)| a.partial_cmp(b).unwrap())
    |                            +++++++++

error[E0599]: no method named `num_entanglements` found for struct `tokio::sync::RwLockReadGuard<'_, EntanglementGraph>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:706:54
    |
706 |         let total_entanglements = entanglement_graph.num_entanglements();
    |                                                      ^^^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, EntanglementGraph>`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:716:34
    |
716 |             .map(|n| n.amplitude.norm())
    |                                  ^^^^
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `clone` found for struct `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_mcts.rs:726:38
    |
726 |             quantum_metrics: metrics.clone(),
    |                                      ^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:86:39
    |
86  |         let quantum_router = Arc::new(QuantumRouter::new(quantum_config));
    |                                       ^^^^^^^^^^^^^^^^^^ -------------- argument #1 of type `Arc<CognitiveStateManager>` is missing
    |
note: associated function defined here
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/router.rs:146:18
    |
146 |     pub async fn new(
    |                  ^^^
147 |         state_manager: Arc<CognitiveStateManager>,
    |         -----------------------------------------
help: provide the argument
    |
86  |         let quantum_router = Arc::new(QuantumRouter::new(/* Arc<CognitiveStateManager> */, quantum_config));
    |                                                          +++++++++++++++++++++++++++++++++

error[E0061]: this function takes 6 arguments but 0 arguments were supplied
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:87:41
   |
87 |         let evolution_engine = Arc::new(CognitiveCodeEvolution::new());
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^-- multiple arguments are missing
   |
note: associated function defined here
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/evolution.rs:28:12
   |
28 |     pub fn new(
   |            ^^^
29 |         initial_code: String,
   |         --------------------
30 |         initial_latency: f64,
   |         --------------------
31 |         initial_memory: f64,
   |         -------------------
32 |         initial_relevance: f64,
   |         ----------------------
33 |         spec: Arc<OptimizationSpec>,
   |         ---------------------------
34 |         user_objective: String,
   |         ----------------------
help: provide the arguments
   |
87 |         let evolution_engine = Arc::new(CognitiveCodeEvolution::new(/* std::string::String */, /* f64 */, /* f64 */, /* f64 */, /* Arc<cognitive::types::OptimizationSpec> */, /* std::string::String */));
   |                                                                     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:95:13
   |
95 |             quantum_router,
   |             ^^^^^^^^^^^^^^ expected `Arc<QuantumRouter>`, found `Arc<impl Future<Output = ...>>`
   |
   = note: expected struct `Arc<QuantumRouter>`
              found struct `Arc<impl futures::Future<Output = std::result::Result<QuantumRouter, quantum::types::CognitiveError>>>`

error[E0308]: mismatched types
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:96:13
   |
96 |             evolution_engine,
   |             ^^^^^^^^^^^^^^^^ expected `Arc<CognitiveCodeEvolution>`, found `Arc<Result<CognitiveCodeEvolution, ...>>`
   |
   = note: expected struct `Arc<CognitiveCodeEvolution>`
              found struct `Arc<std::result::Result<CognitiveCodeEvolution, cognitive::types::CognitiveError>>`

error[E0308]: `?` operator has incompatible types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:195:23
    |
106 |     ) -> Result<OptimizationOutcome, CognitiveError> {
    |          ------------------------------------------- expected `HashMap<std::string::String, serde_json::Value>` because of return type
...
195 |             metadata: self.collect_final_metrics(&current_state).await?,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `Value`
    |
    = note: `?` operator cannot convert from `serde_json::Value` to `HashMap<std::string::String, serde_json::Value>`
    = note: expected struct `HashMap<std::string::String, serde_json::Value>`
                 found enum `serde_json::Value`

error[E0599]: no method named `evolve_code` found for struct `Arc<CognitiveCodeEvolution>` in the current scope
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:239:14
    |
237 |           let evolved_code = self
    |  ____________________________-
238 | |             .evolution_engine
239 | |             .evolve_code(&quantum_state.classical_state.code, evolution_params)
    | |             -^^^^^^^^^^^ method not found in `Arc<CognitiveCodeEvolution>`
    | |_____________|
    |

error[E0026]: variant `CommitteeEvent::ConsensusReached` does not have a field named `factors`
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/evolution.rs:68:29
   |
68 | ...                   factors,
   |                       ^^^^^^^
   |                       |
   |                       variant `CommitteeEvent::ConsensusReached` does not have this field
   |                       help: `CommitteeEvent::ConsensusReached` has a field named `decision`

error[E0027]: pattern does not mention field `decision`
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/evolution.rs:66:25
   |
66 | /                         CommitteeEvent::ConsensusReached {
67 | |                             action,
68 | |                             factors,
69 | |                             rounds_taken,
70 | |                         } => {
   | |_________________________^ missing field `decision`
   |
help: include the missing field in the pattern
   |
69 -                             rounds_taken,
70 -                         } => {
69 +                             rounds_taken, decision } => {
   |
help: if you don't care about this missing field, you can explicitly ignore it
   |
69 -                             rounds_taken,
70 -                         } => {
69 +                             rounds_taken, decision: _ } => {
   |
help: or always ignore missing fields here
   |
69 -                             rounds_taken,
70 -                         } => {
69 +                             rounds_taken, .. } => {
   |

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/evolution.rs:158:43
    |
158 |                         performance_gain: (latency_improvement + memory_improvement + relevance_improvement) / 3.0,
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:384:28
    |
384 |         if state.latency > spec.baseline_metrics.latency * 1.1 {
    |            -------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |            |
    |            expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
384 |         if state.latency > (spec.baseline_metrics.latency * 1.1).into() {
    |                            +                                   ++++++++

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:388:27
    |
388 |         if state.memory > spec.baseline_metrics.memory * 1.1 {
    |            ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |            |
    |            expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
388 |         if state.memory > (spec.baseline_metrics.memory * 1.1).into() {
    |                           +                                  ++++++++

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/mcts.rs:392:30
    |
392 |         if state.relevance < spec.baseline_metrics.relevance * 0.9 {
    |            ---------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |            |
    |            expected because this is `f64`
    |
help: you can convert an `f32` to an `f64`
    |
392 |         if state.relevance < (spec.baseline_metrics.relevance * 0.9).into() {
    |                              +                                     ++++++++

error[E0063]: missing fields `baseline_metrics`, `content_type` and `evolution_rules` in initializer of `cognitive::types::OptimizationSpec`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/orchestrator.rs:272:8
    |
272 |     Ok(OptimizationSpec {
    |        ^^^^^^^^^^^^^^^^ missing `baseline_metrics`, `content_type` and `evolution_rules`

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:100:16
    |
99  |           let latency_ok = state.latency
    |                            ------------- expected because this is `f64`
100 |               <= spec.baseline_metrics.latency
    |  ________________^
101 | |                 * (1.0 + spec.content_type.restrictions.max_latency_increase / 100.0);
    | |_____________________________________________________________________________________^ expected `f64`, found `f32`
    |
help: you can convert an `f32` to an `f64`
    |
100 ~             <= (spec.baseline_metrics.latency
101 ~                 * (1.0 + spec.content_type.restrictions.max_latency_increase / 100.0)).into();
    |

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:103:16
    |
102 |           let memory_ok = state.memory
    |                           ------------ expected because this is `f64`
103 |               <= spec.baseline_metrics.memory
    |  ________________^
104 | |                 * (1.0 + spec.content_type.restrictions.max_memory_increase / 100.0);
    | |____________________________________________________________________________________^ expected `f64`, found `f32`
    |
help: you can convert an `f32` to an `f64`
    |
103 ~             <= (spec.baseline_metrics.memory
104 ~                 * (1.0 + spec.content_type.restrictions.max_memory_increase / 100.0)).into();
    |

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:106:16
    |
105 |           let relevance_ok = state.relevance
    |                              --------------- expected because this is `f64`
106 |               >= spec.baseline_metrics.relevance
    |  ________________^
107 | |                 * (1.0 + spec.content_type.restrictions.min_relevance_improvement / 100.0);
    | |__________________________________________________________________________________________^ expected `f64`, found `f32`
    |
help: you can convert an `f32` to an `f64`
    |
106 ~             >= (spec.baseline_metrics.relevance
107 ~                 * (1.0 + spec.content_type.restrictions.min_relevance_improvement / 100.0)).into();
    |

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:115:46
    |
115 |             (spec.baseline_metrics.latency - state.latency) / spec.baseline_metrics.latency;
    |                                              ^^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0277]: cannot subtract `f64` from `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:115:44
    |
115 |             (spec.baseline_metrics.latency - state.latency) / spec.baseline_metrics.latency;
    |                                            ^ no implementation for `f32 - f64`
    |
    = help: the trait `std::ops::Sub<f64>` is not implemented for `f32`
    = help: the following other types implement trait `std::ops::Sub<Rhs>`:
              `&f32` implements `std::ops::Sub<&Complex<f32>>`
              `&f32` implements `std::ops::Sub<Complex<f32>>`
              `&f32` implements `std::ops::Sub<f32>`
              `&f32` implements `std::ops::Sub`
              `f32` implements `std::ops::Sub<&Complex<f32>>`
              `f32` implements `std::ops::Sub<&f32>`
              `f32` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
              `f32` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
            and 7 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:117:45
    |
117 |             (spec.baseline_metrics.memory - state.memory) / spec.baseline_metrics.memory;
    |                                             ^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0277]: cannot subtract `f64` from `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:117:43
    |
117 |             (spec.baseline_metrics.memory - state.memory) / spec.baseline_metrics.memory;
    |                                           ^ no implementation for `f32 - f64`
    |
    = help: the trait `std::ops::Sub<f64>` is not implemented for `f32`
    = help: the following other types implement trait `std::ops::Sub<Rhs>`:
              `&f32` implements `std::ops::Sub<&Complex<f32>>`
              `&f32` implements `std::ops::Sub<Complex<f32>>`
              `&f32` implements `std::ops::Sub<f32>`
              `&f32` implements `std::ops::Sub`
              `f32` implements `std::ops::Sub<&Complex<f32>>`
              `f32` implements `std::ops::Sub<&f32>`
              `f32` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
              `f32` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
            and 7 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:119:32
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`

error[E0277]: cannot subtract `f32` from `f64`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:119:30
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                              ^ no implementation for `f64 - f32`
    |
    = help: the trait `std::ops::Sub<f32>` is not implemented for `f64`
    = help: the following other types implement trait `std::ops::Sub<Rhs>`:
              `&f64` implements `std::ops::Sub<&Complex<f64>>`
              `&f64` implements `std::ops::Sub<Complex<f64>>`
              `&f64` implements `std::ops::Sub<f64>`
              `&f64` implements `std::ops::Sub`
              `f64` implements `std::ops::Sub<&Complex<f64>>`
              `f64` implements `std::ops::Sub<&f64>`
              `f64` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
              `f64` implements `std::ops::Sub<&ndarray::ArrayBase<S, D>>`
            and 7 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:119:67
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`

error[E0277]: cannot divide `f64` by `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:119:65
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                                                                 ^ no implementation for `f64 / f32`
    |
    = help: the trait `std::ops::Div<f32>` is not implemented for `f64`
    = help: the following other types implement trait `std::ops::Div<Rhs>`:
              `&f64` implements `std::ops::Div<&Complex<f64>>`
              `&f64` implements `std::ops::Div<Complex<f64>>`
              `&f64` implements `std::ops::Div<f64>`
              `&f64` implements `std::ops::Div`
              `f64` implements `std::ops::Div<&Complex<f64>>`
              `f64` implements `std::ops::Div<&f64>`
              `f64` implements `std::ops::Div<&ndarray::ArrayBase<S, D>>`
              `f64` implements `std::ops::Div<&ndarray::ArrayBase<S, D>>`
            and 7 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:123:69
    |
123 |             (latency_improvement * 0.3 + memory_improvement * 0.3 + relevance_improvement * 0.4)
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0277]: cannot add `f64` to `f32`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:123:67
    |
123 |             (latency_improvement * 0.3 + memory_improvement * 0.3 + relevance_improvement * 0.4)
    |                                                                   ^ no implementation for `f32 + f64`
    |
    = help: the trait `std::ops::Add<f64>` is not implemented for `f32`
    = help: the following other types implement trait `std::ops::Add<Rhs>`:
              `&f32` implements `std::ops::Add<&Complex<f32>>`
              `&f32` implements `std::ops::Add<Complex<f32>>`
              `&f32` implements `std::ops::Add<f32>`
              `&f32` implements `std::ops::Add`
              `f32` implements `std::ops::Add<&Complex<f32>>`
              `f32` implements `std::ops::Add<&f32>`
              `f32` implements `std::ops::Add<&ndarray::ArrayBase<S, D>>`
              `f32` implements `std::ops::Add<&ndarray::ArrayBase<S, D>>`
            and 7 others

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/performance.rs:127:9
    |
95  |     fn calculate_reward_from_factors(&self, factors: &ImpactFactors, state: &CodeState) -> f64 {
    |                                                                                            --- expected `f64` because of return type
...
127 |         weighted_reward
    |         ^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |
help: you can convert an `f32` to an `f64`
    |
127 |         weighted_reward.into()
    |                        +++++++

error[E0624]: associated function `new` is private
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:290:24
    |
290 |         PendingMemory::new(rx)
    |                        ^^^ private associated function
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/memory/memory_manager.rs:85:5
    |
85  |     fn new(rx: tokio::sync::oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ---------------------------------------------------------------------- private associated function defined here

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:272:94
    |
272 |                 let cognitive_memory = manager.enhance_memory_cognitively(memory_clone).await?;
    |                                        ------------------------------------------------------^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    |                                        |
    |                                        this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/utils/error.rs:11:1
    |
11  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:282:27
    |
281 | /                 manager.store_cognitive_metadata(&stored.id, &cognitive_memory)
282 | |                     .await?;
    | |                          -^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    | |__________________________|
    |                            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/utils/error.rs:11:1
    |
11  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0624]: associated function `new` is private
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:322:24
    |
322 |         PendingMemory::new(rx)
    |                        ^^^ private associated function
    |
   ::: /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/memory/memory_manager.rs:85:5
    |
85  |     fn new(rx: tokio::sync::oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ---------------------------------------------------------------------- private associated function defined here

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:311:101
    |
311 |                     let cognitive_memory = manager.enhance_memory_cognitively(updated.clone()).await?;
    |                                            ---------------------------------------------------------^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    |                                            |
    |                                            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/utils/error.rs:11:1
    |
11  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/manager.rs:313:31
    |
312 | /                     manager.store_cognitive_metadata(&updated.id, &cognitive_memory)
313 | |                         .await?;
    | |                              -^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    | |______________________________|
    |                                this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/utils/error.rs:11:1
    |
11  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/state.rs:12:24
     |
12   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
20   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1002 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/state.rs:20:20
     |
20   |     pub timestamp: Instant,
     |                    ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 962 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/state.rs:20:20
     |
20   |     pub timestamp: Instant,
     |                    ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 962 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
  --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/state.rs:12:35
   |
12 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 962 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:69:24
     |
69   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
70   | pub struct RoutingMetric {
71   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1003 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:79:24
     |
79   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
80   | pub struct FidelityMetric {
81   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1003 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:88:24
     |
88   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
89   | pub struct ResourceMetric {
90   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1003 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder.rs:155:41
    |
155 |                     .filter(|&(_, bit)| bit)
    |                                         ^^^ expected `bool`, found `&bool`
    |
help: consider dereferencing the borrow
    |
155 |                     .filter(|&(_, bit)| *bit)
    |                                         +

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder.rs:201:35
    |
201 |             .filter(|&(_, a)| a > 0.5)
    |                                   ^^^ expected `&f64`, found floating-point number
    |
help: consider dereferencing the borrow
    |
201 |             .filter(|&(_, a)| *a > 0.5)
    |                               +

error[E0308]: mismatched types
   --> /Users/davidmaple/.cargo/git/checkouts/sweetmcp-66fda7d21805b0a1/27c806d/packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder.rs:219:37
    |
219 |                 .filter(|&(_, bit)| bit)
    |                                     ^^^ expected `bool`, found `&bool`
    |
help: consider dereferencing the borrow
    |
219 |                 .filter(|&(_, bit)| *bit)
    |                                     +

warning: function `default_collapse_probability` is never used
   --> packages/domain/src/memory/cognitive/types.rs:537:4
    |
537 | fn default_collapse_probability() -> Arc<AtomicF32> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: function `default_quantum_entropy` is never used
   --> packages/domain/src/memory/cognitive/types.rs:542:4
    |
542 | fn default_quantum_entropy() -> Arc<AtomicF64> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
   --> packages/domain/src/memory/cognitive/types.rs:615:12
    |
612 | impl EntanglementBond {
    | --------------------- associated function in this implementation
...
615 |     pub fn new(target_id: Uuid, bond_strength: f32, entanglement_type: EntanglementType) -> Self {
    |            ^^^

warning: function `default_attention_weights` is never used
   --> packages/domain/src/memory/cognitive/types.rs:794:4
    |
794 | fn default_attention_weights() -> Arc<CachePadded<AtomicAttentionWeights>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `default_working_memory` is never used
   --> packages/domain/src/memory/cognitive/types.rs:798:4
    |
798 | fn default_working_memory() -> Arc<SegQueue<WorkingMemoryItem>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^

warning: function `default_long_term_memory` is never used
   --> packages/domain/src/memory/cognitive/types.rs:802:4
    |
802 | fn default_long_term_memory() -> Arc<SkipMap<Uuid, CognitiveMemoryEntry>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `default_temporal_context` is never used
   --> packages/domain/src/memory/cognitive/types.rs:806:4
    |
806 | fn default_temporal_context() -> Arc<CachePadded<TemporalContext>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `default_uncertainty` is never used
   --> packages/domain/src/memory/cognitive/types.rs:810:4
    |
810 | fn default_uncertainty() -> Arc<CachePadded<AtomicF32>> {
    |    ^^^^^^^^^^^^^^^^^^^

warning: function `default_confidence` is never used
   --> packages/domain/src/memory/cognitive/types.rs:814:4
    |
814 | fn default_confidence() -> Arc<CachePadded<AtomicF32>> {
    |    ^^^^^^^^^^^^^^^^^^

warning: function `default_meta_awareness` is never used
   --> packages/domain/src/memory/cognitive/types.rs:818:4
    |
818 | fn default_meta_awareness() -> Arc<CachePadded<AtomicF32>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^

warning: function `default_cognitive_stats` is never used
   --> packages/domain/src/memory/cognitive/types.rs:822:4
    |
822 | fn default_cognitive_stats() -> Arc<CachePadded<CognitiveStats>> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^

warning: field `config` is never read
    --> packages/domain/src/memory/cognitive/types.rs:1030:5
     |
1028 | pub struct CognitiveProcessor {
     |            ------------------ field in this struct
1029 |     /// Processing configuration
1030 |     config: CognitiveProcessorConfig,
     |     ^^^^^^
     |
     = note: `CognitiveProcessor` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `cache` is never read
    --> packages/domain/src/memory/cognitive/types.rs:1112:5
     |
1108 | pub struct PatternMatcher {
     |            -------------- field in this struct
...
1112 |     cache: Arc<SkipMap<Uuid, f32>>,
     |     ^^^^^
     |
     = note: `PatternMatcher` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: struct `MemoryStub` is never constructed
  --> packages/domain/src/memory/manager.rs:43:12
   |
43 | pub struct MemoryStub {
   |            ^^^^^^^^^^

warning: associated items `new` and `into_memory` are never used
  --> packages/domain/src/memory/manager.rs:56:12
   |
47 | impl MemoryStub {
   | --------------- associated items in this implementation
...
56 |     pub fn new() -> Self {
   |            ^^^
...
81 |     pub async fn into_memory(self) -> Result<Memory, MemoryError> {
   |                  ^^^^^^^^^^^

warning: constant `MAX_MEMORY_RESULTS` is never used
  --> packages/domain/src/memory/manager.rs:87:7
   |
87 | const MAX_MEMORY_RESULTS: usize = 1000;
   |       ^^^^^^^^^^^^^^^^^^

warning: constant `MAX_SEARCH_RESULTS` is never used
  --> packages/domain/src/memory/manager.rs:90:7
   |
90 | const MAX_SEARCH_RESULTS: usize = 100;
   |       ^^^^^^^^^^^^^^^^^^

warning: static `MEMORY_NODE_POOL` is never used
  --> packages/domain/src/memory/manager.rs:93:8
   |
93 | static MEMORY_NODE_POOL: Lazy<SegQueue<Box<MemoryNode>>> = Lazy::new(|| SegQueue::new());
   |        ^^^^^^^^^^^^^^^^

warning: static `POOL_STATS` is never used
  --> packages/domain/src/memory/manager.rs:96:8
   |
96 | static POOL_STATS: Lazy<CachePadded<AtomicUsize>> =
   |        ^^^^^^^^^^

warning: static `TIMESTAMP_CACHE` is never used
   --> packages/domain/src/memory/manager.rs:100:8
    |
100 | static TIMESTAMP_CACHE: Lazy<CachePadded<AtomicU64>> =
    |        ^^^^^^^^^^^^^^^

warning: static `TIMESTAMP_CACHE_LAST_UPDATE` is never used
   --> packages/domain/src/memory/manager.rs:104:8
    |
104 | static TIMESTAMP_CACHE_LAST_UPDATE: Lazy<CachePadded<AtomicU64>> =
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `TIMESTAMP_CACHE_REFRESH_INTERVAL_MICROS` is never used
   --> packages/domain/src/memory/manager.rs:108:7
    |
108 | const TIMESTAMP_CACHE_REFRESH_INTERVAL_MICROS: u64 = 1000;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_memory_node_pool` is never used
   --> packages/domain/src/memory/manager.rs:118:8
    |
118 | pub fn initialize_memory_node_pool(initial_size: usize, embedding_dim: usize) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_pooled_memory_node` is never used
   --> packages/domain/src/memory/manager.rs:149:8
    |
149 | pub fn get_pooled_memory_node() -> Box<MemoryNode> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `return_pooled_memory_node` is never used
   --> packages/domain/src/memory/manager.rs:169:8
    |
169 | pub fn return_pooled_memory_node(mut node: Box<MemoryNode>) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_timestamp_cache` is never used
   --> packages/domain/src/memory/manager.rs:182:8
    |
182 | pub fn initialize_timestamp_cache() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_cached_timestamp` is never used
   --> packages/domain/src/memory/manager.rs:200:8
    |
200 | pub fn get_cached_timestamp() -> u64 {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: function `get_timestamp_cache_stats` is never used
   --> packages/domain/src/memory/manager.rs:226:8
    |
226 | pub fn get_timestamp_cache_stats() -> (u64, u64, u64) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `is_timestamp_cache_fresh` is never used
   --> packages/domain/src/memory/manager.rs:245:8
    |
245 | pub fn is_timestamp_cache_fresh() -> bool {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_STACK_EMBEDDING_SIZE` is never used
  --> packages/domain/src/memory/ops.rs:42:11
   |
42 | pub const MAX_STACK_EMBEDDING_SIZE: usize = 512;
   |           ^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `VECTOR_POOL_SIZE` is never used
  --> packages/domain/src/memory/ops.rs:45:11
   |
45 | pub const VECTOR_POOL_SIZE: usize = 1024;
   |           ^^^^^^^^^^^^^^^^

warning: static `SIMD_OPERATIONS_COUNT` is never used
  --> packages/domain/src/memory/ops.rs:48:8
   |
48 | static SIMD_OPERATIONS_COUNT: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^^^^^^^^^^^^

warning: static `CACHE_HITS` is never used
  --> packages/domain/src/memory/ops.rs:49:8
   |
49 | static CACHE_HITS: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^

warning: static `CACHE_MISSES` is never used
  --> packages/domain/src/memory/ops.rs:50:8
   |
50 | static CACHE_MISSES: Lazy<RelaxedCounter> = Lazy::new(|| RelaxedCounter::new(0));
   |        ^^^^^^^^^^^^

warning: constant `MAX_MEMORY_TOOL_RESULTS` is never used
  --> packages/domain/src/memory/tool.rs:25:7
   |
25 | const MAX_MEMORY_TOOL_RESULTS: usize = 1000;
   |       ^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_STREAMING_RESULTS` is never used
  --> packages/domain/src/memory/tool.rs:28:7
   |
28 | const MAX_STREAMING_RESULTS: usize = 100;
   |       ^^^^^^^^^^^^^^^^^^^^^

warning: static `TOOL_STATS` is never used
  --> packages/domain/src/memory/tool.rs:31:8
   |
31 | static TOOL_STATS: Lazy<CachePadded<AtomicUsize>> =
   |        ^^^^^^^^^^

warning: static `RESULT_QUEUE` is never used
  --> packages/domain/src/memory/tool.rs:35:8
   |
35 | static RESULT_QUEUE: Lazy<SegQueue<MemoryNode>> = Lazy::new(|| SegQueue::new());
   |        ^^^^^^^^^^^^

warning: field `data` is never read
  --> packages/domain/src/memory/tool.rs:41:5
   |
39 | pub struct MemoryTool {
   |            ---------- field in this struct
40 |     /// Tool metadata
41 |     data: McpToolData,
   |     ^^^^
   |
   = note: `MemoryTool` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: static `CACHED_TIMESTAMP` is never used
 --> packages/domain/src/memory/cache.rs:5:8
  |
5 | static CACHED_TIMESTAMP: AtomicU64 = AtomicU64::new(0);
  |        ^^^^^^^^^^^^^^^^

warning: function `get_cached_timestamp` is never used
  --> packages/domain/src/memory/cache.rs:10:8
   |
10 | pub fn get_cached_timestamp() -> u64 {
   |        ^^^^^^^^^^^^^^^^^^^^

warning: function `update_cached_timestamp` is never used
  --> packages/domain/src/memory/cache.rs:23:4
   |
23 | fn update_cached_timestamp() {
   |    ^^^^^^^^^^^^^^^^^^^^^^^

warning: function `get_cached_system_time` is never used
  --> packages/domain/src/memory/cache.rs:34:8
   |
34 | pub fn get_cached_system_time() -> SystemTime {
   |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `initialize_timestamp_cache` is never used
  --> packages/domain/src/memory/cache.rs:40:8
   |
40 | pub fn initialize_timestamp_cache() {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `MemoryNodePool` is never constructed
 --> packages/domain/src/memory/pool.rs:7:12
  |
7 | pub struct MemoryNodePool {
  |            ^^^^^^^^^^^^^^

warning: associated items `new`, `acquire`, `release`, and `stats` are never used
  --> packages/domain/src/memory/pool.rs:16:12
   |
13 | impl MemoryNodePool {
   | ------------------- associated items in this implementation
...
16 |     pub fn new(capacity: usize, embedding_dimension: usize) -> Self {
   |            ^^^
...
44 |     pub fn acquire(&self) -> PooledMemoryNode<'_> {
   |            ^^^^^^^
...
69 |     fn release(&self, mut node: MemoryNode) {
   |        ^^^^^^^
...
90 |     pub fn stats(&self) -> (usize, usize) {
   |            ^^^^^

warning: struct `PooledMemoryNode` is never constructed
  --> packages/domain/src/memory/pool.rs:96:12
   |
96 | pub struct PooledMemoryNode<'a> {
   |            ^^^^^^^^^^^^^^^^

warning: methods `initialize`, `set_embedding`, `as_ref`, `as_mut`, and `take` are never used
   --> packages/domain/src/memory/pool.rs:105:12
    |
102 | impl<'a> PooledMemoryNode<'a> {
    | ----------------------------- methods in this implementation
...
105 |     pub fn initialize(
    |            ^^^^^^^^^^
...
124 |     pub fn set_embedding(&mut self, embedding: Vec<f32>) {
    |            ^^^^^^^^^^^^^
...
132 |     pub fn as_ref(&self) -> Option<&MemoryNode> {
    |            ^^^^^^
...
138 |     pub fn as_mut(&mut self) -> Option<&mut MemoryNode> {
    |            ^^^^^^
...
148 |     pub fn take(mut self) -> Option<MemoryNode> {
    |            ^^^^

warning: static `MEMORY_NODE_POOL` is never used
   --> packages/domain/src/memory/pool.rs:213:8
    |
213 | static MEMORY_NODE_POOL: std::sync::OnceLock<MemoryNodePool> = std::sync::OnceLock::new();
    |        ^^^^^^^^^^^^^^^^

warning: function `initialize_memory_node_pool` is never used
   --> packages/domain/src/memory/pool.rs:217:8
    |
217 | pub fn initialize_memory_node_pool(capacity: usize, embedding_dimension: usize) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `acquire_pooled_node` is never used
   --> packages/domain/src/memory/pool.rs:223:8
    |
223 | pub fn acquire_pooled_node() -> Option<PooledMemoryNode<'static>> {
    |        ^^^^^^^^^^^^^^^^^^^

warning: function `memory_node_pool_stats` is never used
   --> packages/domain/src/memory/pool.rs:230:8
    |
230 | pub fn memory_node_pool_stats() -> Option<(usize, usize)> {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `content_hash` is never used
 --> packages/domain/src/memory/serialization.rs:6:8
  |
6 | pub fn content_hash(content: &str) -> u64 {
  |        ^^^^^^^^^^^^

warning: struct `MemoryRecord` is never constructed
  --> packages/domain/src/memory/serialization.rs:14:12
   |
14 | pub struct MemoryRecord {
   |            ^^^^^^^^^^^^

warning: associated items `new`, `serialize_to_buffer`, `deserialize_from_buffer`, and `to_content_string` are never used
  --> packages/domain/src/memory/serialization.rs:25:12
   |
22 | impl MemoryRecord {
   | ----------------- associated items in this implementation
...
25 |     pub fn new(input: &str, output: &str, timestamp: u64) -> Self {
   |            ^^^
...
37 |     pub fn serialize_to_buffer(&self, buffer: &mut SerializationBuffer) {
   |            ^^^^^^^^^^^^^^^^^^^
...
48 |     pub fn deserialize_from_buffer(buffer: &SerializationBuffer) -> Option<Self> {
   |            ^^^^^^^^^^^^^^^^^^^^^^^
...
76 |     pub fn to_content_string(&self) -> String {
   |            ^^^^^^^^^^^^^^^^^

warning: struct `SerializationBuffer` is never constructed
  --> packages/domain/src/memory/serialization.rs:90:12
   |
90 | pub struct SerializationBuffer {
   |            ^^^^^^^^^^^^^^^^^^^

warning: multiple associated items are never used
   --> packages/domain/src/memory/serialization.rs:98:12
    |
95  | impl SerializationBuffer {
    | ------------------------ associated items in this implementation
...
98  |     pub fn new(capacity: usize) -> Self {
    |            ^^^
...
107 |     pub fn clear(&mut self) {
    |            ^^^^^
...
113 |     pub fn write_u64(&mut self, value: u64) {
    |            ^^^^^^^^^
...
119 |     pub fn write_u32(&mut self, value: u32) {
    |            ^^^^^^^^^
...
125 |     pub fn as_slice(&self) -> &[u8] {
    |            ^^^^^^^^
...
131 |     pub fn len(&self) -> usize {
    |            ^^^
...
137 |     pub fn is_empty(&self) -> bool {
    |            ^^^^^^^^
...
143 |     pub fn reserve(&mut self, additional: usize) {
    |            ^^^^^^^

warning: function `with_serialization_buffer` is never used
   --> packages/domain/src/memory/serialization.rs:166:8
    |
166 | pub fn with_serialization_buffer<F, R>(f: F) -> R
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: trait `OpTrait` is never used
 --> packages/domain/src/memory/workflow.rs:7:11
  |
7 | pub trait OpTrait {
  |           ^^^^^^^

warning: struct `MemoryWorkflowOp` is never constructed
  --> packages/domain/src/memory/workflow.rs:17:12
   |
17 | pub struct MemoryWorkflowOp<M, P> {
   |            ^^^^^^^^^^^^^^^^

warning: trait `Prompt` is never used
  --> packages/domain/src/memory/workflow.rs:38:11
   |
38 | pub trait Prompt: Clone {
   |           ^^^^^^

warning: variant `Error` is never constructed
  --> packages/domain/src/memory/workflow.rs:48:5
   |
46 | pub enum PromptError {
   |          ----------- variant in this enum
47 |     #[error("Prompt error: {0}")]
48 |     Error(String),
   |     ^^^^^
   |
   = note: `PromptError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `Other` is never constructed
  --> packages/domain/src/memory/workflow.rs:61:5
   |
53 | pub enum WorkflowError {
   |          ------------- variant in this enum
...
61 |     Other(String),
   |     ^^^^^
   |
   = note: `WorkflowError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: struct `MemoryEnhancedWorkflow` is never constructed
  --> packages/domain/src/memory/workflow.rs:65:12
   |
65 | pub struct MemoryEnhancedWorkflow<M, P> {
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `with_context_limit`, and `build` are never used
  --> packages/domain/src/memory/workflow.rs:76:12
   |
71 | / impl<M, P> MemoryEnhancedWorkflow<M, P>
72 | | where
73 | |     M: MemoryManager + Clone,
74 | |     P: Prompt + Send + Sync,
   | |____________________________- associated items in this implementation
75 |   {
76 |       pub fn new(memory_manager: M, prompt_model: P) -> Self {
   |              ^^^
...
84 |       pub fn with_context_limit(mut self, limit: usize) -> Self {
   |              ^^^^^^^^^^^^^^^^^^
...
90 |       pub fn build(self) -> impl OpTrait<Input = String, Output = Result<String, WorkflowError>> {
   |              ^^^^^

warning: type alias `BoxFuture` is never used
  --> packages/domain/src/memory/types_legacy.rs:11:10
   |
11 | pub type BoxFuture<T> = Pin<Box<dyn Future<Output = T> + Send>>;
   |          ^^^^^^^^^

warning: field `pattern_cache` is never read
   --> packages/domain/src/model/resolver.rs:183:5
    |
176 | pub struct ModelResolver {
    |            ------------- field in this struct
...
183 |     pattern_cache: DashMap<String, (String, Regex), RandomState>,
    |     ^^^^^^^^^^^^^

warning: field `cylo_instance` is never read
  --> packages/domain/src/tool/core.rs:82:5
   |
73 | pub struct Tool<T> {
   |            ---- field in this struct
...
82 |     cylo_instance: Option<()>,
   |     ^^^^^^^^^^^^^

warning: field `cylo_instance` is never read
   --> packages/domain/src/tool/core.rs:174:5
    |
163 | pub struct NamedTool {
    |            --------- field in this struct
...
174 |     cylo_instance: Option<()>,
    |     ^^^^^^^^^^^^^
    |
    = note: `NamedTool` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: `fluent_ai_domain` (lib) generated 69 warnings
    Checking fluent_ai_candle v0.1.0 (/Volumes/samsung_t9/fluent-ai/packages/fluent-ai-candle)
error[E0428]: the name `audio` is defined multiple times
   --> packages/provider/src/clients/openai/mod.rs:489:1
    |
45  | mod audio;
    | ---------- previous definition of the module `audio` here
...
489 | pub mod audio {
    | ^^^^^^^^^^^^^ `audio` redefined here
    |
    = note: `audio` must be defined only once in the type namespace of this module

error[E0428]: the name `vision` is defined multiple times
   --> packages/provider/src/clients/openai/mod.rs:531:1
    |
52  | mod vision;
    | ----------- previous definition of the module `vision` here
...
531 | pub mod vision {
    | ^^^^^^^^^^^^^^ `vision` redefined here
    |
    = note: `vision` must be defined only once in the type namespace of this module

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
  --> packages/fluent-ai-candle/src/lib.rs:22:9
   |
22 | pub use fluent_ai_core::completion::{
   |         ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
   |
   = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
  --> packages/fluent-ai-candle/src/client.rs:11:5
   |
11 | use fluent_ai_core::completion::{
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
   |
   = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
 --> packages/fluent-ai-candle/src/error.rs:5:5
  |
5 | use fluent_ai_core::completion::error::{CandleError as CoreCandleError, CompletionError};
  |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
  |
  = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
  --> packages/fluent-ai-candle/src/generator.rs:10:5
   |
10 | use fluent_ai_core::completion::{CompletionRequest, CompletionResponse, StreamingResponse};
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
   |
   = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`

error[E0432]: unresolved import `tokio_stream`
  --> packages/fluent-ai-candle/src/generator.rs:13:5
   |
13 | use tokio_stream::Stream;
   |     ^^^^^^^^^^^^ use of unresolved module or unlinked crate `tokio_stream`
   |
   = help: if you wanted to use a crate named `tokio_stream`, use `cargo add tokio_stream` to add it to your `Cargo.toml`

error[E0252]: the name `Deserialize` is defined multiple times
   --> packages/provider/src/clients/mistral/completion.rs:557:13
    |
4   | use serde::{Deserialize, Serialize};
    |             ----------- previous import of the trait `Deserialize` here
...
557 | use serde::{Deserialize, Serialize};
    |             ^^^^^^^^^^^--
    |             |
    |             `Deserialize` reimported here
    |             help: remove unnecessary import
    |
    = note: `Deserialize` must be defined only once in the type namespace of this module

error[E0252]: the name `Serialize` is defined multiple times
   --> packages/provider/src/clients/mistral/completion.rs:557:26
    |
4   | use serde::{Deserialize, Serialize};
    |                          --------- previous import of the trait `Serialize` here
...
557 | use serde::{Deserialize, Serialize};
    |                          ^^^^^^^^^ `Serialize` reimported here
    |
    = note: `Serialize` must be defined only once in the type namespace of this module

error[E0252]: the name `Value` is defined multiple times
   --> packages/provider/src/clients/mistral/completion.rs:558:5
    |
5   | use serde_json::{Value, json};
    |                  ----- previous import of the type `Value` here
...
558 | use serde_json::Value;
    |     ^^^^^^^^^^^^^^^^^ `Value` reimported here
    |
    = note: `Value` must be defined only once in the type namespace of this module

error[E0252]: the name `Pin` is defined multiple times
  --> packages/provider/src/clients/openrouter/streaming.rs:16:5
   |
15 | use std::pin::Pin;
   |     ------------- previous import of the type `Pin` here
16 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^ `Pin` reimported here
   |
   = note: `Pin` must be defined only once in the type namespace of this module

error[E0252]: the name `StreamExt` is defined multiple times
    --> packages/provider/src/clients/openrouter/streaming.rs:1942:5
     |
31   | use futures_util::{Stream, StreamExt};
     |                            --------- previous import of the trait `StreamExt` here
...
1942 | use futures::StreamExt;
     |     ^^^^^^^^^^^^^^^^^^ `StreamExt` reimported here
     |
     = note: `StreamExt` must be defined only once in the type namespace of this module

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
   --> packages/fluent-ai-candle/src/generator.rs:416:40
    |
416 |             Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
    |                                        ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
    |
    = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`
help: consider importing this module
    |
3   + use crate::error;
    |
help: if you import `error`, refer to it directly
    |
416 -             Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
416 +             Result<CompletionResponse, error::CompletionError>,
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
   --> packages/fluent-ai-candle/src/generator.rs:731:36
    |
731 |         Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
    |                                    ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
    |
    = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`
help: consider importing this module
    |
3   + use crate::error;
    |
help: if you import `error`, refer to it directly
    |
731 -         Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
731 +         Result<CompletionResponse, error::CompletionError>,
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
   --> packages/fluent-ai-candle/src/generator.rs:740:40
    |
740 |             Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
    |                                        ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
    |
    = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`
help: consider importing this module
    |
3   + use crate::error;
    |
help: if you import `error`, refer to it directly
    |
740 -             Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>,
740 +             Result<CompletionResponse, error::CompletionError>,
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fluent_ai_core`
   --> packages/fluent-ai-candle/src/generator.rs:748:44
    |
748 |     type Item = Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>;
    |                                            ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `fluent_ai_core`
    |
    = help: if you wanted to use a crate named `fluent_ai_core`, use `cargo add fluent_ai_core` to add it to your `Cargo.toml`
help: consider importing this module
    |
3   + use crate::error;
    |
help: if you import `error`, refer to it directly
    |
748 -     type Item = Result<CompletionResponse, fluent_ai_core::completion::error::CompletionError>;
748 +     type Item = Result<CompletionResponse, error::CompletionError>;
    |

warning: unused import: `candle_transformers::models`
  --> packages/fluent-ai-candle/src/model.rs:10:5
   |
10 | use candle_transformers::models;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0255]: the name `FinishReason` is defined multiple times
   --> packages/provider/src/clients/gemini/gemini_types.rs:521:1
    |
8   | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
    |                                                ------------ previous import of the type `FinishReason` here
...
521 | pub enum FinishReason {
    | ^^^^^^^^^^^^^^^^^^^^^ `FinishReason` redefined here
    |
    = note: `FinishReason` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
    |
8   | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason as OtherFinishReason, Usage};
    |                                                             ++++++++++++++++++++

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fastrand`
   --> packages/fluent-ai-candle/src/generator.rs:647:13
    |
647 |             fastrand::f32()
    |             ^^^^^^^^ use of unresolved module or unlinked crate `fastrand`
    |
    = help: if you wanted to use a crate named `fastrand`, use `cargo add fastrand` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`
   --> packages/fluent-ai-candle/src/lib.rs:225:24
    |
225 |         rng: &mut impl rand::Rng,
    |                        ^^^^ use of unresolved module or unlinked crate `rand`
    |
    = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`

Some errors have detailed explanations: E0432, E0433.
For more information about an error, try `rustc --explain E0432`.
warning: `fluent_ai_candle` (lib) generated 1 warning
error: could not compile `fluent_ai_candle` (lib) due to 11 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0255]: the name `ToolDefinition` is defined multiple times
   --> packages/provider/src/clients/mistral/completion.rs:540:5
    |
180 | pub struct ToolDefinition {
    | ------------------------- previous definition of the type `ToolDefinition` here
...
540 | use fluent_ai_domain::tool::ToolDefinition;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ToolDefinition` reimported here
    |
    = note: `ToolDefinition` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
    |
540 | use fluent_ai_domain::tool::ToolDefinition as OtherToolDefinition;
    |                                            ++++++++++++++++++++++

error: This macro cannot be used on the current target.
                                   You can prevent it from being used in other architectures by
                                   guarding it behind a cfg(any(target_arch = "x86", target_arch = "x86_64")).
    --> packages/provider/src/clients/openrouter/streaming.rs:1333:29
     |
1333 |             avx2_available: is_x86_feature_detected!("avx2"),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this error originates in the macro `is_x86_feature_detected` (in Nightly builds, run with -Z macro-backtrace for more info)

error: This macro cannot be used on the current target.
                                   You can prevent it from being used in other architectures by
                                   guarding it behind a cfg(any(target_arch = "x86", target_arch = "x86_64")).
    --> packages/provider/src/clients/openrouter/streaming.rs:1334:31
     |
1334 |             avx512_available: is_x86_feature_detected!("avx512f"),
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this error originates in the macro `is_x86_feature_detected` (in Nightly builds, run with -Z macro-backtrace for more info)

error: This macro cannot be used on the current target.
                                   You can prevent it from being used in other architectures by
                                   guarding it behind a cfg(any(target_arch = "x86", target_arch = "x86_64")).
    --> packages/provider/src/clients/openrouter/streaming.rs:1335:30
     |
1335 |             sse42_available: is_x86_feature_detected!("sse4.2"),
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this error originates in the macro `is_x86_feature_detected` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved imports `fluent_ai_domain::model_info`, `fluent_ai_domain::models`
 --> packages/provider/src/lib.rs:7:28
  |
7 | pub use fluent_ai_domain::{model_info::ModelInfoData, models::Models};
  |                            ^^^^^^^^^^                 ^^^^^^ could not find `models` in `fluent_ai_domain`
  |                            |
  |                            could not find `model_info` in `fluent_ai_domain`

error[E0432]: unresolved import `super::super::discovery`
 --> packages/provider/src/clients/anthropic/discovery.rs:8:19
  |
8 | use super::super::discovery::{DiscoveryError, DiscoveryResult, ProviderModelDiscovery};
  |                   ^^^^^^^^^ could not find `discovery` in `super`

error[E0432]: unresolved imports `crate::clients::openai::TranscriptionResponse`, `crate::clients::openai::send_compatible_streaming_request`
  --> packages/provider/src/clients/azure/completion.rs:17:29
   |
17 |     clients::openai::{self, TranscriptionResponse, send_compatible_streaming_request},
   |                             ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `send_compatible_streaming_request` in `clients::openai`
   |                             |
   |                             no `TranscriptionResponse` in `clients::openai`
   |
   = help: consider importing this struct instead:
           crate::clients::huggingface::transcription::TranscriptionResponse
note: struct `crate::clients::openai::audio::TranscriptionResponse` exists but is inaccessible
  --> packages/provider/src/clients/openai/audio.rs:90:1
   |
90 | pub struct TranscriptionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `fluent_ai_domain::model::EmbeddingModel`
 --> packages/provider/src/clients/azure/embedding.rs:9:5
  |
9 | use fluent_ai_domain::model::EmbeddingModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `EmbeddingModel` in `model`
  |
help: consider importing one of these traits instead
  |
9 - use fluent_ai_domain::model::EmbeddingModel;
9 + use crate::EmbeddingModel;
  |
9 - use fluent_ai_domain::model::EmbeddingModel;
9 + use crate::domain::EmbeddingModel;
  |
9 - use fluent_ai_domain::model::EmbeddingModel;
9 + use fluent_ai_domain::EmbeddingModel;
  |

error[E0432]: unresolved import `crate::clients::openai::send_compatible_streaming_request`
  --> packages/provider/src/clients/azure/streaming.rs:13:29
   |
13 |     clients::openai::{self, send_compatible_streaming_request},
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `send_compatible_streaming_request` in `clients::openai`

error[E0432]: unresolved import `fluent_ai_domain::model::TranscriptionModel`
 --> packages/provider/src/clients/azure/transcription.rs:9:5
  |
9 | use fluent_ai_domain::model::TranscriptionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TranscriptionModel` in `model`

error[E0432]: unresolved import `crate::clients::openai::TranscriptionResponse`
  --> packages/provider/src/clients/azure/transcription.rs:14:5
   |
14 |     clients::openai::TranscriptionResponse,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TranscriptionResponse` in `clients::openai`
   |
   = help: consider importing this struct instead:
           crate::clients::huggingface::transcription::TranscriptionResponse
note: struct `crate::clients::openai::audio::TranscriptionResponse` exists but is inaccessible
  --> packages/provider/src/clients/openai/audio.rs:90:1
   |
90 | pub struct TranscriptionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `fluent_ai_domain::message::Role`
  --> packages/provider/src/clients/bedrock/completion.rs:15:42
   |
15 | use fluent_ai_domain::message::{Message, Role};
   |                                          ^^^^ no `Role` in `message`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Role
           crate::clients::bedrock::error::CredentialsSource::Role
           crate::clients::gemini::Role
           crate::clients::gemini::completion_old::gemini_api_types::Role
           crate::clients::perplexity::completion::Role

error[E0432]: unresolved import `fluent_ai_domain::ModelInfoData`
 --> packages/provider/src/clients/candle/models.rs:5:42
  |
5 | use fluent_ai_domain::{Model, ModelInfo, ModelInfoData};
  |                                          ^^^^^^^^^^^^^
  |                                          |
  |                                          no `ModelInfoData` in the root
  |                                          help: a similar name exists in the module: `ModelInfo`
  |
  = help: consider importing this unresolved item through its public re-export instead:
          crate::ModelInfoData

error[E0432]: unresolved import `crate::clients::openai::StreamingCompletionResponse`
   --> packages/provider/src/clients/deepseek/streaming.rs:11:9
    |
11  | pub use crate::clients::openai::StreamingCompletionResponse;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `StreamingCompletionResponse` in `clients::openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs instead
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::azure::StreamingCompletionResponse;
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |

error[E0432]: unresolved import `fluent_ai_domain::model::EmbeddingModel`
 --> packages/provider/src/clients/gemini/embedding.rs:6:5
  |
6 | use fluent_ai_domain::model::EmbeddingModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `EmbeddingModel` in `model`
  |
help: consider importing one of these traits instead
  |
6 - use fluent_ai_domain::model::EmbeddingModel;
6 + use crate::EmbeddingModel;
  |
6 - use fluent_ai_domain::model::EmbeddingModel;
6 + use crate::domain::EmbeddingModel;
  |
6 - use fluent_ai_domain::model::EmbeddingModel;
6 + use fluent_ai_domain::EmbeddingModel;
  |

error[E0432]: unresolved import `fluent_ai_domain::model::TranscriptionModel`
 --> packages/provider/src/clients/gemini/transcription.rs:4:5
  |
4 | use fluent_ai_domain::model::TranscriptionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TranscriptionModel` in `model`

error[E0432]: unresolved import `crate::clients::openai::CompletionResponse`
   --> packages/provider/src/clients/groq/completion.rs:169:9
    |
169 | pub use crate::clients::openai::CompletionResponse;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionResponse` in `clients::openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs instead
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::mistral::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::openrouter::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::perplexity::completion::CompletionResponse;
    |
169 - pub use crate::clients::openai::CompletionResponse;
169 + pub use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates

error[E0432]: unresolved import `crate::clients::openai::StreamingCompletionResponse`
   --> packages/provider/src/clients/groq/streaming.rs:11:9
    |
11  | pub use crate::clients::openai::StreamingCompletionResponse;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `StreamingCompletionResponse` in `clients::openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items instead
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::azure::StreamingCompletionResponse;
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::deepseek::streaming::StreamingCompletionResponse;
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
11  - pub use crate::clients::openai::StreamingCompletionResponse;
11  + pub use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |

error[E0432]: unresolved imports `crate::clients::openai::CompletionResponse`, `crate::clients::openai::StreamingChoice`, `crate::clients::openai::StreamingMessage`
   --> packages/provider/src/clients/groq/streaming.rs:13:23
    |
13  |     clients::openai::{CompletionResponse, StreamingChoice, StreamingMessage},
    |                       ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `StreamingMessage` in `clients::openai`
    |                       |                   |
    |                       |                   no `StreamingChoice` in `clients::openai`
    |                       no `CompletionResponse` in `clients::openai`
    |
    = help: consider importing one of these items instead:
            crate::clients::groq::completion::CompletionResponse
            crate::clients::mistral::completion::CompletionResponse
            crate::clients::openrouter::completion::CompletionResponse
            crate::clients::perplexity::completion::CompletionResponse
            crate::clients::xai::completion::xai_api_types::CompletionResponse
            crate::domain::CompletionResponse
            fluent_ai_domain::CompletionResponse
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
note: these items exist but are inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:41:1
    |
41  | struct StreamingChoice {
    | ^^^^^^^^^^^^^^^^^^^^^^ `crate::clients::huggingface::streaming::StreamingChoice`: not accessible
    |
   ::: packages/provider/src/clients/openai/streaming.rs:785:1
    |
785 | pub type StreamingChoice = StreamChoice;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `crate::clients::openai::streaming::StreamingChoice`: not accessible
    = help: consider importing one of these items instead:
            crate::clients::anthropic::StreamingMessage
            crate::domain::chat::commands::response::StreamingMessage
            fluent_ai_domain::chat::commands::response::StreamingMessage
note: type alias `crate::clients::openai::streaming::StreamingMessage` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:786:1
    |
786 | pub type StreamingMessage = Delta;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved imports `crate::clients::openai::StreamingCompletionResponse`, `crate::clients::openai::send_compatible_streaming_request`
   --> packages/provider/src/clients/huggingface/streaming.rs:9:30
    |
9   | use crate::clients::openai::{StreamingCompletionResponse, send_compatible_streaming_request};
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `send_compatible_streaming_request` in `clients::openai`
    |                              |
    |                              no `StreamingCompletionResponse` in `clients::openai`
    |
    = help: consider importing one of these items instead:
            crate::clients::azure::StreamingCompletionResponse
            crate::clients::deepseek::streaming::StreamingCompletionResponse
            crate::clients::gemini::streaming::StreamingCompletionResponse
            crate::clients::openrouter::streaming::StreamingCompletionResponse
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `fluent_ai_domain::model::TranscriptionModel`
 --> packages/provider/src/clients/huggingface/transcription.rs:3:5
  |
3 | use fluent_ai_domain::model::TranscriptionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `TranscriptionModel` in `model`

error[E0432]: unresolved import `super::Client`
 --> packages/provider/src/clients/huggingface/transcription.rs:7:5
  |
7 | use super::Client;
  |     ^^^^^^^^^^^^^ no `Client` in `clients::huggingface`
  |
help: a similar name exists in the module (notice the capitalization difference)
  |
7 - use super::Client;
7 + use super::client;
  |
help: consider importing one of these structs instead
  |
7 - use super::Client;
7 + use crate::clients::azure::Client;
  |
7 - use super::Client;
7 + use crate::clients::gemini::Client;
  |
7 - use super::Client;
7 + use crate::clients::groq::Client;
  |
7 - use super::Client;
7 + use crate::clients::ollama::Client;
  |
    and 6 other candidates

error[E0432]: unresolved import `fluent_ai_domain::model::EmbeddingModel`
 --> packages/provider/src/clients/mistral/embedding.rs:1:5
  |
1 | use fluent_ai_domain::model::EmbeddingModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `EmbeddingModel` in `model`
  |
help: consider importing one of these traits instead
  |
1 - use fluent_ai_domain::model::EmbeddingModel;
1 + use crate::EmbeddingModel;
  |
1 - use fluent_ai_domain::model::EmbeddingModel;
1 + use crate::domain::EmbeddingModel;
  |
1 - use fluent_ai_domain::model::EmbeddingModel;
1 + use fluent_ai_domain::EmbeddingModel;
  |

error[E0432]: unresolved import `super::OpenAIResult`
  --> packages/provider/src/clients/openai/audio.rs:10:26
   |
10 | use super::{OpenAIError, OpenAIResult};
   |                          ^^^^^^^^^^^^ no `OpenAIResult` in `clients::openai`

error[E0432]: unresolved import `crate::clients::openai::model_info`
  --> packages/provider/src/clients/openai/completion.rs:25:29
   |
25 | use crate::clients::openai::model_info::get_model_config;
   |                             ^^^^^^^^^^ could not find `model_info` in `openai`

error[E0432]: unresolved import `super::super::discovery`
  --> packages/provider/src/clients/openai/discovery.rs:12:19
   |
12 | use super::super::discovery::{DiscoveryError, DiscoveryResult, ProviderModelDiscovery};
   |                   ^^^^^^^^^ could not find `discovery` in `super`

error[E0432]: unresolved import `super::model_info`
  --> packages/provider/src/clients/openai/discovery.rs:16:5
   |
16 |     model_info::{
   |     ^^^^^^^^^^ could not find `model_info` in `super`

error[E0432]: unresolved import `super::OpenAIResult`
 --> packages/provider/src/clients/openai/embeddings.rs:8:26
  |
8 | use super::{OpenAIError, OpenAIResult};
  |                          ^^^^^^^^^^^^ no `OpenAIResult` in `clients::openai`

error[E0432]: unresolved import `super::tools`
  --> packages/provider/src/clients/openai/streaming.rs:11:12
   |
11 | use super::tools::{
   |            ^^^^^ could not find `tools` in `super`

error[E0432]: unresolved imports `super::OpenAIMessage`, `super::OpenAIResult`
  --> packages/provider/src/clients/openai/streaming.rs:14:26
   |
14 | use super::{OpenAIError, OpenAIMessage, OpenAIResult};
   |                          ^^^^^^^^^^^^^  ^^^^^^^^^^^^ no `OpenAIResult` in `clients::openai`
   |                          |
   |                          no `OpenAIMessage` in `clients::openai`
   |
   = help: consider importing this struct instead:
           crate::clients::openai::completion::OpenAIMessage

error[E0432]: unresolved import `super::OpenAIResult`
  --> packages/provider/src/clients/openai/vision.rs:12:26
   |
12 | use super::{OpenAIError, OpenAIResult};
   |                          ^^^^^^^^^^^^ no `OpenAIResult` in `clients::openai`

error[E0432]: unresolved import `crate::clients::openai::AssistantContent`
  --> packages/provider/src/clients/openrouter/completion.rs:6:5
   |
6  | use crate::clients::openai::AssistantContent;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `AssistantContent` in `clients::openai`
   |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
  --> packages/provider/src/clients/huggingface/streaming.rs:16:1
   |
16 | enum AssistantContent {
   | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items instead
   |
6  - use crate::clients::openai::AssistantContent;
6  + use crate::clients::mistral::completion::AssistantContent;
   |
6  - use crate::clients::openai::AssistantContent;
6  + use crate::domain::AssistantContent;
   |
6  - use crate::clients::openai::AssistantContent;
6  + use fluent_ai_domain::AssistantContent;
   |

error[E0432]: unresolved import `crate::clients::openai::Message`
 --> packages/provider/src/clients/openrouter/completion.rs:9:5
  |
9 |     clients::openai::Message,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `clients::openai`
  |
  = help: consider importing one of these items instead:
          crate::clients::anthropic::Message
          crate::clients::mistral::completion::Message
          crate::clients::perplexity::completion::Message
          crate::domain::ChatError::Message
          crate::domain::Message
          candle_core::MetalError::Message
          fluent_ai_domain::ChatError::Message
          fluent_ai_domain::Message

error[E0432]: unresolved imports `fluent_ai_domain::chunk::ToolCall`, `fluent_ai_domain::chunk::ToolCallDelta`, `fluent_ai_domain::chunk::ToolCallStatus`
   --> packages/provider/src/clients/openrouter/streaming.rs:27:48
    |
27  | use fluent_ai_domain::chunk::{CompletionChunk, ToolCall, ToolCallDelta, ToolCallStatus};
    |                                                ^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `ToolCallStatus` in `context::chunk`
    |                                                |         |
    |                                                |         no `ToolCallDelta` in `context::chunk`
    |                                                no `ToolCall` in `context::chunk`
    |
    = help: consider importing one of these items instead:
            crate::clients::anthropic::ToolCall
            crate::clients::mistral::completion::ToolCall
            crate::clients::openrouter::streaming::CompletionChunk::ToolCall
            crate::domain::AssistantContent::ToolCall
            crate::domain::ToolCall
            fluent_ai_domain::AssistantContent::ToolCall
            fluent_ai_domain::CompletionChunk::ToolCall
            fluent_ai_domain::ToolCall
note: struct `crate::clients::ollama::completion::ToolCall` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:424:1
    |
424 | pub struct ToolCall {
    | ^^^^^^^^^^^^^^^^^^^ not accessible
note: struct `crate::clients::openai::streaming::ToolCallDelta` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:59:1
    |
59  | pub struct ToolCallDelta {
    | ^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `fluent_ai_domain::types`
  --> packages/provider/src/clients/openrouter/streaming.rs:29:23
   |
29 | use fluent_ai_domain::types::{CompletionUsage, ContentType, FinishReason};
   |                       ^^^^^ could not find `types` in `fluent_ai_domain`

error[E0432]: unresolved import `fluent_ai_http3::SseEvent`
  --> packages/provider/src/clients/openrouter/streaming.rs:30:46
   |
30 | use fluent_ai_http3::{HttpClient, HttpError, SseEvent};
   |                                              ^^^^^^^^ no `SseEvent` in the root
   |
   = help: consider importing this struct instead:
           fluent_ai_http3::stream::SseEvent

error[E0432]: unresolved import `crate::clients::openai::StreamingCompletionResponse`
   --> packages/provider/src/clients/perplexity/streaming.rs:8:9
    |
8   | pub use crate::clients::openai::StreamingCompletionResponse;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `StreamingCompletionResponse` in `clients::openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items instead
    |
8   - pub use crate::clients::openai::StreamingCompletionResponse;
8   + pub use crate::clients::azure::StreamingCompletionResponse;
    |
8   - pub use crate::clients::openai::StreamingCompletionResponse;
8   + pub use crate::clients::deepseek::streaming::StreamingCompletionResponse;
    |
8   - pub use crate::clients::openai::StreamingCompletionResponse;
8   + pub use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
8   - pub use crate::clients::openai::StreamingCompletionResponse;
8   + pub use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/together/client.rs:18:18
   |
18 |     completion::{CompletionModel, LLAMA_3_2_11B_VISION_INSTRUCT_TURBO},
   |                  ^^^^^^^^^^^^^^^
   |                  |
   |                  no `CompletionModel` in `clients::together::completion`
   |                  help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these traits instead:
           crate::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/together/streaming.rs:3:5
  |
3 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::together::completion`
  |
help: a similar name exists in the module
  |
3 - use super::completion::CompletionModel;
3 + use super::completion::CompletionError;
  |
help: consider importing one of these traits instead
  |
3 - use super::completion::CompletionModel;
3 + use crate::CompletionModel;
  |
3 - use super::completion::CompletionModel;
3 + use crate::domain::CompletionModel;
  |
3 - use super::completion::CompletionModel;
3 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `crate::clients::openai::send_compatible_streaming_request`
 --> packages/provider/src/clients/together/streaming.rs:5:5
  |
5 | use crate::clients::openai::send_compatible_streaming_request;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `send_compatible_streaming_request` in `clients::openai`

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/together/mod.rs:21:30
   |
21 |     CODE_LLAMA_70B_INSTRUCT, CompletionModel, DBRX_INSTRUCT, DEEPSEEK_CODER_33B_INSTRUCT,
   |                              ^^^^^^^^^^^^^^^
   |                              |
   |                              no `CompletionModel` in `clients::together::completion`
   |                              help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these traits instead:
           crate::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0433]: failed to resolve: could not find `fluent_ai_domain` in `fluent_ai_domain`
 --> packages/provider/src/clients/xai/completion.rs:6:23
  |
6 | use fluent_ai_domain::fluent_ai_domain::completion::CompletionRequest;
  |                       ^^^^^^^^^^^^^^^^ could not find `fluent_ai_domain` in `fluent_ai_domain`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/xai/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, GROK_3};
   |                         ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::together::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `crate::clients::openai::Message`
  --> packages/provider/src/clients/xai/completion.rs:14:13
   |
14 | use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `clients::openai`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Message
           crate::clients::mistral::completion::Message
           crate::clients::perplexity::completion::Message
           crate::domain::ChatError::Message
           crate::domain::Message
           candle_core::MetalError::Message
           fluent_ai_domain::ChatError::Message
           fluent_ai_domain::Message

error[E0432]: unresolved imports `crate::clients::openai::AssistantContent`, `crate::clients::openai::Message`
   --> packages/provider/src/clients/xai/completion.rs:140:34
    |
140 |     use crate::clients::openai::{AssistantContent, Message};
    |                                  ^^^^^^^^^^^^^^^^  ^^^^^^^ no `Message` in `clients::openai`
    |                                  |
    |                                  no `AssistantContent` in `clients::openai`
    |
    = help: consider importing one of these items instead:
            crate::clients::mistral::completion::AssistantContent
            crate::domain::AssistantContent
            fluent_ai_domain::AssistantContent
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
    = help: consider importing one of these items instead:
            crate::clients::anthropic::Message
            crate::clients::mistral::completion::Message
            crate::clients::perplexity::completion::Message
            crate::clients::xai::completion::Message
            crate::domain::ChatError::Message
            crate::domain::Message
            candle_core::MetalError::Message
            fluent_ai_domain::ChatError::Message
            fluent_ai_domain::Message

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/xai/streaming.rs:4:5
  |
4 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
  |
help: consider importing one of these items instead
  |
4 - use super::completion::CompletionModel;
4 + use crate::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use crate::clients::together::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use crate::domain::CompletionModel;
  |
4 - use super::completion::CompletionModel;
4 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `crate::clients::openai::send_compatible_streaming_request`
 --> packages/provider/src/clients/xai/streaming.rs:6:5
  |
6 | use crate::clients::openai::send_compatible_streaming_request;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `send_compatible_streaming_request` in `clients::openai`

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/xai/mod.rs:17:22
   |
17 | pub use completion::{CompletionModel, GROK_3, GROK_3_MINI};
   |                      ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::xai::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::together::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `deepseek::Client`, `deepseek::DEEPSEEK_CHAT`, `deepseek::DEEPSEEK_REASONER`
  --> packages/provider/src/clients/mod.rs:32:5
   |
32 |     Client as DeepseekClient, DEEPSEEK_CHAT, DEEPSEEK_REASONER, DeepSeekCompletionBuilder,
   |     ------^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `DEEPSEEK_REASONER` in `clients::deepseek`
   |     |                         |
   |     |                         no `DEEPSEEK_CHAT` in `clients::deepseek`
   |     no `Client` in `clients::deepseek`
   |     help: a similar name exists in the module (notice the capitalization): `client`
   |
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client

error[E0432]: unresolved imports `huggingface::Client`, `huggingface::GEMMA_2`, `huggingface::HuggingfaceCompletionBuilder`, `huggingface::META_LLAMA_3_1`, `huggingface::PHI_4`, `huggingface::QWEN_QVQ_PREVIEW`, `huggingface::QWEN2_5`, `huggingface::QWEN2_5_CODER`, `huggingface::QWEN2_VL`, `huggingface::SMALLTHINKER_PREVIEW`, `huggingface::SubProvider`
  --> packages/provider/src/clients/mod.rs:46:5
   |
46 |     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^ no `PHI_4` in `clients::huggingface`
   |     |                            |        |                             |
   |     |                            |        |                             no `META_LLAMA_3_1` in `clients::huggingface`
   |     |                            |        no `HuggingfaceCompletionBuilder` in `clients::huggingface`
   |     |                            no `GEMMA_2` in `clients::huggingface`
   |     no `Client` in `clients::huggingface`
47 |     QWEN_QVQ_PREVIEW, QWEN2_5, QWEN2_5_CODER, QWEN2_VL, SMALLTHINKER_PREVIEW, SubProvider,
   |     ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^
   |     |                 |        |              |         |
   |     |                 |        |              |         no `SMALLTHINKER_PREVIEW` in `clients::huggingface`
   |     |                 |        |              no `QWEN2_VL` in `clients::huggingface`
   |     |                 |        no `QWEN2_5_CODER` in `clients::huggingface`
   |     |                 no `QWEN2_5` in `clients::huggingface`
   |     no `QWEN_QVQ_PREVIEW` in `clients::huggingface`
   |
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client
help: a similar name exists in the module (notice the capitalization difference)
   |
46 -     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
46 +     client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |
help: a similar name exists in the module (notice the capitalization difference)
   |
46 -     Client as HuggingfaceClient, GEMMA_2, HuggingfaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
46 +     Client as HuggingfaceClient, GEMMA_2, HuggingFaceCompletionBuilder, META_LLAMA_3_1, PHI_4,
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/anthropic/discovery.rs:10:12
   |
10 | use crate::model::{
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `fluent_ai_domain::model`

error[E0432]: unresolved imports `openai::OpenAICompletionRequest`, `openai::OpenAICompletionResponse`, `openai::OpenAIProvider`, `openai::OpenAIResult`
  --> packages/provider/src/clients/mod.rs:62:19
   |
62 |     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
   |                   ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^               ^^^^^^^^^^^^^^ no `OpenAIProvider` in `clients::openai`
   |                   |                        |
   |                   |                        no `OpenAICompletionResponse` in `clients::openai`
   |                   no `OpenAICompletionRequest` in `clients::openai`
63 |     OpenAIResult,
   |     ^^^^^^^^^^^^ no `OpenAIResult` in `clients::openai`
   |
note: struct `crate::clients::openai::completion::OpenAICompletionRequest` exists but is inaccessible
  --> packages/provider/src/clients/openai/completion.rs:89:1
   |
89 | pub struct OpenAICompletionRequest<'a> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a similar name exists in the module
   |
62 -     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
62 +     OpenAIClient, OpenAICompletionBuilder, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
   |
help: a similar name exists in the module
   |
62 -     OpenAIClient, OpenAICompletionRequest, OpenAICompletionResponse, OpenAIError, OpenAIProvider,
62 +     OpenAIClient, OpenAICompletionRequest, OpenAICompletionBuilder, OpenAIError, OpenAIProvider,
   |

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/clients/anthropic/requests.rs:13:12
   |
13 | use crate::http::{HttpClient, HttpError, HttpRequest, HttpResponse};
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `super::completion::AnthropicCompletionResponse`
 --> packages/provider/src/clients/anthropic/responses.rs:9:5
  |
9 | use super::completion::AnthropicCompletionResponse;
  |     ^^^^^^^^^^^^^^^^^^^---------------------------
  |     |                  |
  |     |                  help: a similar name exists in the module: `AnthropicCompletionRequest`
  |     no `AnthropicCompletionResponse` in `clients::anthropic::completion`

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/clients/anthropic/responses.rs:12:12
   |
12 | use crate::http::HttpResponse;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::runtime`
  --> packages/provider/src/clients/anthropic/streaming.rs:18:12
   |
18 | use crate::runtime::AsyncStream;
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0432]: unresolved import `super::core::Tool`
  --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:45
   |
16 |     core::{AnthropicError, AnthropicResult, Tool},
   |                                             ^^^^ no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved import `crossbeam_channel`
  --> packages/provider/src/clients/anthropic/tools/core.rs:14:5
   |
14 | use crossbeam_channel as channel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no external crate `crossbeam_channel`

error[E0432]: unresolved import `super::core::Tool`
  --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:45
   |
15 |     core::{AnthropicError, AnthropicResult, Tool},
   |                                             ^^^^ no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved imports `super::core::Tool`, `super::core::ToolError`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:14:41
   |
14 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |                                         ^^^^  ^^^^^^^^^ no `ToolError` in `clients::anthropic::tools::core`
   |                                         |
   |                                         no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved imports `core::Tool`, `core::ToolError`
  --> packages/provider/src/clients/anthropic/tools/mod.rs:18:41
   |
18 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |                                         ^^^^  ^^^^^^^^^ no `ToolError` in `clients::anthropic::tools::core`
   |                                         |
   |                                         no `Tool` in `clients::anthropic::tools::core`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::Tool
           crate::clients::gemini::completion_old::gemini_api_types::Tool
           crate::clients::gemini::gemini_types::Tool
           crate::domain::MessageRole::Tool
           crate::domain::Tool
           crate::domain::chat::ChatCommand::Tool
           crate::domain::tool::traits::Tool
           crate::domain::tool::types::Tool
           fluent_ai_domain::MessageRole::Tool
           fluent_ai_domain::Tool
           fluent_ai_domain::chat::ChatCommand::Tool
           fluent_ai_domain::tool::traits::Tool
           fluent_ai_domain::tool::types::Tool

error[E0432]: unresolved import `function_calling::tool_builder`
  --> packages/provider/src/clients/anthropic/tools/mod.rs:25:9
   |
25 | pub use function_calling::tool_builder;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `tool_builder` in `clients::anthropic::tools::function_calling`
   |
   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined
help: a macro with this name exists at the root of the crate
   |
25 - pub use function_calling::tool_builder;
25 + pub use crate::tool_builder;
   |

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/azure/client.rs:23:5
   |
23 |     completion::{
   |     ^^^^^^^^^^ unresolved import
24 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
25 |     },
26 |     message::Message,
   |     ^^^^^^^ unresolved import
27 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
23 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++

Some errors have detailed explanations: E0026, E0027, E0061, E0063, E0271, E0277, E0282, E0308, E0368...
For more information about an error, try `rustc --explain E0026`.
error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::completion`, `crate::json_util`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/azure/completion.rs:18:5
   |
18 |     completion::CompletionRequest,
   |     ^^^^^^^^^^ unresolved import
19 |     completion::{self, CompletionError, StreamingCompletionResponse as RigStreaming},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
20 |     json_util::{self, merge},
   |     ^^^^^^^^^   ^^^^ no `json_util` in the root
   |     |
   |     could not find `json_util` in the crate root
21 |     message::{self, MessageError},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
22 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
23 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
18 |     fluent_ai_domain::completion::CompletionRequest,
   |     ++++++++++++++++++
help: a similar path exists
   |
19 |     fluent_ai_domain::completion::{self, CompletionError, StreamingCompletionResponse as RigStreaming},
   |     ++++++++++++++++++
help: a similar path exists
   |
21 |     fluent_ai_domain::message::{self, MessageError},
   |     ++++++++++++++++++
help: a similar path exists
   |
22 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
23 |     candle_core::streaming::StreamingCompletionResponse,
   |     +++++++++++++

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/azure/embedding.rs:15:5
   |
15 |     embeddings::{self, EmbeddingError},
   |     ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |     |
   |     unresolved import
16 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:49:1
   |
49 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
15 |     clients::openai::embeddings::{self, EmbeddingError},
   |     +++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::embeddings`
   --> packages/provider/src/clients/azure/embedding.rs:183:20
    |
183 |         use crate::embeddings::EmbeddingError;
    |                    ^^^^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `clients::openai::embeddings`

error[E0432]: unresolved import `crate::http`
   --> packages/provider/src/clients/azure/embedding.rs:184:20
    |
184 |         use crate::http::{HttpClient, HttpRequest};
    |                    ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::embeddings`
   --> packages/provider/src/clients/azure/embedding.rs:245:20
    |
245 |         use crate::embeddings::EmbeddingError;
    |                    ^^^^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `clients::openai::embeddings`

error[E0432]: unresolved import `crate::http`
   --> packages/provider/src/clients/azure/embedding.rs:246:20
    |
246 |         use crate::http::{HttpClient, HttpRequest};
    |                    ^^^^ could not find `http` in the crate root

error: could not compile `sweetmcp_memory` (lib) due to 98 previous errors
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/clients/azure/transcription.rs:10:5
   |
10 | use reqwest::multipart::Part;
   |     ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::json_util`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/azure/streaming.rs:14:5
   |
14 |     completion::{CompletionError, CompletionRequest},
   |     ^^^^^^^^^^ unresolved import
15 |     json_util::merge,
   |     ^^^^^^^^^ could not find `json_util` in the crate root
16 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
17 |     streaming::StreamingCompletionResponse as RigStreaming,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::{CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
17 |     candle_core::streaming::StreamingCompletionResponse as RigStreaming,
   |     +++++++++++++

error[E0432]: unresolved imports `crate::runtime`, `crate::runtime`, `crate::transcription`, `crate::transcription`
  --> packages/provider/src/clients/azure/transcription.rs:15:5
   |
15 |     runtime::{self as rt, AsyncTask},
   |     ^^^^^^^   ^^^^^^^^^^ no `runtime` in the root
   |     |
   |     unresolved import
16 |     transcription::{self, TranscriptionError},
   |     ^^^^^^^^^^^^^   ^^^^ no `transcription` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
   = help: consider importing one of these modules instead:
           crate::clients::azure::transcription
           crate::clients::gemini::transcription
           crate::clients::huggingface::transcription
help: a similar path exists
   |
15 |     tokio::runtime::{self as rt, AsyncTask},
   |     +++++++
help: a similar path exists
   |
16 |     clients::azure::transcription::{self, TranscriptionError},
   |     ++++++++++++++++

error[E0432]: unresolved imports `crate::completion_provider::CompletionResponse`, `crate::completion_provider::StreamingResponse`
  --> packages/provider/src/clients/bedrock/completion.rs:26:42
   |
26 |     CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |                                          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `StreamingResponse` in `completion_provider`
   |                                          |
   |                                          no `CompletionResponse` in `completion_provider`
   |
   = help: consider importing one of these structs instead:
           crate::clients::mistral::completion::CompletionResponse
           crate::clients::openrouter::completion::CompletionResponse
           crate::clients::perplexity::completion::CompletionResponse
           crate::clients::xai::completion::xai_api_types::CompletionResponse
           crate::domain::CompletionResponse
           fluent_ai_domain::CompletionResponse
note: these items exist but are inaccessible:
      crate::clients::groq::completion::CompletionResponse
  --> packages/provider/src/clients/ollama/completion.rs:55:1
   |
55 | pub struct CompletionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::CompletionResponse`: not accessible
   = help: consider importing this struct through its public re-export instead:
           crate::clients::gemini::StreamingResponse

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/config.rs:11:5
   |
11 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
 --> packages/provider/src/clients/candle/generation.rs:9:5
  |
9 | use crossbeam_utils::atomic::AtomicCell;
  |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
  |
  = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `super::error::InferenceErrorCode`, `super::error::InferenceStage`
   --> packages/provider/src/clients/candle/client.rs:388:28
    |
388 |         use super::error::{InferenceErrorCode, InferenceStage};
    |                            ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `InferenceStage` in `clients::candle::error`
    |                            |
    |                            no `InferenceErrorCode` in `clients::candle::error`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/kv_cache.rs:11:5
   |
11 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0432]: unresolved import `rand_pcg`
  --> packages/provider/src/clients/candle/generation.rs:11:5
   |
11 | use rand_pcg::Pcg64Mcg;
   |     ^^^^^^^^ use of unresolved module or unlinked crate `rand_pcg`
   |
   = help: if you wanted to use a crate named `rand_pcg`, use `cargo add rand_pcg` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/memory_pool.rs:12:5
   |
12 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/performance.rs:12:5
   |
12 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crossbeam_channel`
  --> packages/provider/src/clients/candle/memory_pool.rs:11:5
   |
11 | use crossbeam_channel::{Receiver, Sender, TryRecvError, TrySendError, bounded};
   |     ^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_channel`
   |
   = help: if you wanted to use a crate named `crossbeam_channel`, use `cargo add crossbeam_channel` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/streaming.rs:12:5
   |
12 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `crossbeam_utils`
  --> packages/provider/src/clients/candle/tokenizer.rs:12:5
   |
12 | use crossbeam_utils::atomic::AtomicCell;
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_utils`
   |
   = help: if you wanted to use a crate named `crossbeam_utils`, use `cargo add crossbeam_utils` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crossbeam_channel`
  --> packages/provider/src/clients/candle/streaming.rs:11:5
   |
11 | use crossbeam_channel::{Receiver, Sender, TryRecvError, TrySendError, bounded, unbounded};
   |     ^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_channel`
   |
   = help: if you wanted to use a crate named `crossbeam_channel`, use `cargo add crossbeam_channel` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/deepseek/streaming.rs:13:5
   |
13 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
14 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
13 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
14 |     tokio::runtime::{self, AsyncStream},
   |     +++++++

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/gemini/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/gemini/client.rs:19:25
   |
19 | use super::completion::{CompletionModel, GEMINI_1_5_PRO};
   |                         ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::gemini::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/gemini/client.rs:24:5
   |
24 |     completion::{
   |     ^^^^^^^^^^ unresolved import
25 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
26 |     },
27 |     embeddings::{Embedding, EmbeddingBuilder},
   |     ^^^^^^^^^^ unresolved import
28 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
29 |     message::Message,
   |     ^^^^^^^ unresolved import
30 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
24 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     clients::openai::embeddings::{Embedding, EmbeddingBuilder},
   |     +++++++++++++++++
help: a similar path exists
   |
29 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
30 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0364]: `create_request_body` is only public within the crate, and cannot be re-exported outside
  --> packages/provider/src/clients/gemini/completion.rs:14:67
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |                                                                   ^^^^^^^^^^^^^^^^^^^
   |
note: consider marking `create_request_body` as `pub` in the imported module
  --> packages/provider/src/clients/gemini/completion.rs:14:67
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |                                                                   ^^^^^^^^^^^^^^^^^^^

error[E0432]: unresolved import `super::gemini_client::CompletionModel`
  --> packages/provider/src/clients/gemini/completion.rs:14:5
   |
14 |     CompletionModel, GeminiCompletionBuilder, completion_builder, create_request_body,
   |     ^^^^^^^^^^^^^^^
   |     |
   |     no `CompletionModel` in `clients::gemini::gemini_client`
   |     help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`
  --> packages/provider/src/clients/gemini/completion_old.rs:50:5
   |
50 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible

error[E0432]: unresolved imports `crate::completion`, `crate::message`, `crate::message`
   --> packages/provider/src/clients/gemini/completion_old.rs:857:9
    |
857 |         completion::CompletionError,
    |         ^^^^^^^^^^ unresolved import
858 |         message::{self, MimeType as _},
    |         ^^^^^^^   ^^^^ no `message` in the root
    |         |
    |         unresolved import
    |
    = help: consider importing one of these modules instead:
            crate::domain::message
            fluent_ai_domain::message
help: a similar path exists
    |
857 |         fluent_ai_domain::completion::CompletionError,
    |         ++++++++++++++++++
help: a similar path exists
    |
858 |         fluent_ai_domain::message::{self, MimeType as _},
    |         ++++++++++++++++++

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/gemini/embedding.rs:10:12
   |
10 | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:49:1
   |
49 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved imports `crate::completion`, `crate::streaming`
  --> packages/provider/src/clients/gemini/streaming.rs:7:5
   |
7  |     completion::{CompletionError, CompletionRequest},
   |     ^^^^^^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
8  |     streaming::{self},
   |                 ^^^^ no `streaming` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::streaming
           crate::clients::azure::streaming
           crate::clients::candle::streaming
           crate::clients::deepseek::streaming
           crate::clients::gemini::streaming
           crate::clients::huggingface::streaming
           crate::clients::openrouter::streaming
           crate::clients::perplexity::streaming
           crate::clients::together::streaming
           crate::clients::xai::streaming
           candle_core::streaming
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:49:1
   |
49 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::bedrock::streaming`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:51:1
   |
51 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible

error[E0432]: unresolved imports `crate::transcription`, `crate::transcription`
  --> packages/provider/src/clients/gemini/transcription.rs:12:12
   |
12 | use crate::transcription::{self, TranscriptionError};
   |            ^^^^^^^^^^^^^   ^^^^ no `transcription` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::azure::transcription`
   |
   = help: consider importing one of these modules instead:
           crate::clients::azure::transcription
           crate::clients::gemini::transcription
           crate::clients::huggingface::transcription

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::streaming`
  --> packages/provider/src/clients/gemini/gemini_client.rs:24:5
   |
24 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
25 |     completion_provider::{ChunkHandler, CompletionProvider, ModelConfig, ModelInfo},
26 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
   |
24 |     fluent_ai_domain::completion::{self, CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     candle_core::streaming::StreamingCompletionResponse,
   |     +++++++++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::message`
  --> packages/provider/src/clients/gemini/gemini_types.rs:15:5
   |
15 |     completion::{self, CompletionError},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
16 |     message,
   |     ^^^^^^^ no `message` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/groq/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/groq/client.rs:17:25
   |
17 | use super::completion::{CompletionModel, LLAMA_3_70B_8192};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::groq::completion`
   |                         help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`
  --> packages/provider/src/clients/groq/client.rs:20:5
   |
20 |     completion::{
   |     ^^^^^^^^^^ unresolved import
21 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
22 |     },
23 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
24 |     message::Message,
   |     ^^^^^^^ unresolved import
25 |     runtime::AsyncTask,
   |     ^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::groq::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
   |
20 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
24 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     tokio::runtime::AsyncTask,
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/groq/completion.rs:22:5
   |
22 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
...
26 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
27 |     message::{self, MessageError},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
28 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
29 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::groq::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
22 |     fluent_ai_domain::completion::{self, CompletionError, CompletionRequest},
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     fluent_ai_domain::message::{self, MessageError},
   |     ++++++++++++++++++
help: a similar path exists
   |
28 |     tokio::runtime::{self, AsyncTask},
   |     +++++++
help: a similar path exists
   |
29 |     candle_core::streaming::StreamingCompletionResponse,
   |     +++++++++++++

error[E0432]: unresolved imports `crate::completion`, `crate::http`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/groq/streaming.rs:14:5
   |
14 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
15 |     http::{HttpClient, HttpRequest},
   |     ^^^^ could not find `http` in the crate root
16 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
16 |     tokio::runtime::{self, AsyncStream},
   |     +++++++

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/groq/mod.rs:12:22
   |
12 | pub use completion::{CompletionModel, GroqCompletionBuilder as GroqProvider};
   |                      ^^^^^^^^^^^^^^^
   |                      |
   |                      no `CompletionModel` in `clients::groq::completion`
   |                      help: a similar name exists in the module: `CompletionChunk`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `super::completion::CompletionModel`
 --> packages/provider/src/clients/huggingface/streaming.rs:8:5
  |
8 | use super::completion::CompletionModel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::huggingface::completion`
  |
help: a similar name exists in the module
  |
8 - use super::completion::CompletionModel;
8 + use super::completion::CompletionChunk;
  |
help: consider importing one of these items instead
  |
8 - use super::completion::CompletionModel;
8 + use crate::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use crate::clients::xai::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use crate::domain::CompletionModel;
  |
8 - use super::completion::CompletionModel;
8 + use fluent_ai_domain::CompletionModel;
  |

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/huggingface/streaming.rs:10:12
   |
10 | use crate::json_util::merge_inplace;
   |            ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved imports `crate::json_util`, `crate::streaming`
  --> packages/provider/src/clients/huggingface/streaming.rs:11:13
   |
11 | use crate::{json_util, streaming};
   |             ^^^^^^^^^  ^^^^^^^^^ no `streaming` in the root
   |             |
   |             no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::streaming
           crate::clients::azure::streaming
           crate::clients::candle::streaming
           crate::clients::deepseek::streaming
           crate::clients::gemini::streaming
           crate::clients::huggingface::streaming
           crate::clients::openrouter::streaming
           crate::clients::perplexity::streaming
           crate::clients::together::streaming
           crate::clients::xai::streaming
           candle_core::streaming
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:49:1
   |
49 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::bedrock::streaming`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:51:1
   |
51 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible

error[E0432]: unresolved import `super::completion::ApiResponse`
  --> packages/provider/src/clients/huggingface/transcription.rs:8:5
   |
8  | use super::completion::ApiResponse;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ApiResponse` in `clients::huggingface::completion`
   |
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
help: consider importing one of these items instead
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::anthropic::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::gemini::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::openrouter::client::ApiResponse;
   |
8  - use super::completion::ApiResponse;
8  + use crate::clients::perplexity::client::ApiResponse;
   |
     and 1 other candidate

error[E0432]: unresolved import `crate::transcription`
 --> packages/provider/src/clients/huggingface/transcription.rs:9:5
  |
9 | use crate::transcription;
  |     ^^^^^^^^^^^^^^^^^^^^ no `transcription` in the root
  |
help: consider importing one of these modules instead
  |
9 | use crate::clients::azure::transcription;
  |            ++++++++++++++++
9 | use crate::clients::gemini::transcription;
  |            +++++++++++++++++
9 | use crate::clients::huggingface::transcription;
  |            ++++++++++++++++++++++

error[E0432]: unresolved import `crate::transcription`
  --> packages/provider/src/clients/huggingface/transcription.rs:10:12
   |
10 | use crate::transcription::TranscriptionError;
   |            ^^^^^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::azure::transcription`

error[E0432]: unresolved imports `super::client::Client`, `super::client::Usage`
 --> packages/provider/src/clients/mistral/completion.rs:7:21
  |
7 | use super::client::{Client, Usage};
  |                     ^^^^^^  ^^^^^ no `Usage` in `clients::mistral::client`
  |                     |
  |                     no `Client` in `clients::mistral::client`
  |
  = help: consider importing one of these structs instead:
          crate::clients::azure::Client
          crate::clients::gemini::Client
          crate::clients::groq::Client
          crate::clients::ollama::Client
          crate::clients::openrouter::Client
          crate::clients::perplexity::Client
          crate::clients::together::Client
          crate::clients::xai::Client
          crate::domain::tool::mcp::Client
          fluent_ai_domain::tool::mcp::Client
  = help: consider importing one of these items instead:
          crate::clients::azure::Usage
          crate::clients::openrouter::client::Usage
          crate::clients::perplexity::completion::Usage
          crate::clients::together::embedding::Usage
          crate::clients::xai::completion::xai_api_types::Usage
          crate::domain::chat::commands::StatsType::Usage
          crate::domain::usage::Usage
          fluent_ai_domain::chat::commands::StatsType::Usage
          fluent_ai_domain::usage::Usage

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/mistral/completion.rs:8:12
  |
8 | use crate::streaming::{RawStreamingChoice, StreamingCompletionResponse};
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `candle_core::streaming`

error[E0432]: unresolved imports `crate::clients::mistral::client::ApiResponse`, `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`
  --> packages/provider/src/clients/mistral/completion.rs:11:5
   |
11 |     clients::mistral::client::ApiResponse,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ApiResponse` in `clients::mistral::client`
12 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
13 |     json_util, message,
   |     ^^^^^^^^^  ^^^^^^^ no `message` in the root
   |     |
   |     no `json_util` in the root
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::ApiResponse
           crate::clients::gemini::ApiResponse
           crate::clients::openrouter::client::ApiResponse
           crate::clients::perplexity::client::ApiResponse
           crate::clients::together::client::together_ai_api_types::ApiResponse
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved imports `super::client::ApiResponse`, `super::client::Client`, `super::client::Usage`
  --> packages/provider/src/clients/mistral/embedding.rs:5:21
   |
5  | use super::client::{ApiResponse, Client, Usage};
   |                     ^^^^^^^^^^^  ^^^^^^  ^^^^^ no `Usage` in `clients::mistral::client`
   |                     |            |
   |                     |            no `Client` in `clients::mistral::client`
   |                     no `ApiResponse` in `clients::mistral::client`
   |
   = help: consider importing one of these items instead:
           crate::clients::anthropic::ApiResponse
           crate::clients::gemini::ApiResponse
           crate::clients::openrouter::client::ApiResponse
           crate::clients::perplexity::client::ApiResponse
           crate::clients::together::client::together_ai_api_types::ApiResponse
note: these enums exist but are inaccessible
  --> packages/provider/src/clients/azure/completion.rs:64:1
   |
64 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/embedding.rs:70:1
   |
70 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::embedding::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/azure/transcription.rs:28:1
   |
28 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::azure::transcription::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/groq/completion.rs:72:1
   |
72 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::groq::completion::ApiResponse`: not accessible
   |
  ::: packages/provider/src/clients/ollama/completion.rs:46:1
   |
46 | enum ApiResponse<T> {
   | ^^^^^^^^^^^^^^^^^^^ `crate::clients::ollama::completion::ApiResponse`: not accessible
   = help: consider importing one of these structs instead:
           crate::clients::azure::Client
           crate::clients::gemini::Client
           crate::clients::groq::Client
           crate::clients::ollama::Client
           crate::clients::openrouter::Client
           crate::clients::perplexity::Client
           crate::clients::together::Client
           crate::clients::xai::Client
           crate::domain::tool::mcp::Client
           fluent_ai_domain::tool::mcp::Client
   = help: consider importing one of these items instead:
           crate::clients::azure::Usage
           crate::clients::openrouter::client::Usage
           crate::clients::perplexity::completion::Usage
           crate::clients::together::embedding::Usage
           crate::clients::xai::completion::xai_api_types::Usage
           crate::domain::chat::commands::StatsType::Usage
           crate::domain::usage::Usage
           fluent_ai_domain::chat::commands::StatsType::Usage
           fluent_ai_domain::usage::Usage

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/mistral/embedding.rs:6:12
   |
6  | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:49:1
   |
49 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `client::Client`
 --> packages/provider/src/clients/mistral/mod.rs:6:18
  |
6 | pub use client::{Client, MistralCompletionBuilder};
  |                  ^^^^^^ no `Client` in `clients::mistral::client`
  |
  = help: consider importing one of these structs instead:
          crate::clients::azure::Client
          crate::clients::gemini::Client
          crate::clients::groq::Client
          crate::clients::ollama::Client
          crate::clients::openrouter::Client
          crate::clients::perplexity::Client
          crate::clients::together::Client
          crate::clients::xai::Client
          crate::domain::tool::mcp::Client
          fluent_ai_domain::tool::mcp::Client

error[E0432]: unresolved import `completion::CompletionModel`
 --> packages/provider/src/clients/mistral/mod.rs:8:33
  |
8 |     CODESTRAL, CODESTRAL_MAMBA, CompletionModel, MINISTRAL_3B, MINISTRAL_8B, MISTRAL_LARGE,
  |                                 ^^^^^^^^^^^^^^^
  |                                 |
  |                                 no `CompletionModel` in `clients::mistral::completion`
  |                                 help: a similar name exists in the module: `CompletionChunk`
  |
  = help: consider importing one of these items instead:
          crate::CompletionModel
          crate::clients::xai::CompletionModel
          crate::domain::CompletionModel
          fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/ollama/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `super::completion::CompletionModel`, `super::completion::EmbeddingModel`
  --> packages/provider/src/clients/ollama/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, EmbeddingModel, MISTRAL_MAGISTRAR_SMALL};
   |                         ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::ollama::completion`
   |                         |
   |                         no `CompletionModel` in `clients::ollama::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::mistral::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/ollama/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     embeddings::{Embed, Embedding, EmbeddingBuilder},
   |     ^^^^^^^^^^ unresolved import
25 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
26 |     message::Message,
   |     ^^^^^^^ unresolved import
27 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::ollama::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
24 |     clients::openai::embeddings::{Embed, Embedding, EmbeddingBuilder},
   |     +++++++++++++++++
help: a similar path exists
   |
26 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::embeddings`, `crate::embeddings`, `crate::json_util`, `crate::message`, `crate::message`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/ollama/completion.rs:14:5
   |
14 |     completion::{
   |     ^^^^^^^^^^ unresolved import
15 |         self, AssistantContent, CompletionError, CompletionRequest, Message as CompletionMessage,
   |         ^^^^ no `completion` in the root
16 |     },
17 |     embeddings::{self, Embedding, EmbeddingError, EmbeddingModel as EmbeddingModelTrait},
   |     ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |     |
   |     unresolved import
18 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
19 |     message::{self, Message, MessageError, Text, ToolResultContent, UserContent},
   |     ^^^^^^^   ^^^^ no `message` in the root
   |     |
   |     unresolved import
20 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
21 |     streaming::StreamingCompletionResponse,
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::ollama::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:49:1
   |
49 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
14 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
17 |     clients::openai::embeddings::{self, Embedding, EmbeddingError, EmbeddingModel as EmbeddingModelTrait},
   |     +++++++++++++++++
help: a similar path exists
   |
19 |     fluent_ai_domain::message::{self, Message, MessageError, Text, ToolResultContent, UserContent},
   |     ++++++++++++++++++
help: a similar path exists
   |
20 |     tokio::runtime::{self, AsyncTask},
   |     +++++++
help: a similar path exists
   |
21 |     candle_core::streaming::StreamingCompletionResponse,
   |     +++++++++++++

error[E0432]: unresolved imports `crate::completion`, `crate::runtime`, `crate::runtime`, `crate::streaming`
  --> packages/provider/src/clients/ollama/streaming.rs:13:5
   |
13 |     completion::CompletionError,
   |     ^^^^^^^^^^ unresolved import
14 |     runtime::{self, AsyncStream},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
15 |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
   |     ^^^^^^^^^ unresolved import
   |
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
13 |     fluent_ai_domain::completion::CompletionError,
   |     ++++++++++++++++++
help: a similar path exists
   |
14 |     tokio::runtime::{self, AsyncStream},
   |     +++++++
help: a similar path exists
   |
15 |     candle_core::streaming::{RawStreamingChoice, StreamingCompletionResponse},
   |     +++++++++++++

error[E0432]: unresolved imports `completion::CompletionModel`, `completion::EmbeddingModel`
  --> packages/provider/src/clients/ollama/mod.rs:14:22
   |
14 | pub use completion::{CompletionModel, EmbeddingModel};
   |                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::ollama::completion`
   |                      |
   |                      no `CompletionModel` in `clients::ollama::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::mistral::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved import `audio::OpenAIAudioClient`
  --> packages/provider/src/clients/openai/mod.rs:31:9
   |
31 | pub use audio::OpenAIAudioClient;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ no `OpenAIAudioClient` in `clients::openai::audio`

error[E0432]: unresolved import `embeddings::OpenAIEmbeddingClient`
  --> packages/provider/src/clients/openai/mod.rs:36:9
   |
36 | pub use embeddings::OpenAIEmbeddingClient;
   |         ^^^^^^^^^^^^---------------------
   |         |           |
   |         |           help: a similar name exists in the module: `OpenAIEmbeddingRequest`
   |         no `OpenAIEmbeddingClient` in `clients::openai::embeddings`

error[E0432]: unresolved import `streaming::OpenAIStream`
  --> packages/provider/src/clients/openai/mod.rs:38:9
   |
38 | pub use streaming::OpenAIStream;
   |         ^^^^^^^^^^^^^^^^^^^^^^^ no `OpenAIStream` in `clients::openai::streaming`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/openai/discovery.rs:21:12
   |
21 | use crate::model::{
   |            ^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `fluent_ai_domain::model`

error[E0432]: unresolved import `vision::OpenAIVisionClient`
  --> packages/provider/src/clients/openai/mod.rs:39:9
   |
39 | pub use vision::OpenAIVisionClient;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ no `OpenAIVisionClient` in `clients::openai::vision`

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/openrouter/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/openrouter/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, GPT_4_1};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::openrouter::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/openrouter/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`
  --> packages/provider/src/clients/openrouter/completion.rs:10:5
   |
10 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
11 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/openrouter/streaming.rs:25:5
   |
25 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crossbeam_skiplist`
  --> packages/provider/src/clients/openrouter/streaming.rs:26:5
   |
26 | use crossbeam_skiplist::SkipMap;
   |     ^^^^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `crossbeam_skiplist`
   |
   = help: if you wanted to use a crate named `crossbeam_skiplist`, use `cargo add crossbeam_skiplist` to add it to your `Cargo.toml`

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/openrouter/mod.rs:18:24
   |
18 |     CLAUDE_3_7_SONNET, CompletionModel, GEMINI_FLASH_2_0, GPT_4_1, PERPLEXITY_SONAR_PRO,
   |                        ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::openrouter::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/perplexity/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::completion::CompletionModel`
  --> packages/provider/src/clients/perplexity/client.rs:18:25
   |
18 | use super::completion::{CompletionModel, SONAR_PRO};
   |                         ^^^^^^^^^^^^^^^
   |                         |
   |                         no `CompletionModel` in `clients::perplexity::completion`
   |                         help: a similar name exists in the module: `CompletionError`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/perplexity/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`
  --> packages/provider/src/clients/perplexity/completion.rs:13:5
   |
13 |     completion::{self, CompletionError, CompletionRequest},
   |     ^^^^^^^^^^   ^^^^ no `completion` in the root
   |     |
   |     unresolved import
   |     help: a similar path exists: `fluent_ai_domain::completion`
14 |     json_util, message,
   |     ^^^^^^^^^  ^^^^^^^ no `message` in the root
   |     |
   |     no `json_util` in the root
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing one of these modules instead:
           crate::domain::message
           fluent_ai_domain::message

error[E0432]: unresolved import `completion::CompletionModel`
  --> packages/provider/src/clients/perplexity/mod.rs:17:22
   |
17 | pub use completion::{CompletionModel, SONAR, SONAR_PRO};
   |                      ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::perplexity::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/together/client.rs:11:5
   |
11 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved import `super::embedding::EmbeddingModel`
  --> packages/provider/src/clients/together/client.rs:19:17
   |
19 |     embedding::{EmbeddingModel, M2_BERT_80M_8K_RETRIEVAL},
   |                 ^^^^^^^^^^^^^^ no `EmbeddingModel` in `clients::together::embedding`
   |
   = help: consider importing one of these items instead:
           crate::EmbeddingModel
           crate::clients::ollama::EmbeddingModel
           crate::domain::EmbeddingModel
           fluent_ai_domain::EmbeddingModel

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/together/client.rs:23:5
   |
23 |     completion::{
   |     ^^^^^^^^^^ unresolved import
24 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
25 |     },
26 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
27 |     message::Message,
   |     ^^^^^^^ unresolved import
28 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
23 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
27 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
28 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::streaming`
  --> packages/provider/src/clients/together/completion.rs:10:12
   |
10 | use crate::streaming::StreamingCompletionResponse;
   |            ^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `candle_core::streaming`

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/together/completion.rs:11:30
   |
11 | use crate::{clients::openai, json_util};
   |                              ^^^^^^^^^ no `json_util` in the root

error[E0432]: unresolved imports `crate::embeddings`, `crate::embeddings`
  --> packages/provider/src/clients/together/embedding.rs:13:12
   |
13 | use crate::embeddings::{self, EmbeddingError};
   |            ^^^^^^^^^^   ^^^^ no `embeddings` in the root
   |            |
   |            unresolved import
   |            help: a similar path exists: `clients::openai::embeddings`
   |
note: module `crate::clients::openai::embeddings` exists but is inaccessible
  --> packages/provider/src/clients/openai/mod.rs:49:1
   |
49 | mod embeddings;
   | ^^^^^^^^^^^^^^^ not accessible

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/together/streaming.rs:6:12
  |
6 | use crate::streaming::StreamingCompletionResponse;
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `candle_core::streaming`

error[E0432]: unresolved imports `crate::completion`, `crate::json_util`
 --> packages/provider/src/clients/together/streaming.rs:8:5
  |
8 |     completion::{CompletionError, CompletionRequest},
  |     ^^^^^^^^^^
  |     |
  |     unresolved import
  |     help: a similar path exists: `fluent_ai_domain::completion`
9 |     json_util::merge,
  |     ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved import `atomic_counter`
  --> packages/provider/src/clients/xai/client.rs:12:5
   |
12 | use atomic_counter::RelaxedCounter;
   |     ^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `atomic_counter`
   |
   = help: if you wanted to use a crate named `atomic_counter`, use `cargo add atomic_counter` to add it to your `Cargo.toml`

error[E0432]: unresolved imports `crate::completion`, `crate::completion`, `crate::json_util`, `crate::message`, `crate::runtime`, `crate::runtime`
  --> packages/provider/src/clients/xai/client.rs:21:5
   |
21 |     completion::{
   |     ^^^^^^^^^^ unresolved import
22 |         self, CompletionError, CompletionRequest, CompletionRequestBuilder, Prompt, PromptError,
   |         ^^^^ no `completion` in the root
23 |     },
24 |     json_util,
   |     ^^^^^^^^^ no `json_util` in the root
25 |     message::Message,
   |     ^^^^^^^ unresolved import
26 |     runtime::{self, AsyncTask},
   |     ^^^^^^^   ^^^^ no `runtime` in the root
   |     |
   |     unresolved import
   |
   = help: consider importing one of these modules instead:
           crate::clients::anthropic::completion
           crate::clients::azure::completion
           crate::clients::deepseek::completion
           crate::clients::gemini::completion
           crate::clients::huggingface::completion
           crate::clients::mistral::completion
           crate::clients::openrouter::completion
           crate::clients::perplexity::completion
           crate::clients::together::completion
           crate::clients::xai::completion
           crate::domain::completion
           fluent_ai_domain::completion
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/bedrock/mod.rs:45:1
   |
45 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
   |
  ::: packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:47:1
   |
47 | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
   = help: consider importing this module instead:
           tokio::runtime
help: a similar path exists
   |
21 |     fluent_ai_domain::completion::{
   |     ++++++++++++++++++
help: a similar path exists
   |
25 |     fluent_ai_domain::message::Message,
   |     ++++++++++++++++++
help: a similar path exists
   |
26 |     tokio::runtime::{self, AsyncTask},
   |     +++++++

error[E0432]: unresolved import `crate::streaming`
  --> packages/provider/src/clients/xai/completion.rs:13:12
   |
13 | use crate::streaming::StreamingCompletionResponse;
   |            ^^^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `candle_core::streaming`

error[E0432]: unresolved import `crate::json_util`
  --> packages/provider/src/clients/xai/completion.rs:14:77
   |
14 | use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
   |                                                                             ^^^^^^^^^ no `json_util` in the root

error[E0432]: unresolved import `crate::json_util`
 --> packages/provider/src/clients/xai/streaming.rs:8:12
  |
8 | use crate::json_util::merge;
  |            ^^^^^^^^^ could not find `json_util` in the crate root

error[E0432]: unresolved import `crate::streaming`
 --> packages/provider/src/clients/xai/streaming.rs:9:12
  |
9 | use crate::streaming::StreamingCompletionResponse;
  |            ^^^^^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `candle_core::streaming`

error[E0432]: unresolved import `anthropic::AnthropicCompletionResponse`
  --> packages/provider/src/clients/mod.rs:21:50
   |
21 |     AnthropicClient, AnthropicCompletionRequest, AnthropicCompletionResponse, AnthropicError,
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                                  |
   |                                                  no `AnthropicCompletionResponse` in `clients::anthropic`
   |                                                  help: a similar name exists in the module: `AnthropicCompletionRequest`

error[E0432]: unresolved import `crate::http`
  --> packages/provider/src/client_factory.rs:21:12
   |
21 | use crate::http::HttpRequest;
   |            ^^^^ could not find `http` in the crate root

error[E0365]: `CompletionCoreError` is private, and cannot be re-exported
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ re-export of private `CompletionCoreError`
   |
   = note: consider declaring type or module `CompletionCoreError` with `pub`

error[E0432]: unresolved import `crate::providers`
  --> packages/provider/src/client_factory.rs:22:12
   |
22 | use crate::providers::Providers;
   |            ^^^^^^^^^ could not find `providers` in the crate root

error[E0432]: unresolved import `providers`
  --> packages/provider/src/lib.rs:36:9
   |
36 | pub use providers::Providers;
   |         ^^^^^^^^^ use of unresolved module or unlinked crate `providers`
   |
help: there is a crate or module with a similar name
   |
36 - pub use providers::Providers;
36 + pub use provider::Providers;
   |

error[E0432]: unresolved import `async_trait`
 --> packages/provider/src/clients/anthropic/discovery.rs:5:5
  |
5 | use async_trait::async_trait;
  |     ^^^^^^^^^^^ use of unresolved module or unlinked crate `async_trait`
  |
  = help: if you wanted to use a crate named `async_trait`, use `cargo add async_trait` to add it to your `Cargo.toml`

error[E0432]: unresolved import `async_trait`
 --> packages/provider/src/clients/openai/discovery.rs:6:5
  |
6 | use async_trait::async_trait;
  |     ^^^^^^^^^^^ use of unresolved module or unlinked crate `async_trait`
  |
  = help: if you wanted to use a crate named `async_trait`, use `cargo add async_trait` to add it to your `Cargo.toml`

error[E0432]: unresolved import `crate::clients::azure::completion::CompletionModel`
  --> packages/provider/src/clients/azure/client.rs:22:34
   |
22 |     clients::azure::completion::{CompletionModel, GPT_4O},
   |                                  ^^^^^^^^^^^^^^^ no `CompletionModel` in `clients::azure::completion`
   |
   = help: consider importing one of these items instead:
           crate::CompletionModel
           crate::clients::xai::CompletionModel
           crate::domain::CompletionModel
           fluent_ai_domain::CompletionModel

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/anthropic/completion.rs:412:46
    |
412 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/anthropic/completion.rs:413:43
    |
413 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/deepseek/completion.rs:346:46
    |
346 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/deepseek/completion.rs:347:43
    |
347 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/gemini/completion_old.rs:402:46
    |
402 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/gemini/completion_old.rs:403:43
    |
403 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/huggingface/completion.rs:348:46
    |
348 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/huggingface/completion.rs:349:43
    |
349 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/mistral/completion.rs:892:46
    |
892 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/mistral/completion.rs:893:43
    |
893 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/openai/completion.rs:343:46
    |
343 | ...                   Ok(chunk) => log::debug!("Chunk: {:?}", chunk),
    |                                    ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/openai/completion.rs:344:43
    |
344 | ...                   Err(e) => log::error!("Chunk error: {}", e),
    |                                 ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/anthropic/completion.rs:432:21
    |
432 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/deepseek/completion.rs:366:21
    |
366 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/gemini/completion_old.rs:422:21
    |
422 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/huggingface/completion.rs:368:21
    |
368 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/mistral/completion.rs:912:21
    |
912 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> packages/provider/src/clients/openai/completion.rs:363:21
    |
363 |                     log::error!("Failed to start completion: {}", e);
    |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> packages/provider/src/completion_provider.rs:41:13
   |
41 |             log::error!("No environment variable patterns defined for provider");
   |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> packages/provider/src/completion_provider.rs:47:21
   |
47 |                     log::debug!("Found API key using {}", key);
   |                     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> packages/provider/src/completion_provider.rs:51:13
   |
51 |             log::error!("No API key found using {}", key);
   |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> packages/provider/src/completion_provider.rs:59:25
   |
59 |                         log::debug!("Found API key using {} (first found in ordered list)", key);
   |                         ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> packages/provider/src/completion_provider.rs:64:13
   |
64 |             log::error!("No API key found. Tried in order: {:?}", keys);
   |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: could not find `util` in the crate root
  --> packages/provider/src/clients/anthropic/messages.rs:60:24
   |
60 |         #[serde(with = "crate::util::json_util::stringified_json")]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/anthropic/messages.rs:110:20
    |
110 |     #[serde(with = "crate::util::json_util::stringified_json")]
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: could not find `json_util` in the crate root
   --> packages/provider/src/clients/anthropic/messages.rs:404:30
    |
404 |             request = crate::json_util::merge(request, params);
    |                              ^^^^^^^^^ could not find `json_util` in the crate root

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/anthropic/requests.rs:82:19
   |
82 |         request: &AnthropicCompletionRequest,
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
82 |         request: &AnthropicCompletionRequest<'_>,
   |                                             ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:130:19
    |
130 |         request: &AnthropicCompletionRequest,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
130 |         request: &AnthropicCompletionRequest<'_>,
    |                                             ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:251:15
    |
251 |     request: &AnthropicCompletionRequest,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
251 |     request: &AnthropicCompletionRequest<'_>,
    |                                         ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/requests.rs:262:15
    |
262 |     request: &AnthropicCompletionRequest,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
262 |     request: &AnthropicCompletionRequest<'_>,
    |                                         ++++

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:149:17
    |
149 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:157:16
    |
157 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:158:39
    |
158 |             let (tx, stream) = crate::runtime::async_stream::<
    |                                       ^^^^^^^
    |                                       |
    |                                       unresolved import
    |                                       help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/streaming.rs:163:20
    |
163 |             crate::runtime::spawn_async(async move {
    |                    ^^^^^^^
    |                    |
    |                    unresolved import
    |                    help: a similar path exists: `tokio::runtime`

error[E0106]: missing lifetime specifier
  --> packages/provider/src/clients/anthropic/tools/core.rs:36:59
   |
36 |     dyn Fn(&Conversation, &Emitter, Req, &D) -> BoxFuture<'_, AnthropicResult<()>> + Send + Sync,
   |            -------------  --------       --               ^^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1, argument 2, or argument 4
   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html
help: consider making the bound lifetime-generic with a new `'a` lifetime
   |
36 -     dyn Fn(&Conversation, &Emitter, Req, &D) -> BoxFuture<'_, AnthropicResult<()>> + Send + Sync,
36 +     dyn for<'a> Fn(&'a Conversation, &'a Emitter, Req, &'a D) -> BoxFuture<'a, AnthropicResult<()>> + Send + Sync,
   |
help: consider introducing a named lifetime parameter
   |
35 ~ pub type InvocationHandler<'a, D, Req, Res> = Box<
36 ~     dyn Fn(&'a Conversation, &'a Emitter, Req, &'a D) -> BoxFuture<'a, AnthropicResult<()>> + Send + Sync,
   |

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:417:24
    |
417 |         conversation: &Conversation,
    |                        ^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
417 |         conversation: &Conversation<'_>,
    |                                    ++++

error[E0433]: failed to resolve: could not find `json_util` in the crate root
   --> packages/provider/src/clients/azure/client.rs:431:16
    |
431 |         crate::json_util::merge_inplace(&mut self.additional_params, p);
    |                ^^^^^^^^^ could not find `json_util` in the crate root

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:118:38
    |
118 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>
    |                                      ^^^^^^^^^^
    |                                      |
    |                                      unresolved import
    |                                      help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:118:69
    |
118 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>
    |                                                                     ^^^^^^^^^^
    |                                                                     |
    |                                                                     unresolved import
    |                                                                     help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:182:34
    |
182 |     ) -> Result<Vec<f64>, crate::embeddings::EmbeddingError> {
    |                                  ^^^^^^^^^^
    |                                  |
    |                                  unresolved import
    |                                  help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:244:28
    |
244 |     ) -> Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError> {
    |                            ^^^^^^^^^^
    |                            |
    |                            unresolved import
    |                            help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:244:59
    |
244 |     ) -> Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError> {
    |                                                           ^^^^^^^^^^
    |                                                           |
    |                                                           unresolved import
    |                                                           help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/embedding.rs:317:33
    |
317 |             results.push(crate::embeddings::Embedding {
    |                                 ^^^^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/clients/azure/transcription.rs:77:24
   |
77 |         let mut body = reqwest::multipart::Form::new().part(
   |                        ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

error[E0437]: type `Response` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:385:5
    |
385 |     type Response = CompletionResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0437]: type `StreamingResponse` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:386:5
    |
386 |     type StreamingResponse = StreamingResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0437]: type `Error` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:387:5
    |
387 |     type Error = CompletionError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `CompletionProvider`

error[E0407]: method `completion` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:418:5
    |
418 | /     fn completion(
419 | |         &self,
420 | |         request: CompletionRequest,
421 | |     ) -> AsyncTask<Result<Self::Response, Self::Error>> {
...   |
429 | |         })
430 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0407]: method `stream` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/bedrock/completion.rs:432:5
    |
432 | /     fn stream(
433 | |         &self,
434 | |         request: CompletionRequest,
435 | |     ) -> AsyncTask<Result<AsyncStream<Self::StreamingResponse>, Self::Error>> {
...   |
447 | |         })
448 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:161:31
    |
161 |     hf_client: ArcSwap<Option<hf_hub::api::tokio::Api>>,
    |                               ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:185:19
    |
185 |         let api = hf_hub::api::tokio::Api::new()
    |                   ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:372:32
    |
372 |         let repo = hf_api.repo(hf_hub::Repo::with_revision(
    |                                ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:374:13
    |
374 |             hf_hub::RepoType::Model,
    |             ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `hf_hub`
   --> packages/provider/src/clients/candle/model_repo.rs:459:16
    |
459 |         repo: &hf_hub::api::tokio::ApiRepo,
    |                ^^^^^^ use of unresolved module or unlinked crate `hf_hub`
    |
    = help: if you wanted to use a crate named `hf_hub`, use `cargo add hf_hub` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:20:13
   |
20 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:26:12
   |
26 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:84:17
   |
84 |     ) -> crate::runtime::AsyncTask<
   |                 ^^^^^^^
   |                 |
   |                 unresolved import
   |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:87:33
   |
87 |         let (tx, task) = crate::runtime::channel();
   |                                 ^^^^^^^
   |                                 |
   |                                 unresolved import
   |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/completion_old.rs:93:24
   |
93 |                 crate::runtime::spawn_async(async move {
   |                        ^^^^^^^
   |                        |
   |                        unresolved import
   |                        help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:150:17
    |
150 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:156:33
    |
156 |         let (tx, task) = crate::runtime::channel();
    |                                 ^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:160:16
    |
160 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/gemini/completion_old.rs:908:36
    |
908 |         #[serde(deserialize_with = "crate::util::string_or_one_or_many")]
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:59:17
   |
59 |     ) -> crate::runtime::AsyncTask<
   |                 ^^^^^^^
   |                 |
   |                 unresolved import
   |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:62:33
   |
62 |         let (tx, task) = crate::runtime::channel();
   |                                 ^^^^^^^
   |                                 |
   |                                 unresolved import
   |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/gemini/gemini_client.rs:68:24
   |
68 |                 crate::runtime::spawn_async(async move {
   |                        ^^^^^^^
   |                        |
   |                        unresolved import
   |                        help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:126:17
    |
126 |     ) -> crate::runtime::AsyncTask<
    |                 ^^^^^^^
    |                 |
    |                 unresolved import
    |                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:132:33
    |
132 |         let (tx, task) = crate::runtime::channel();
    |                                 ^^^^^^^
    |                                 |
    |                                 unresolved import
    |                                 help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:136:16
    |
136 |         crate::runtime::spawn_async(async move {
    |                ^^^^^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `tokio::runtime`

error[E0408]: variable `code` is not bound in all patterns
   --> packages/provider/src/clients/gemini/gemini_error.rs:162:13
    |
162 |             Self::HttpError { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
163 |             Self::RateLimited { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
164 |             Self::Timeout { .. } |
    |             ^^^^^^^^^^^^^^^^^^^^ pattern doesn't bind `code`
165 |             Self::InternalError { code, .. } if *code >= 500
    |                                   ---- variable not in all patterns

error[E0433]: failed to resolve: could not find `util` in the crate root
   --> packages/provider/src/clients/gemini/gemini_types.rs:114:32
    |
114 |     #[serde(deserialize_with = "crate::util::string_or_one_or_many")]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `util` in the crate root

error[E0407]: method `execute_completion` is not a member of trait `CompletionProvider`
   --> packages/provider/src/clients/groq/completion.rs:631:5
    |
631 | /     async fn execute_completion(
632 | |         mut builder: Self,
633 | |         prompt_text: String,
634 | |         api_key: String,
...   |
846 | |         Ok(())
847 | |     }
    | |_____^ not a member of trait `CompletionProvider`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:23:13
   |
23 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:29:12
   |
29 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/huggingface/streaming.rs:61:29
   |
61 |         completion_request: CompletionRequest,
   |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
61 |         completion_request: CompletionRequest<'_>,
   |                                              ++++

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/ollama/streaming.rs:39:13
   |
39 | ) -> crate::runtime::AsyncTask<
   |             ^^^^^^^
   |             |
   |             unresolved import
   |             help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/ollama/streaming.rs:42:12
   |
42 |     crate::runtime::spawn_async(async move {
   |            ^^^^^^^
   |            |
   |            unresolved import
   |            help: a similar path exists: `tokio::runtime`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/streaming.rs:164:67
    |
164 | fn extract_usage_info(chunk: &serde_json::Value) -> Option<crate::streaming::UsageInfo> {
    |                                                                   ^^^^^^^^^
    |                                                                   |
    |                                                                   unresolved import
    |                                                                   help: a similar path exists: `candle_core::streaming`

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/streaming.rs:197:21
    |
197 |         Some(crate::streaming::UsageInfo {
    |                     ^^^^^^^^^
    |                     |
    |                     unresolved import
    |                     help: a similar path exists: `candle_core::streaming`

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:486:44
    |
486 |                 let messages_call = crate::providers::openai::messages::OpenAIToolCall {
    |                                            ^^^^^^^^^ could not find `providers` in the crate root

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:489:38
    |
489 |                     function: crate::providers::openai::messages::OpenAIFunctionCall {
    |                                      ^^^^^^^^^ could not find `providers` in the crate root

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:500:40
    |
500 |                     .map(|call| crate::providers::openai::messages::OpenAIToolCall {
    |                                        ^^^^^^^^^ could not find `providers` in the crate root

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:503:42
    |
503 |                         function: crate::providers::openai::messages::OpenAIFunctionCall {
    |                                          ^^^^^^^^^ could not find `providers` in the crate root

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:518:29
    |
518 |                 Some(crate::providers::openai::OpenAIContent::Text(
    |                             ^^^^^^^^^ could not find `providers` in the crate root

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/openai/streaming.rs:526:24
    |
526 |                 crate::providers::openai::messages::OpenAIFunctionCall {
    |                        ^^^^^^^^^ could not find `providers` in the crate root

error[E0726]: implicit elided lifetime not allowed here
    --> packages/provider/src/clients/openrouter/streaming.rs:1762:29
     |
1762 |         completion_request: CompletionRequest,
     |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
     |
help: indicate the anonymous lifetime
     |
1762 |         completion_request: CompletionRequest<'_>,
     |                                              ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/together/completion.rs:237:18
    |
237 |         request: CompletionRequest,
    |                  ^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
237 |         request: CompletionRequest<'_>,
    |                                   ++++

error[E0726]: implicit elided lifetime not allowed here
   --> packages/provider/src/clients/xai/completion.rs:106:29
    |
106 |         completion_request: fluent_ai_domain::completion::CompletionRequest,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter
    |
help: indicate the anonymous lifetime
    |
106 |         completion_request: fluent_ai_domain::completion::CompletionRequest<'_>,
    |                                                                            ++++

error[E0726]: implicit elided lifetime not allowed here
  --> packages/provider/src/clients/xai/streaming.rs:14:29
   |
14 |         completion_request: CompletionRequest,
   |                             ^^^^^^^^^^^^^^^^^ expected lifetime parameter
   |
help: indicate the anonymous lifetime
   |
14 |         completion_request: CompletionRequest<'_>,
   |                                              ++++

error[E0433]: failed to resolve: could not find `http` in the crate root
  --> packages/provider/src/client_factory.rs:46:24
   |
46 |         source: crate::http::HttpError,
   |                        ^^^^ could not find `http` in the crate root

error[E0433]: failed to resolve: could not find `OpenAIProvider` in `openai`
   --> packages/provider/src/client_factory.rs:684:40
    |
684 |                 let provider = openai::OpenAIProvider::new();
    |                                        ^^^^^^^^^^^^^^ could not find `OpenAIProvider` in `openai`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/client.rs:88:38
   |
88 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>;
   |                                      ^^^^^^^^^^
   |                                      |
   |                                      unresolved import
   |                                      help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/client.rs:88:69
   |
88 |     ) -> AsyncTask<Result<Vec<crate::embeddings::Embedding>, crate::embeddings::EmbeddingError>>;
   |                                                                     ^^^^^^^^^^
   |                                                                     |
   |                                                                     unresolved import
   |                                                                     help: a similar path exists: `clients::openai::embeddings`

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/anthropic/completion.rs:45:12
   |
45 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
help: a trait with a similar name exists
   |
45 -     crate::model_info::get_model_config(model_name)
45 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
45 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
45 -     crate::model_info::get_model_config(model_name)
45 +     model_info::get_model_config(model_name)
   |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:350:41
    |
350 |     pub fn from_definition(def: &crate::completion::ToolDefinition) -> Self {
    |                                         ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
350 |     pub fn from_definition(def: &crate::fluent_ai_domain::completion::ToolDefinition) -> Self {
    |                                         ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 3 other candidates
help: if you import `completion`, refer to it directly
    |
350 -     pub fn from_definition(def: &crate::completion::ToolDefinition) -> Self {
350 +     pub fn from_definition(def: &completion::ToolDefinition) -> Self {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:360:19
    |
360 | impl From<&crate::message::Message> for Message {
    |                   ^^^^^^^ unresolved import
    |
help: a similar path exists
    |
360 | impl From<&crate::fluent_ai_domain::message::Message> for Message {
    |                   ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::message;
    |
6   + use fluent_ai_domain::message;
    |
help: if you import `message`, refer to it directly
    |
360 - impl From<&crate::message::Message> for Message {
360 + impl From<&message::Message> for Message {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:379:48
    |
379 |         messages: &crate::ZeroOneOrMany<crate::message::Message>,
    |                                                ^^^^^^^ unresolved import
    |
help: a similar path exists
    |
379 |         messages: &crate::ZeroOneOrMany<crate::fluent_ai_domain::message::Message>,
    |                                                ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::message;
    |
6   + use fluent_ai_domain::message;
    |
help: if you import `message`, refer to it directly
    |
379 -         messages: &crate::ZeroOneOrMany<crate::message::Message>,
379 +         messages: &crate::ZeroOneOrMany<message::Message>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:391:45
    |
391 |         tools: &crate::ZeroOneOrMany<crate::completion::ToolDefinition>,
    |                                             ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
391 |         tools: &crate::ZeroOneOrMany<crate::fluent_ai_domain::completion::ToolDefinition>,
    |                                             ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 3 other candidates
help: if you import `completion`, refer to it directly
    |
391 -         tools: &crate::ZeroOneOrMany<crate::completion::ToolDefinition>,
391 +         tools: &crate::ZeroOneOrMany<completion::ToolDefinition>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/anthropic/messages.rs:412:49
    |
412 |         documents: &crate::ZeroOneOrMany<crate::completion::Document>,
    |                                                 ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: a similar path exists
    |
412 |         documents: &crate::ZeroOneOrMany<crate::fluent_ai_domain::completion::Document>,
    |                                                 ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::anthropic::completion;
    |
6   + use crate::clients::deepseek::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
help: if you import `completion`, refer to it directly
    |
412 -         documents: &crate::ZeroOneOrMany<crate::completion::Document>,
412 +         documents: &crate::ZeroOneOrMany<completion::Document>,
    |

error[E0422]: cannot find struct, variant or union type `AnthropicMessage` in module `crate::clients::anthropic::messages`
   --> packages/provider/src/clients/anthropic/requests.rs:189:65
    |
189 |             messages: vec![crate::clients::anthropic::messages::AnthropicMessage {
    |                                                                 ^^^^^^^^^^^^^^^^ not found in `crate::clients::anthropic::messages`
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::clients::anthropic::AnthropicMessage;
    |
help: if you import `AnthropicMessage`, refer to it directly
    |
189 -             messages: vec![crate::clients::anthropic::messages::AnthropicMessage {
189 +             messages: vec![AnthropicMessage {
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:131:20
    |
131 |             crate::providers::anthropic::AnthropicError::RequestError(format!(
    |                    ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
6   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
131 -             crate::providers::anthropic::AnthropicError::RequestError(format!(
131 +             AnthropicError::RequestError(format!(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:151:61
    |
151 |             AsyncStream<Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>>,
    |                                                             ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
151 -             AsyncStream<Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>>,
151 +             AsyncStream<Result<AnthropicStreamChunk, anthropic::AnthropicError>>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:152:20
    |
152 |             crate::providers::anthropic::AnthropicError,
    |                    ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
152 -             crate::providers::anthropic::AnthropicError,
152 +             anthropic::AnthropicError,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:159:53
    |
159 |                 Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>,
    |                                                     ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
159 -                 Result<AnthropicStreamChunk, crate::providers::anthropic::AnthropicError>,
159 +                 Result<AnthropicStreamChunk, anthropic::AnthropicError>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:169:36
    |
169 | ...                   crate::providers::anthropic::AnthropicError::RequestError(
    |                              ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
6   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
169 -                             crate::providers::anthropic::AnthropicError::RequestError(
169 +                             AnthropicError::RequestError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:173:48
    |
173 |                         return Ok::<(), crate::providers::anthropic::AnthropicError>(());
    |                                                ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
173 -                         return Ok::<(), crate::providers::anthropic::AnthropicError>(());
173 +                         return Ok::<(), anthropic::AnthropicError>(());
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:196:68
    |
196 | ...                   let _ = tx.try_send(Err(crate::providers::anthropic::AnthropicError::DeserializationError(
    |                                                      ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
6   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
196 -                                     let _ = tx.try_send(Err(crate::providers::anthropic::AnthropicError::DeserializationError(
196 +                                     let _ = tx.try_send(Err(AnthropicError::DeserializationError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:226:40
    |
226 | ...                   crate::providers::anthropic::AnthropicError::RequestError(
    |                              ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this enum through its public re-export
    |
6   + use crate::clients::AnthropicError;
    |
help: if you import `AnthropicError`, refer to it directly
    |
226 -                                 crate::providers::anthropic::AnthropicError::RequestError(
226 +                                 AnthropicError::RequestError(
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:235:33
    |
235 |                 Ok::<(), crate::providers::anthropic::AnthropicError>(())
    |                                 ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
235 -                 Ok::<(), crate::providers::anthropic::AnthropicError>(())
235 +                 Ok::<(), anthropic::AnthropicError>(())
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/anthropic/streaming.rs:268:50
    |
268 | ) -> Result<Option<AnthropicStreamChunk>, crate::providers::anthropic::AnthropicError> {
    |                                                  ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
6   + use crate::clients::anthropic;
    |
help: if you import `anthropic`, refer to it directly
    |
268 - ) -> Result<Option<AnthropicStreamChunk>, crate::providers::anthropic::AnthropicError> {
268 + ) -> Result<Option<AnthropicStreamChunk>, anthropic::AnthropicError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/azure/client.rs:497:20
    |
497 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
497 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
9   + use crate::clients::azure::streaming;
    |
9   + use crate::clients::deepseek::streaming;
    |
9   + use crate::clients::gemini::streaming;
    |
9   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
497 -             crate::streaming::StreamingCompletionResponse<
497 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionResponse` in module `openai`
  --> packages/provider/src/clients/azure/completion.rs:86:29
   |
86 |     type Response = openai::CompletionResponse;
   |                             ^^^^^^^^^^^^^^^^^^ not found in `openai`
   |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
  --> packages/provider/src/clients/ollama/completion.rs:55:1
   |
55 | pub struct CompletionResponse {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
   |
9  + use crate::clients::mistral::completion::CompletionResponse;
   |
9  + use crate::clients::openrouter::completion::CompletionResponse;
   |
9  + use crate::clients::perplexity::completion::CompletionResponse;
   |
9  + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
   |
     and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
   |
86 -     type Response = openai::CompletionResponse;
86 +     type Response = CompletionResponse;
   |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:87:38
    |
87  |     type StreamingResponse = openai::StreamingCompletionResponse;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::azure::StreamingCompletionResponse;
    |
9   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
9   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
87  -     type StreamingResponse = openai::StreamingCompletionResponse;
87  +     type StreamingResponse = StreamingCompletionResponse;
    |

error[E0412]: cannot find type `CompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:113:56
    |
113 |     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
    |                                                        ^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::mistral::completion::CompletionResponse;
    |
9   + use crate::clients::openrouter::completion::CompletionResponse;
    |
9   + use crate::clients::perplexity::completion::CompletionResponse;
    |
9   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
113 -     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
113 +     ) -> Result<completion::CompletionResponse<CompletionResponse>, CompletionError> {
    |

error[E0412]: cannot find type `CompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:127:62
    |
127 |             match serde_json::from_str::<ApiResponse<openai::CompletionResponse>>(&t)? {
    |                                                              ^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::mistral::completion::CompletionResponse;
    |
9   + use crate::clients::openrouter::completion::CompletionResponse;
    |
9   + use crate::clients::perplexity::completion::CompletionResponse;
    |
9   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
127 -             match serde_json::from_str::<ApiResponse<openai::CompletionResponse>>(&t)? {
127 +             match serde_json::from_str::<ApiResponse<CompletionResponse>>(&t)? {
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:146:38
    |
146 |     ) -> Result<RigStreaming<openai::StreamingCompletionResponse>, CompletionError> {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::azure::StreamingCompletionResponse;
    |
9   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
9   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
146 -     ) -> Result<RigStreaming<openai::StreamingCompletionResponse>, CompletionError> {
146 +     ) -> Result<RigStreaming<StreamingCompletionResponse>, CompletionError> {
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:167:43
    |
167 |         let mut full_history: Vec<openai::Message> = match &completion_request.preamble {
    |                                           ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
9   + use crate::clients::anthropic::Message;
    |
9   + use crate::clients::mistral::completion::Message;
    |
9   + use crate::clients::perplexity::completion::Message;
    |
9   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
167 -         let mut full_history: Vec<openai::Message> = match &completion_request.preamble {
167 +         let mut full_history: Vec<Message> = match &completion_request.preamble {
    |

error[E0433]: failed to resolve: could not find `Message` in `openai`
   --> packages/provider/src/clients/azure/completion.rs:168:44
    |
168 |             Some(preamble) => vec![openai::Message::system(preamble)],
    |                                            ^^^^^^^ could not find `Message` in `openai`
    |
help: consider importing one of these items
    |
9   + use crate::clients::anthropic::Message;
    |
9   + use crate::clients::mistral::completion::Message;
    |
9   + use crate::clients::perplexity::completion::Message;
    |
9   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
168 -             Some(preamble) => vec![openai::Message::system(preamble)],
168 +             Some(preamble) => vec![Message::system(preamble)],
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:173:35
    |
173 |             let docs: Vec<openai::Message> = docs.try_into()?;
    |                                   ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
9   + use crate::clients::anthropic::Message;
    |
9   + use crate::clients::mistral::completion::Message;
    |
9   + use crate::clients::perplexity::completion::Message;
    |
9   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
173 -             let docs: Vec<openai::Message> = docs.try_into()?;
173 +             let docs: Vec<Message> = docs.try_into()?;
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:177:39
    |
177 |         let chat_history: Vec<openai::Message> = completion_request
    |                                       ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
9   + use crate::clients::anthropic::Message;
    |
9   + use crate::clients::mistral::completion::Message;
    |
9   + use crate::clients::perplexity::completion::Message;
    |
9   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
177 -         let chat_history: Vec<openai::Message> = completion_request
177 +         let chat_history: Vec<Message> = completion_request
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/azure/completion.rs:181:47
    |
181 |             .collect::<Result<Vec<Vec<openai::Message>>, _>>()?
    |                                               ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
9   + use crate::clients::anthropic::Message;
    |
9   + use crate::clients::mistral::completion::Message;
    |
9   + use crate::clients::perplexity::completion::Message;
    |
9   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
181 -             .collect::<Result<Vec<Vec<openai::Message>>, _>>()?
181 +             .collect::<Result<Vec<Vec<Message>>, _>>()?
    |

error[E0433]: failed to resolve: could not find `ToolDefinition` in `openai`
   --> packages/provider/src/clients/azure/completion.rs:199:75
    |
199 |                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
    |                                                                           ^^^^^^^^^^^^^^ could not find `ToolDefinition` in `openai`
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items
    |
9   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
9   + use crate::domain::ToolDefinition;
    |
9   + use crate::domain::completion::ToolDefinition;
    |
9   + use fluent_ai_domain::ToolDefinition;
    |
      and 1 other candidate
help: if you import `ToolDefinition`, refer to it directly
    |
199 -                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
199 +                 "tools": completion_request.tools.into_iter().map(ToolDefinition::from).collect::<Vec<_>>(),
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/streaming.rs:25:24
    |
25  |     pub inner: openai::StreamingCompletionResponse,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::azure::StreamingCompletionResponse;
    |
9   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
9   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
25  -     pub inner: openai::StreamingCompletionResponse,
25  +     pub inner: StreamingCompletionResponse,
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/streaming.rs:28:19
    |
28  | impl From<openai::StreamingCompletionResponse> for StreamingCompletionResponse {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::azure::StreamingCompletionResponse;
    |
9   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
9   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
28  - impl From<openai::StreamingCompletionResponse> for StreamingCompletionResponse {
28  + impl From<StreamingCompletionResponse> for StreamingCompletionResponse {
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/azure/streaming.rs:29:28
    |
29  |     fn from(inner: openai::StreamingCompletionResponse) -> Self {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
9   + use crate::clients::azure::StreamingCompletionResponse;
    |
9   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
9   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
29  -     fn from(inner: openai::StreamingCompletionResponse) -> Self {
29  +     fn from(inner: StreamingCompletionResponse) -> Self {
    |

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/completion.rs:405:39
    |
405 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
  --> packages/provider/src/clients/bedrock/streaming.rs:74:43
   |
74 |                         let error_chunk = CompletionChunk {
   |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
   |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
  --> packages/provider/src/clients/huggingface/streaming.rs:49:1
   |
49 | struct CompletionChunk {
   | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
  --> packages/provider/src/clients/bedrock/streaming.rs:89:35
   |
89 |                 let final_chunk = CompletionChunk {
   |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
   |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
  --> packages/provider/src/clients/huggingface/streaming.rs:49:1
   |
49 | struct CompletionChunk {
   | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `EventStreamEvent` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/bedrock/streaming.rs:110:33
    |
110 |         event: fluent_ai_http3::EventStreamEvent,
    |                                 ^^^^^^^^^^^^^^^^ not found in `fluent_ai_http3`

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:152:25
    |
152 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:173:25
    |
173 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:196:25
    |
196 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:219:14
    |
219 |         Some(CompletionChunk {
    |              ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:254:25
    |
254 |             return Some(CompletionChunk {
    |                         ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:296:37
    |
296 |                         return Some(CompletionChunk {
    |                                     ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/bedrock/streaming.rs:315:29
    |
315 |                 return Some(CompletionChunk {
    |                             ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `ConfigMetrics` in module `super::config`
   --> packages/provider/src/clients/candle/client.rs:711:47
    |
711 |     pub global_config_metrics: super::config::ConfigMetrics,
    |                                               ^^^^^^^^^^^^^ not found in `super::config`

error[E0412]: cannot find type `RuntimeMetrics` in module `super::config`
   --> packages/provider/src/clients/candle/client.rs:713:42
    |
713 |     pub realtime_metrics: super::config::RuntimeMetrics,
    |                                          ^^^^^^^^^^^^^^ not found in `super::config`
    |
help: consider importing this struct
    |
6   + use tokio::runtime::RuntimeMetrics;
    |
help: if you import `RuntimeMetrics`, refer to it directly
    |
713 -     pub realtime_metrics: super::config::RuntimeMetrics,
713 +     pub realtime_metrics: RuntimeMetrics,
    |

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:728:39
    |
728 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:758:35
    |
758 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:771:39
    |
771 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:787:35
    |
787 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:819:39
    |
819 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:853:43
    |
853 |                         let error_chunk = CompletionChunk {
    |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:868:43
    |
868 |                         let error_chunk = CompletionChunk {
    |                                           ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:894:39
    |
894 |                     let error_chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:931:40
    |
931 |                 let completion_chunk = CompletionChunk {
    |                                        ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/candle/client.rs:957:31
    |
957 |             let final_chunk = CompletionChunk {
    |                               ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0422]: cannot find struct, variant or union type `CompletionUsage` in module `fluent_ai_domain::usage`
   --> packages/provider/src/clients/candle/client.rs:965:54
    |
965 |                 usage: Some(fluent_ai_domain::usage::CompletionUsage {
    |                                                      ^^^^^^^^^^^^^^^ not found in `fluent_ai_domain::usage`

error[E0412]: cannot find type `CompletionError` in crate `fluent_ai_domain`
    --> packages/provider/src/clients/candle/client.rs:1000:52
     |
1000 | impl From<CandleClientError> for fluent_ai_domain::CompletionError {
     |                                                    ^^^^^^^^^^^^^^^ help: an enum with a similar name exists: `CompletionChunk`
     |
    ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
     |
121  | pub enum CompletionChunk {
     | ------------------------ similarly named enum `CompletionChunk` defined here
     |
     = note: enum `crate::completion_provider::CompletionError` exists but is inaccessible

error[E0433]: failed to resolve: could not find `CompletionError` in `fluent_ai_domain`
    --> packages/provider/src/clients/candle/client.rs:1002:27
     |
1002 |         fluent_ai_domain::CompletionError::ProviderError(err.to_string())
     |                           ^^^^^^^^^^^^^^^
     |                           |
     |                           could not find `CompletionError` in `fluent_ai_domain`
     |                           help: an enum with a similar name exists: `CompletionChunk`
     |
     = note: enum `crate::completion_provider::CompletionError` exists but is inaccessible

error[E0412]: cannot find type `AtomicU32` in this scope
    --> packages/provider/src/clients/candle/device_manager.rs:208:35
     |
208  |       avg_scan_time_us: CachePadded<AtomicU32>,
     |                                     ^^^^^^^^^
     |
    ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3786:1
     |
3786 | / atomic_int! {
3787 | |     cfg(target_has_atomic = "64"),
3788 | |     cfg(target_has_atomic_equal_alignment = "64"),
3789 | |     stable(feature = "integer_atomics_stable", since = "1.34.0"),
...    |
3802 | |     u64 AtomicU64
3803 | | }
     | |_- similarly named struct `AtomicU64` defined here
     |
help: a struct with a similar name exists
     |
208  -     avg_scan_time_us: CachePadded<AtomicU32>,
208  +     avg_scan_time_us: CachePadded<AtomicU64>,
     |
help: consider importing this struct
     |
6    + use std::sync::atomic::AtomicU32;
     |

error[E0433]: failed to resolve: use of undeclared type `AtomicU32`
   --> packages/provider/src/clients/candle/device_manager.rs:220:48
    |
220 |             avg_scan_time_us: CachePadded::new(AtomicU32::new(0)),
    |                                                ^^^^^^^^^ use of undeclared type `AtomicU32`
    |
help: a struct with a similar name exists
    |
220 -             avg_scan_time_us: CachePadded::new(AtomicU32::new(0)),
220 +             avg_scan_time_us: CachePadded::new(AtomicU64::new(0)),
    |
help: consider importing this struct
    |
6   + use std::sync::atomic::AtomicU32;
    |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/completion.rs:42:12
   |
42 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
help: a trait with a similar name exists
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
42 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     model_info::get_model_config(model_name)
   |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/deepseek/streaming.rs:22:16
   |
22 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ^^^^^^^^^ unresolved import
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/groq/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:51:1
   |
51 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
   |
22 |         crate::candle_core::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                +++++++++++++
help: consider importing one of these modules
   |
7  + use crate::clients::azure::streaming;
   |
7  + use crate::clients::gemini::streaming;
   |
7  + use crate::clients::huggingface::streaming;
   |
7  + use crate::clients::openrouter::streaming;
   |
     and 3 other candidates
help: if you import `streaming`, refer to it directly
   |
22 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
22 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/deepseek/streaming.rs:89:19
    |
89  |         Ok(crate::streaming::StreamingCompletionResponse::new(
    |                   ^^^^^^^^^ unresolved import
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a similar path exists
    |
89  |         Ok(crate::candle_core::streaming::StreamingCompletionResponse::new(
    |                   +++++++++++++
help: consider importing one of these structs
    |
7   + use crate::clients::azure::StreamingCompletionResponse;
    |
7   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
7   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
89  -         Ok(crate::streaming::StreamingCompletionResponse::new(
89  +         Ok(StreamingCompletionResponse::new(
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/gemini/client.rs:167:34
    |
167 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
167 -     ) -> Result<fluent_ai_http3::Response> {
167 +     ) -> Result<Response> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/gemini/client.rs:206:34
    |
206 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
206 -     ) -> Result<fluent_ai_http3::Response> {
206 +     ) -> Result<Response> {
    |

error[E0405]: cannot find trait `Embed` in this scope
   --> packages/provider/src/clients/gemini/client.rs:284:26
    |
284 |     pub fn embeddings<D: Embed>(&self, model: &str) -> EmbeddingBuilder<EmbeddingModel, D> {
    |                          ^^^^^ not found in this scope

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/gemini/client.rs:603:63
    |
603 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
   ::: packages/provider/src/clients/gemini/gemini_types.rs:398:1
    |
398 | pub struct FunctionResponse {
    | --------------------------- similarly named struct `FunctionResponse` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
603 -             completion::CompletionResponse<super::completion::CompletionResponse>,
603 +             completion::CompletionResponse<super::completion::FunctionResponse>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
603 -             completion::CompletionResponse<super::completion::CompletionResponse>,
603 +             completion::CompletionResponse<CompletionResponse>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/client.rs:630:20
    |
630 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
630 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
630 -             crate::streaming::StreamingCompletionResponse<
630 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:68:6
    |
68  | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
68  - impl CompletionModel {
68  + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
30  + use crate::CompletionModel;
    |
30  + use crate::domain::CompletionModel;
    |
30  + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:77:38
    |
77  | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
77  - impl completion::CompletionModel for CompletionModel {
77  + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
30  + use crate::CompletionModel;
    |
30  + use crate::domain::CompletionModel;
    |
30  + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/completion_old.rs:152:20
    |
152 |             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
152 |             crate::candle_core::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    +++++++++++++
help: consider importing one of these modules
    |
30  + use crate::clients::azure::streaming;
    |
30  + use crate::clients::deepseek::streaming;
    |
30  + use crate::clients::gemini::streaming;
    |
30  + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
152 -             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
152 +             streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0422]: cannot find struct, variant or union type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/completion_old.rs:161:26
    |
161 |             let result = CompletionModel { client, model }
    |                          ^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `ExecutableCode` in this scope
    --> packages/provider/src/clients/gemini/completion_old.rs:1020:24
     |
1020 |         ExecutableCode(ExecutableCode),
     |                        ^^^^^^^^^^^^^^ not found in this scope
     |
help: consider importing one of these structs
     |
847  +     use crate::clients::gemini::gemini_api_types::ExecutableCode;
     |
847  +     use crate::clients::gemini::gemini_types::ExecutableCode;
     |

error[E0412]: cannot find type `CodeExecutionResult` in this scope
    --> packages/provider/src/clients/gemini/completion_old.rs:1021:29
     |
1021 |         CodeExecutionResult(CodeExecutionResult),
     |                             ^^^^^^^^^^^^^^^^^^^
...
1608 |     pub struct CodeExecution {}
     |     ------------------------ similarly named struct `CodeExecution` defined here
     |
help: a struct with a similar name exists
     |
1021 -         CodeExecutionResult(CodeExecutionResult),
1021 +         CodeExecutionResult(CodeExecution),
     |
help: consider importing one of these structs
     |
847  +     use crate::clients::gemini::gemini_api_types::CodeExecutionResult;
     |
847  +     use crate::clients::gemini::gemini_types::CodeExecutionResult;
     |

error[E0412]: cannot find type `ExecutableCode` in this scope
   --> packages/provider/src/clients/gemini/embedding.rs:153:33
    |
153 |         executable_code: Option<ExecutableCode>,
    |                                 ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
112 +     use crate::clients::gemini::gemini_api_types::ExecutableCode;
    |
112 +     use crate::clients::gemini::gemini_types::ExecutableCode;
    |

error[E0412]: cannot find type `CodeExecutionResult` in this scope
   --> packages/provider/src/clients/gemini/embedding.rs:155:39
    |
155 |         code_execution_result: Option<CodeExecutionResult>,
    |                                       ^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
112 +     use crate::clients::gemini::gemini_api_types::CodeExecutionResult;
    |
112 +     use crate::clients::gemini::gemini_types::CodeExecutionResult;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:43:6
    |
43  | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
43  - impl CompletionModel {
43  + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:52:38
    |
52  | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
52  - impl completion::CompletionModel for CompletionModel {
52  + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:128:20
    |
128 |             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
128 |             crate::candle_core::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                    +++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::azure::streaming;
    |
6   + use crate::clients::deepseek::streaming;
    |
6   + use crate::clients::gemini::streaming;
    |
6   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
128 -             crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
128 +             streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0422]: cannot find struct, variant or union type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:137:26
    |
137 |             let result = CompletionModel { client, model }
    |                          ^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/gemini/gemini_client.rs:147:6
    |
147 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
147 - impl CompletionModel {
147 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/gemini/gemini_client.rs:152:16
    |
152 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |                ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
152 |         crate::candle_core::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |                +++++++++++++
help: consider importing one of these modules
    |
6   + use crate::clients::azure::streaming;
    |
6   + use crate::clients::deepseek::streaming;
    |
6   + use crate::clients::gemini::streaming;
    |
6   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
152 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
152 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/groq/client.rs:127:34
    |
127 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
127 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
127 +     ) -> Result<Response, HttpError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/groq/client.rs:436:20
    |
436 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
436 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::groq::streaming;
    |
      and 5 other candidates
help: if you import `streaming`, refer to it directly
    |
436 -             crate::streaming::StreamingCompletionResponse<
436 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/groq/completion.rs:177:6
    |
177 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
177 - impl CompletionModel {
177 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/groq/completion.rs:257:38
    |
257 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
257 - impl completion::CompletionModel for CompletionModel {
257 + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/groq/completion.rs:615:35
    |
615 |                 let error_chunk = CompletionChunk {
    |                                   ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0574]: expected struct, variant or union type, found enum `CompletionChunk`
   --> packages/provider/src/clients/groq/completion.rs:788:53
    |
788 | ...                   let mut chunk = CompletionChunk {
    |                                       ^^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::huggingface::streaming::CompletionChunk` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:49:1
    |
49  | struct CompletionChunk {
    | ^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/groq/streaming.rs:25:16
   |
25 |         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                ^^^^^^^^^ unresolved import
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/ollama/mod.rs:9:1
   |
9  | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
   |
  ::: packages/provider/src/clients/openai/mod.rs:51:1
   |
51 | mod streaming;
   | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
   |
25 |         crate::candle_core::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |                +++++++++++++
help: consider importing one of these modules
   |
7  + use crate::clients::azure::streaming;
   |
7  + use crate::clients::deepseek::streaming;
   |
7  + use crate::clients::gemini::streaming;
   |
7  + use crate::clients::huggingface::streaming;
   |
     and 4 other candidates
help: if you import `streaming`, refer to it directly
   |
25 -         crate::streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
25 +         streaming::StreamingCompletionResponse<StreamingCompletionResponse>,
   |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/groq/streaming.rs:88:19
    |
88  |         Ok(crate::streaming::StreamingCompletionResponse::new(
    |                   ^^^^^^^^^ unresolved import
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a similar path exists
    |
88  |         Ok(crate::candle_core::streaming::StreamingCompletionResponse::new(
    |                   +++++++++++++
help: consider importing one of these structs
    |
7   + use crate::clients::azure::StreamingCompletionResponse;
    |
7   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
7   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
88  -         Ok(crate::streaming::StreamingCompletionResponse::new(
88  +         Ok(StreamingCompletionResponse::new(
    |

error[E0433]: failed to resolve: unresolved import
  --> packages/provider/src/clients/huggingface/completion.rs:42:12
   |
42 |     crate::model_info::get_model_config(model_name)
   |            ^^^^^^^^^^ unresolved import
   |
help: a trait with a similar name exists
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     crate::ModelInfo::get_model_config(model_name)
   |
help: a similar path exists
   |
42 |     crate::clients::gemini::model_info::get_model_config(model_name)
   |            +++++++++++++++++
help: consider importing one of these modules
   |
15 + use crate::clients::gemini::model_info;
   |
15 + use crate::clients::mistral::model_info;
   |
help: if you import `model_info`, refer to it directly
   |
42 -     crate::model_info::get_model_config(model_name)
42 +     model_info::get_model_config(model_name)
   |

error[E0574]: expected struct, variant or union type, found enum `ToolDefinition`
   --> packages/provider/src/clients/mistral/completion.rs:180:12
    |
180 | pub struct ToolDefinition {
    |            ^^^^^^^^^^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs instead
    |
1   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
1   + use crate::domain::completion::ToolDefinition;
    |
1   + use fluent_ai_domain::completion::ToolDefinition;
    |

error[E0574]: expected struct, variant or union type, found enum `ToolDefinition`
   --> packages/provider/src/clients/mistral/completion.rs:179:41
    |
179 | #[derive(Debug, Deserialize, Serialize, Clone)]
    |                                         ^^^^^ not a struct, variant or union type
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs instead
    |
1   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
1   + use crate::domain::completion::ToolDefinition;
    |
1   + use fluent_ai_domain::completion::ToolDefinition;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/mistral/completion.rs:252:6
    |
252 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
252 - impl CompletionModel {
252 + impl CompletionChunk {
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/mistral/completion.rs:384:38
    |
384 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:1
    |
121 | pub enum CompletionChunk {
    | ------------------------ similarly named enum `CompletionChunk` defined here
    |
help: an enum with a similar name exists
    |
384 - impl completion::CompletionModel for CompletionModel {
384 + impl completion::CompletionModel for CompletionChunk {
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/mistral/model_info.rs:300:12
    |
300 |     crate::model_info::get_model_config(model_name)
    |            ^^^^^^^^^^ unresolved import
    |
help: a trait with a similar name exists
    |
300 -     crate::model_info::get_model_config(model_name)
300 +     crate::ModelInfo::get_model_config(model_name)
    |
help: a similar path exists
    |
300 |     crate::clients::gemini::model_info::get_model_config(model_name)
    |            +++++++++++++++++
help: consider importing this module
    |
8   + use crate::clients::gemini::model_info;
    |
help: if you import `model_info`, refer to it directly
    |
300 -     crate::model_info::get_model_config(model_name)
300 +     model_info::get_model_config(model_name)
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/ollama/client.rs:141:34
    |
141 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
141 -     ) -> Result<fluent_ai_http3::Response> {
141 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/ollama/client.rs:479:20
    |
479 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
479 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 5 other candidates
help: if you import `streaming`, refer to it directly
    |
479 -             crate::streaming::StreamingCompletionResponse<
479 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:138:6
    |
138 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:204:38
    |
204 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:299:6
    |
299 | impl EmbeddingModel {
    |      ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::EmbeddingModel;
    |
7   + use crate::domain::EmbeddingModel;
    |
7   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/ollama/completion.rs:336:30
    |
336 | impl EmbeddingModelTrait for EmbeddingModel {
    |                              ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::EmbeddingModel;
    |
7   + use crate::domain::EmbeddingModel;
    |
7   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0574]: expected struct, variant or union type, found enum `ProviderMessage`
   --> packages/provider/src/clients/ollama/streaming.rs:142:16
    |
142 |         delta: ProviderMessage {
    |                ^^^^^^^^^^^^^^^ not a struct, variant or union type

error[E0425]: cannot find function `is_chat_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:420:29
    |
420 |                 if !models::is_chat_model(model) {
    |                             ^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `CHAT_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:424:33
    |
424 |                         models::CHAT_MODELS,
    |                                 ^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:431:29
    |
431 |                 if !models::is_embedding_model(model) {
    |                             ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_audio_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:442:29
    |
442 |                 if !models::is_audio_model(model) {
    |                             ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `AUDIO_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:446:33
    |
446 |                           models::AUDIO_MODELS,
    |                                   ^^^^^^^^^^^^ help: a constant with a similar name exists: `ALL_MODELS`
    |
   ::: packages/provider/src/clients/openai/mod.rs:115:5
    |
115 | /     pub const ALL_MODELS: &[&str] = &[
116 | |         GPT_4_1,
117 | |         GPT_4_1_MINI,
118 | |         GPT_4_1_NANO,
...   |
133 | |         TEXT_EMBEDDING_3_SMALL,
134 | |     ];
    | |______- similarly named constant `ALL_MODELS` defined here

error[E0425]: cannot find value `WHISPER_1` in module `models`
   --> packages/provider/src/clients/openai/client.rs:447:33
    |
447 |                         models::WHISPER_1,
    |                                 ^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_tts_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:453:29
    |
453 |                 if !models::is_tts_model(model) {
    |                             ^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `TTS_MODELS` in module `models`
   --> packages/provider/src/clients/openai/client.rs:457:33
    |
457 |                           models::TTS_MODELS,
    |                                   ^^^^^^^^^^ help: a constant with a similar name exists: `ALL_MODELS`
    |
   ::: packages/provider/src/clients/openai/mod.rs:115:5
    |
115 | /     pub const ALL_MODELS: &[&str] = &[
116 | |         GPT_4_1,
117 | |         GPT_4_1_MINI,
118 | |         GPT_4_1_NANO,
...   |
133 | |         TEXT_EMBEDDING_3_SMALL,
134 | |     ];
    | |______- similarly named constant `ALL_MODELS` defined here

error[E0425]: cannot find value `TTS_1` in module `models`
   --> packages/provider/src/clients/openai/client.rs:458:33
    |
458 |                         models::TTS_1,
    |                                 ^^^^^ not found in `models`

error[E0425]: cannot find function `is_vision_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:464:29
    |
464 |                 if !models::is_vision_model(model) {
    |                             ^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_supported_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:475:29
    |
475 |                 if !models::is_supported_model(model) {
    |                             ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_supported_model` in module `models`
   --> packages/provider/src/clients/openai/client.rs:492:21
    |
492 |         if !models::is_supported_model(model) {
    |                     ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `model_family` in module `models`
   --> packages/provider/src/clients/openai/client.rs:504:29
    |
504 |             family: models::model_family(model).unwrap_or("unknown"),
    |                             ^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `model_generation` in module `models`
   --> packages/provider/src/clients/openai/client.rs:505:33
    |
505 |             generation: models::model_generation(model).unwrap_or("unknown"),
    |                                 ^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `context_length` in module `models`
   --> packages/provider/src/clients/openai/client.rs:506:34
    |
506 |             max_context: models::context_length(model),
    |                                  ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_streaming` in module `models`
   --> packages/provider/src/clients/openai/client.rs:507:41
    |
507 |             supports_streaming: models::supports_streaming(model),
    |                                         ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_tools` in module `models`
   --> packages/provider/src/clients/openai/client.rs:508:37
    |
508 |             supports_tools: models::supports_tools(model),
    |                                     ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_vision` in module `models`
   --> packages/provider/src/clients/openai/client.rs:509:38
    |
509 |             supports_vision: models::supports_vision(model),
    |                                      ^^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
15  + use crate::clients::openai::vision::supports_vision;
    |
help: if you import `supports_vision`, refer to it directly
    |
509 -             supports_vision: models::supports_vision(model),
509 +             supports_vision: supports_vision(model),
    |

error[E0425]: cannot find function `supports_audio` in module `models`
   --> packages/provider/src/clients/openai/client.rs:510:37
    |
510 |             supports_audio: models::supports_audio(model),
    |                                     ^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `temperature_range` in module `models`
   --> packages/provider/src/clients/openai/client.rs:511:40
    |
511 |             temperature_range: models::temperature_range(model),
    |                                        ^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:549:57
    |
549 |             EndpointType::ChatCompletions => endpoints::CHAT_COMPLETIONS,
    |                                                         ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `EMBEDDINGS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:550:52
    |
550 |             EndpointType::Embeddings => endpoints::EMBEDDINGS,
    |                                                    ^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_TRANSCRIPTIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:551:60
    |
551 |             EndpointType::AudioTranscription => endpoints::AUDIO_TRANSCRIPTIONS,
    |                                                            ^^^^^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_TRANSLATIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:552:58
    |
552 |             EndpointType::AudioTranslation => endpoints::AUDIO_TRANSLATIONS,
    |                                                          ^^^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `AUDIO_SPEECH` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:553:54
    |
553 |             EndpointType::TextToSpeech => endpoints::AUDIO_SPEECH,
    |                                                      ^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:554:56
    |
554 |             EndpointType::VisionAnalysis => endpoints::CHAT_COMPLETIONS, /* Vision uses chat completions */
    |                                                        ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `MODELS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:555:48
    |
555 |             EndpointType::Models => endpoints::MODELS,
    |                                                ^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `FILES` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:556:47
    |
556 |             EndpointType::Files => endpoints::FILES,
    |                                               ^^^^^ not found in `endpoints`

error[E0425]: cannot find value `FINE_TUNING` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:557:52
    |
557 |             EndpointType::FineTuning => endpoints::FINE_TUNING,
    |                                                    ^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `MODERATIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:558:53
    |
558 |             EndpointType::Moderations => endpoints::MODERATIONS,
    |                                                     ^^^^^^^^^^^ not found in `endpoints`

error[E0425]: cannot find value `CHAT_COMPLETIONS` in module `endpoints`
   --> packages/provider/src/clients/openai/client.rs:695:24
    |
695 |             endpoints::CHAT_COMPLETIONS,
    |                        ^^^^^^^^^^^^^^^^ not found in `endpoints`

error[E0433]: failed to resolve: could not find `CredentialSource` in `security`
   --> packages/provider/src/clients/openai/client.rs:870:34
    |
870 |                 crate::security::CredentialSource::Runtime {
    |                                  ^^^^^^^^^^^^^^^^ could not find `CredentialSource` in `security`
    |
help: a struct with a similar name exists
    |
870 -                 crate::security::CredentialSource::Runtime {
870 +                 crate::security::CredentialConfig::Runtime {
    |
help: consider importing this enum
    |
15  + use crate::security::credentials::CredentialSource;
    |
help: if you import `CredentialSource`, refer to it directly
    |
870 -                 crate::security::CredentialSource::Runtime {
870 +                 CredentialSource::Runtime {
    |

error[E0412]: cannot find type `CredentialStatistics` in module `crate::security`
   --> packages/provider/src/clients/openai/client.rs:892:73
    |
892 |     pub async fn get_credential_statistics() -> Result<crate::security::CredentialStatistics> {
    |                                                                         ^^^^^^^^^^^^^^^^^^^^ not found in `crate::security`
    |
help: consider importing this struct
    |
15  + use crate::security::credentials::CredentialStatistics;
    |
help: if you import `CredentialStatistics`, refer to it directly
    |
892 -     pub async fn get_credential_statistics() -> Result<crate::security::CredentialStatistics> {
892 +     pub async fn get_credential_statistics() -> Result<CredentialStatistics> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/streaming.rs:711:12
    |
711 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
711 -     crate::async_task::spawn_async(async move {
711 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
711 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
711 -     crate::async_task::spawn_async(async move {
711 +     async_task::spawn_async(async move {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openai/streaming.rs:754:12
    |
754 |     crate::async_task::spawn_async(async move {
    |            ^^^^^^^^^^ unresolved import
    |
help: a type alias with a similar name exists
    |
754 -     crate::async_task::spawn_async(async move {
754 +     crate::AsyncTask::spawn_async(async move {
    |
help: a similar path exists
    |
754 |     crate::fluent_ai_domain::async_task::spawn_async(async move {
    |            ++++++++++++++++++
help: consider importing one of these modules
    |
6   + use crate::domain::async_task;
    |
6   + use fluent_ai_domain::async_task;
    |
help: if you import `async_task`, refer to it directly
    |
754 -     crate::async_task::spawn_async(async move {
754 +     async_task::spawn_async(async move {
    |

error[E0573]: expected type, found module `models`
   --> packages/provider/src/clients/openai/mod.rs:291:6
    |
291 | impl models {
    |      ^^^^^^ not a type

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:561:20
    |
561 |         if models::is_embedding_model(model) {
    |                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `cost_tier` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:680:17
    |
680 |         models::cost_tier(model)
    |                 ^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_vision` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:704:33
    |
704 |             "vision" => models::supports_vision(model),
    |                                 ^^^^^^^^^^^^^^^ not found in `models`
    |
help: consider importing this function
    |
622 +     use crate::clients::openai::vision::supports_vision;
    |
help: if you import `supports_vision`, refer to it directly
    |
704 -             "vision" => models::supports_vision(model),
704 +             "vision" => supports_vision(model),
    |

error[E0425]: cannot find function `supports_function_calling` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:705:43
    |
705 |             "function_calling" => models::supports_function_calling(model),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `supports_streaming` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:706:36
    |
706 |             "streaming" => models::supports_streaming(model),
    |                                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0425]: cannot find function `is_embedding_model` in module `models`
   --> packages/provider/src/clients/openai/mod.rs:707:36
    |
707 |             "embedding" => models::is_embedding_model(model),
    |                                    ^^^^^^^^^^^^^^^^^^ not found in `models`

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/openrouter/client.rs:160:34
    |
160 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
160 -     ) -> Result<fluent_ai_http3::Response> {
160 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/openrouter/client.rs:504:20
    |
504 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
504 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
504 -             crate::streaming::StreamingCompletionResponse<
504 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/openrouter/completion.rs:122:6
    |
122 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/openrouter/completion.rs:176:38
    |
176 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/openrouter/completion.rs:216:9
    |
216 |         CompletionModel::stream(self, completion_request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: consider importing one of these traits
    |
1   + use crate::CompletionModel;
    |
1   + use crate::domain::CompletionModel;
    |
1   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `AtomicUsize` in this scope
   --> packages/provider/src/clients/openrouter/streaming.rs:760:21
    |
760 |     current_window: AtomicUsize,
    |                     ^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
14  + use std::sync::atomic::AtomicUsize;
    |

error[E0433]: failed to resolve: use of undeclared type `AtomicUsize`
    --> packages/provider/src/clients/openrouter/streaming.rs:1230:29
     |
1230 |             current_window: AtomicUsize::new(0),
     |                             ^^^^^^^^^^^ use of undeclared type `AtomicUsize`
     |
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0412]: cannot find type `AtomicUsize` in this scope
    --> packages/provider/src/clients/openrouter/streaming.rs:1383:17
     |
1383 |     cache_size: AtomicUsize,
     |                 ^^^^^^^^^^^ not found in this scope
     |
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0433]: failed to resolve: use of undeclared type `AtomicUsize`
    --> packages/provider/src/clients/openrouter/streaming.rs:1749:25
     |
1749 |             cache_size: AtomicUsize::new(0),
     |                         ^^^^^^^^^^^ use of undeclared type `AtomicUsize`
     |
help: consider importing this struct
     |
14   + use std::sync::atomic::AtomicUsize;
     |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/perplexity/client.rs:144:34
    |
144 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
144 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
144 +     ) -> Result<Response, HttpError> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/client.rs:491:20
    |
491 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
491 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
491 -             crate::streaming::StreamingCompletionResponse<
491 +             streaming::StreamingCompletionResponse<
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/client.rs:492:24
    |
492 |                 crate::providers::openai::StreamingCompletionResponse,
    |                        ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
492 -                 crate::providers::openai::StreamingCompletionResponse,
492 +                 openai::StreamingCompletionResponse,
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/perplexity/completion.rs:107:6
    |
107 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:163:25
    |
163 |     type Error = crate::completion::MessageError;
    |                         ^^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: a similar path exists
    |
163 |     type Error = crate::fluent_ai_domain::completion::MessageError;
    |                         ++++++++++++++++++
help: consider importing this module
    |
7   + use crate::clients::azure::completion;
    |
help: if you import `completion`, refer to it directly
    |
163 -     type Error = crate::completion::MessageError;
163 +     type Error = completion::MessageError;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:172:41
    |
172 |                         _ => Err(crate::completion::MessageError::ConversionError(
    |                                         ^^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
172 |                         _ => Err(crate::fluent_ai_domain::completion::MessageError::ConversionError(
    |                                         ++++++++++++++++++
help: consider importing one of these enums
    |
7   + use crate::domain::MessageError;
    |
7   + use fluent_ai_domain::MessageError;
    |
help: if you import `MessageError`, refer to it directly
    |
172 -                         _ => Err(crate::completion::MessageError::ConversionError(
172 +                         _ => Err(MessageError::ConversionError(
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:191:52
    |
191 | ...                   _ => return Err(crate::completion::MessageError::ConversionError(
    |                                              ^^^^^^^^^^ unresolved import
    |
help: a similar path exists
    |
191 |                             _ => return Err(crate::fluent_ai_domain::completion::MessageError::ConversionError(
    |                                                    ++++++++++++++++++
help: consider importing one of these enums
    |
7   + use crate::domain::MessageError;
    |
7   + use fluent_ai_domain::MessageError;
    |
help: if you import `MessageError`, refer to it directly
    |
191 -                             _ => return Err(crate::completion::MessageError::ConversionError(
191 +                             _ => return Err(MessageError::ConversionError(
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/perplexity/completion.rs:222:38
    |
222 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
7   + use crate::CompletionModel;
    |
7   + use crate::domain::CompletionModel;
    |
7   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/completion.rs:224:37
    |
224 |     type StreamingResponse = crate::providers::openai::StreamingCompletionResponse;
    |                                     ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
224 -     type StreamingResponse = crate::providers::openai::StreamingCompletionResponse;
224 +     type StreamingResponse = openai::StreamingCompletionResponse;
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/perplexity/completion.rs:266:16
    |
266 |         crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
266 |         crate::candle_core::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |                +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
266 -         crate::streaming::StreamingCompletionResponse<Self::StreamingResponse>,
266 +         streaming::StreamingCompletionResponse<Self::StreamingResponse>,
    |

error[E0433]: failed to resolve: could not find `providers` in the crate root
   --> packages/provider/src/clients/perplexity/completion.rs:275:16
    |
275 |         crate::providers::openai::send_compatible_streaming_request(builder).await
    |                ^^^^^^^^^ could not find `providers` in the crate root
    |
help: consider importing this module
    |
7   + use crate::clients::openai;
    |
help: if you import `openai`, refer to it directly
    |
275 -         crate::providers::openai::send_compatible_streaming_request(builder).await
275 +         openai::send_compatible_streaming_request(builder).await
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:156:34
    |
156 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
156 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
156 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:171:34
    |
171 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
171 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
171 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/together/client.rs:188:34
    |
188 |     ) -> Result<fluent_ai_http3::Response, HttpError> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
188 -     ) -> Result<fluent_ai_http3::Response, HttpError> {
188 +     ) -> Result<Response, HttpError> {
    |

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/together/client.rs:561:63
    |
561 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/request.rs:18:1
    |
18  | pub struct CompletionRequest<'a> {
    | -------------------------------- similarly named struct `CompletionRequest` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
561 -             completion::CompletionResponse<super::completion::CompletionResponse>,
561 +             completion::CompletionResponse<super::completion::CompletionRequest>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
561 -             completion::CompletionResponse<super::completion::CompletionResponse>,
561 +             completion::CompletionResponse<CompletionResponse>,
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/together/client.rs:588:20
    |
588 |             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
588 |             crate::candle_core::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |

error[E0412]: cannot find type `CompletionResponse` in module `super::completion`
   --> packages/provider/src/clients/together/client.rs:588:78
    |
588 |             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
    |                                                                              ^^^^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/request.rs:18:1
    |
18  | pub struct CompletionRequest<'a> {
    | -------------------------------- similarly named struct `CompletionRequest` defined here
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: a struct with a similar name exists
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             crate::streaming::StreamingCompletionResponse<super::completion::CompletionRequest>,
    |
help: consider importing one of these structs
    |
7   + use crate::clients::mistral::completion::CompletionResponse;
    |
7   + use crate::clients::openrouter::completion::CompletionResponse;
    |
7   + use crate::clients::perplexity::completion::CompletionResponse;
    |
7   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
588 -             crate::streaming::StreamingCompletionResponse<super::completion::CompletionResponse>,
588 +             crate::streaming::StreamingCompletionResponse<CompletionResponse>,
    |

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/together/completion.rs:130:6
    |
130 | impl CompletionModel {
    |      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/candle.rs:39:1
    |
39  | pub enum CompletionCoreError {
    | ---------------------------- similarly named enum `CompletionError` defined here
    |
help: an enum with a similar name exists
    |
130 - impl CompletionModel {
130 + impl CompletionError {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:140:29
    |
140 |         completion_request: completion::CompletionRequest,
    |                             ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:142:43
    |
142 |         let mut full_history: Vec<openai::Message> = match &completion_request.preamble {
    |                                           ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
6   + use crate::clients::anthropic::Message;
    |
6   + use crate::clients::mistral::completion::Message;
    |
6   + use crate::clients::perplexity::completion::Message;
    |
6   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
142 -         let mut full_history: Vec<openai::Message> = match &completion_request.preamble {
142 +         let mut full_history: Vec<Message> = match &completion_request.preamble {
    |

error[E0433]: failed to resolve: could not find `Message` in `openai`
   --> packages/provider/src/clients/together/completion.rs:143:44
    |
143 |             Some(preamble) => vec![openai::Message::system(preamble)],
    |                                            ^^^^^^^ could not find `Message` in `openai`
    |
help: consider importing one of these items
    |
6   + use crate::clients::anthropic::Message;
    |
6   + use crate::clients::mistral::completion::Message;
    |
6   + use crate::clients::perplexity::completion::Message;
    |
6   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
143 -             Some(preamble) => vec![openai::Message::system(preamble)],
143 +             Some(preamble) => vec![Message::system(preamble)],
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:147:35
    |
147 |             let docs: Vec<openai::Message> = docs.try_into()?;
    |                                   ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
6   + use crate::clients::anthropic::Message;
    |
6   + use crate::clients::mistral::completion::Message;
    |
6   + use crate::clients::perplexity::completion::Message;
    |
6   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
147 -             let docs: Vec<openai::Message> = docs.try_into()?;
147 +             let docs: Vec<Message> = docs.try_into()?;
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:150:39
    |
150 |         let chat_history: Vec<openai::Message> = completion_request
    |                                       ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
6   + use crate::clients::anthropic::Message;
    |
6   + use crate::clients::mistral::completion::Message;
    |
6   + use crate::clients::perplexity::completion::Message;
    |
6   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
150 -         let chat_history: Vec<openai::Message> = completion_request
150 +         let chat_history: Vec<Message> = completion_request
    |

error[E0412]: cannot find type `Message` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:154:47
    |
154 |             .collect::<Result<Vec<Vec<openai::Message>>, _>>()?
    |                                               ^^^^^^^ not found in `openai`
    |
help: consider importing one of these items
    |
6   + use crate::clients::anthropic::Message;
    |
6   + use crate::clients::mistral::completion::Message;
    |
6   + use crate::clients::perplexity::completion::Message;
    |
6   + use crate::domain::Message;
    |
      and 1 other candidate
help: if you import `Message`, refer to it directly
    |
154 -             .collect::<Result<Vec<Vec<openai::Message>>, _>>()?
154 +             .collect::<Result<Vec<Vec<Message>>, _>>()?
    |

error[E0433]: failed to resolve: could not find `ToolDefinition` in `openai`
   --> packages/provider/src/clients/together/completion.rs:172:75
    |
172 |                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
    |                                                                           ^^^^^^^^^^^^^^ could not find `ToolDefinition` in `openai`
    |
note: struct `crate::clients::ollama::completion::ToolDefinition` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:403:1
    |
403 | pub struct ToolDefinition {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these items
    |
6   + use crate::clients::xai::completion::xai_api_types::ToolDefinition;
    |
6   + use crate::domain::ToolDefinition;
    |
6   + use crate::domain::completion::ToolDefinition;
    |
6   + use fluent_ai_domain::ToolDefinition;
    |
      and 1 other candidate
help: if you import `ToolDefinition`, refer to it directly
    |
172 -                 "tools": completion_request.tools.into_iter().map(openai::ToolDefinition::from).collect::<Vec<_>>(),
172 +                 "tools": completion_request.tools.into_iter().map(ToolDefinition::from).collect::<Vec<_>>(),
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:185:6
    |
185 | impl completion::CompletionModel for CompletionModel {
    |      ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::huggingface::completion;
    |
6   + use crate::clients::mistral::completion;
    |
      and 5 other candidates

error[E0412]: cannot find type `CompletionModel` in this scope
   --> packages/provider/src/clients/together/completion.rs:185:38
    |
185 | impl completion::CompletionModel for CompletionModel {
    |                                      ^^^^^^^^^^^^^^^
    |
   ::: /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/candle.rs:39:1
    |
39  | pub enum CompletionCoreError {
    | ---------------------------- similarly named enum `CompletionError` defined here
    |
help: an enum with a similar name exists
    |
185 - impl completion::CompletionModel for CompletionModel {
185 + impl completion::CompletionModel for CompletionError {
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `CompletionResponse` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:186:29
    |
186 |     type Response = openai::CompletionResponse;
    |                             ^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
6   + use crate::clients::mistral::completion::CompletionResponse;
    |
6   + use crate::clients::openrouter::completion::CompletionResponse;
    |
6   + use crate::clients::perplexity::completion::CompletionResponse;
    |
6   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
186 -     type Response = openai::CompletionResponse;
186 +     type Response = CompletionResponse;
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:187:38
    |
187 |     type StreamingResponse = openai::StreamingCompletionResponse;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
6   + use crate::clients::azure::StreamingCompletionResponse;
    |
6   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
6   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
187 -     type StreamingResponse = openai::StreamingCompletionResponse;
187 +     type StreamingResponse = StreamingCompletionResponse;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:192:29
    |
192 |         completion_request: completion::CompletionRequest,
    |                             ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::azure::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/together/completion.rs:193:17
    |
193 |     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
    |                 ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/together/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0412]: cannot find type `CompletionResponse` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:193:56
    |
193 |     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
    |                                                        ^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
6   + use crate::clients::mistral::completion::CompletionResponse;
    |
6   + use crate::clients::openrouter::completion::CompletionResponse;
    |
6   + use crate::clients::perplexity::completion::CompletionResponse;
    |
6   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
193 -     ) -> Result<completion::CompletionResponse<openai::CompletionResponse>, CompletionError> {
193 +     ) -> Result<completion::CompletionResponse<CompletionResponse>, CompletionError> {
    |

error[E0412]: cannot find type `CompletionResponse` in module `openai`
   --> packages/provider/src/clients/together/completion.rs:218:64
    |
218 |             match serde_json::from_slice::<ApiResponse<openai::CompletionResponse>>(body)? {
    |                                                                ^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::clients::ollama::completion::CompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/ollama/completion.rs:55:1
    |
55  | pub struct CompletionResponse {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
6   + use crate::clients::mistral::completion::CompletionResponse;
    |
6   + use crate::clients::openrouter::completion::CompletionResponse;
    |
6   + use crate::clients::perplexity::completion::CompletionResponse;
    |
6   + use crate::clients::xai::completion::xai_api_types::CompletionResponse;
    |
      and 2 other candidates
help: if you import `CompletionResponse`, refer to it directly
    |
218 -             match serde_json::from_slice::<ApiResponse<openai::CompletionResponse>>(body)? {
218 +             match serde_json::from_slice::<ApiResponse<CompletionResponse>>(body)? {
    |

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/together/completion.rs:239:9
    |
239 |         CompletionModel::stream(self, request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: an enum with a similar name exists
    |
239 -         CompletionModel::stream(self, request).await
239 +         CompletionError::stream(self, request).await
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0412]: cannot find type `EmbeddingModel` in this scope
  --> packages/provider/src/clients/together/embedding.rs:64:37
   |
64 | impl embeddings::EmbeddingModel for EmbeddingModel {
   |                                     ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::EmbeddingModel;
   |
6  + use crate::domain::EmbeddingModel;
   |
6  + use fluent_ai_domain::EmbeddingModel;
   |

error[E0412]: cannot find type `EmbeddingModel` in this scope
   --> packages/provider/src/clients/together/embedding.rs:128:6
    |
128 | impl EmbeddingModel {
    |      ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these traits
    |
6   + use crate::EmbeddingModel;
    |
6   + use crate::domain::EmbeddingModel;
    |
6   + use fluent_ai_domain::EmbeddingModel;
    |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/together/streaming.rs:16:53
    |
16  |     ) -> Result<StreamingCompletionResponse<openai::StreamingCompletionResponse>, CompletionError>
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
1   + use crate::clients::azure::StreamingCompletionResponse;
    |
1   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
1   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
16  -     ) -> Result<StreamingCompletionResponse<openai::StreamingCompletionResponse>, CompletionError>
16  +     ) -> Result<StreamingCompletionResponse<StreamingCompletionResponse>, CompletionError>
    |

error[E0425]: cannot find function `send_compatible_streaming_request` in module `openai`
  --> packages/provider/src/clients/together/streaming.rs:33:17
   |
33 |         openai::send_compatible_streaming_request(self.client.http_client.clone(), http_request)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`

error[E0412]: cannot find type `Response` in crate `fluent_ai_http3`
   --> packages/provider/src/clients/xai/client.rs:173:34
    |
173 |     ) -> Result<fluent_ai_http3::Response> {
    |                                  ^^^^^^^^ not found in `fluent_ai_http3`
    |
help: consider importing this struct
    |
7   + use http::Response;
    |
help: if you import `Response`, refer to it directly
    |
173 -     ) -> Result<fluent_ai_http3::Response> {
173 +     ) -> Result<Response> {
    |

error[E0433]: failed to resolve: unresolved import
   --> packages/provider/src/clients/xai/client.rs:519:20
    |
519 |             crate::streaming::StreamingCompletionResponse<
    |                    ^^^^^^^^^ unresolved import
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/groq/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::groq::streaming`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:9:1
    |
9   | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::ollama::streaming`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:51:1
    |
51  | mod streaming;
    | ^^^^^^^^^^^^^^ `crate::clients::openai::streaming`: not accessible
help: a similar path exists
    |
519 |             crate::candle_core::streaming::StreamingCompletionResponse<
    |                    +++++++++++++
help: consider importing one of these modules
    |
7   + use crate::clients::azure::streaming;
    |
7   + use crate::clients::deepseek::streaming;
    |
7   + use crate::clients::gemini::streaming;
    |
7   + use crate::clients::huggingface::streaming;
    |
      and 4 other candidates
help: if you import `streaming`, refer to it directly
    |
519 -             crate::streaming::StreamingCompletionResponse<
519 +             streaming::StreamingCompletionResponse<
    |

error[E0412]: cannot find type `CompletionModel` in this scope
  --> packages/provider/src/clients/xai/completion.rs:32:6
   |
32 | impl CompletionModel {
   |      ^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::CompletionModel;
   |
6  + use crate::domain::CompletionModel;
   |
6  + use fluent_ai_domain::CompletionModel;
   |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
  --> packages/provider/src/clients/xai/completion.rs:99:6
   |
99 | impl completion::CompletionModel for CompletionModel {
   |      ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
   |
note: these modules exist but are inaccessible
  --> packages/provider/src/clients/groq/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
   |
  ::: packages/provider/src/clients/ollama/mod.rs:8:1
   |
8  | mod completion;
   | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
  --> packages/provider/src/lib.rs:7:1
   |
7  + mod completion;
   |
help: consider importing one of these modules
   |
6  + use crate::clients::azure::completion;
   |
6  + use crate::clients::gemini::completion;
   |
6  + use crate::clients::huggingface::completion;
   |
6  + use crate::clients::mistral::completion;
   |
     and 5 other candidates

error[E0412]: cannot find type `CompletionModel` in this scope
  --> packages/provider/src/clients/xai/completion.rs:99:38
   |
99 | impl completion::CompletionModel for CompletionModel {
   |                                      ^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these traits
   |
6  + use crate::CompletionModel;
   |
6  + use crate::domain::CompletionModel;
   |
6  + use fluent_ai_domain::CompletionModel;
   |

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/xai/completion.rs:101:38
    |
101 |     type StreamingResponse = openai::StreamingCompletionResponse;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
6   + use crate::clients::azure::StreamingCompletionResponse;
    |
6   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
6   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
101 -     type StreamingResponse = openai::StreamingCompletionResponse;
101 +     type StreamingResponse = StreamingCompletionResponse;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:107:17
    |
107 |     ) -> Result<completion::CompletionResponse<CompletionResponse>, CompletionError> {
    |                 ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
6   + use crate::clients::gemini::completion;
    |
6   + use crate::clients::mistral::completion;
    |
6   + use crate::clients::openrouter::completion;
    |
6   + use crate::clients::perplexity::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of undeclared type `CompletionModel`
   --> packages/provider/src/clients/xai/completion.rs:132:9
    |
132 |         CompletionModel::stream(self, request).await
    |         ^^^^^^^^^^^^^^^ use of undeclared type `CompletionModel`
    |
help: consider importing one of these traits
    |
6   + use crate::CompletionModel;
    |
6   + use crate::domain::CompletionModel;
    |
6   + use fluent_ai_domain::CompletionModel;
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:143:42
    |
143 |     impl TryFrom<CompletionResponse> for completion::CompletionResponse {
    |                                          ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::gemini::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
137 +     use crate::clients::openrouter::completion;
    |
137 +     use crate::clients::perplexity::completion;
    |
      and 4 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:160:33
    |
160 | ...                   completion::AssistantContent::text(text)
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
160 -                                 completion::AssistantContent::text(text)
160 +                                 AssistantContent::text(text)
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:163:33
    |
163 | ...                   completion::AssistantContent::text(refusal)
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
163 -                                 completion::AssistantContent::text(refusal)
163 +                                 AssistantContent::text(refusal)
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:172:33
    |
172 | ...                   completion::AssistantContent::tool_call(
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: enum `crate::clients::huggingface::streaming::AssistantContent` exists but is inaccessible
   --> packages/provider/src/clients/huggingface/streaming.rs:16:1
    |
16  | enum AssistantContent {
    | ^^^^^^^^^^^^^^^^^^^^^ not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these items
    |
137 +     use crate::clients::mistral::completion::AssistantContent;
    |
137 +     use crate::domain::AssistantContent;
    |
137 +     use fluent_ai_domain::AssistantContent;
    |
help: if you import `AssistantContent`, refer to it directly
    |
172 -                                 completion::AssistantContent::tool_call(
172 +                                 AssistantContent::tool_call(
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:193:16
    |
193 |             Ok(completion::CompletionResponse {
    |                ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/bedrock/mod.rs:45:1
    |
45  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::bedrock::completion`: not accessible
    |
   ::: packages/provider/src/clients/groq/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::groq::completion`: not accessible
    |
   ::: packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::gemini::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
137 +     use crate::clients::openrouter::completion;
    |
137 +     use crate::clients::perplexity::completion;
    |
      and 4 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:200:15
    |
200 |     impl From<completion::ToolDefinition> for ToolDefinition {
    |               ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:201:23
    |
201 |         fn from(tool: completion::ToolDefinition) -> Self {
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `completion`
   --> packages/provider/src/clients/xai/completion.rs:212:23
    |
212 |         pub function: completion::ToolDefinition,
    |                       ^^^^^^^^^^ use of unresolved module or unlinked crate `completion`
    |
note: these modules exist but are inaccessible
   --> packages/provider/src/clients/ollama/mod.rs:8:1
    |
8   | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::ollama::completion`: not accessible
    |
   ::: packages/provider/src/clients/openai/mod.rs:47:1
    |
47  | mod completion;
    | ^^^^^^^^^^^^^^^ `crate::clients::openai::completion`: not accessible
help: to make use of source file packages/provider/src/clients/xai/completion.rs, use `mod completion` in this file to declare the module
   --> packages/provider/src/lib.rs:7:1
    |
7   + mod completion;
    |
help: consider importing one of these modules
    |
137 +     use crate::clients::anthropic::completion;
    |
137 +     use crate::clients::deepseek::completion;
    |
137 +     use crate::clients::huggingface::completion;
    |
137 +     use crate::clients::mistral::completion;
    |
      and 3 other candidates

error[E0412]: cannot find type `StreamingCompletionResponse` in module `openai`
   --> packages/provider/src/clients/xai/streaming.rs:15:53
    |
15  |     ) -> Result<StreamingCompletionResponse<openai::StreamingCompletionResponse>, CompletionError>
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: type alias `crate::clients::openai::streaming::StreamingCompletionResponse` exists but is inaccessible
   --> packages/provider/src/clients/openai/streaming.rs:784:1
    |
784 | pub type StreamingCompletionResponse = OpenAIStreamChunk;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible
help: consider importing one of these structs
    |
1   + use crate::clients::azure::StreamingCompletionResponse;
    |
1   + use crate::clients::gemini::streaming::StreamingCompletionResponse;
    |
1   + use crate::clients::openrouter::streaming::StreamingCompletionResponse;
    |
help: if you import `StreamingCompletionResponse`, refer to it directly
    |
15  -     ) -> Result<StreamingCompletionResponse<openai::StreamingCompletionResponse>, CompletionError>
15  +     ) -> Result<StreamingCompletionResponse<StreamingCompletionResponse>, CompletionError>
    |

error[E0412]: cannot find type `OpenAIProvider` in module `openai`
   --> packages/provider/src/client_factory.rs:119:23
    |
119 |     provider: openai::OpenAIProvider,
    |                       ^^^^^^^^^^^^^^ not found in `openai`

error[E0412]: cannot find type `OpenAICompletionRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:155:41
    |
155 |         let completion_request: openai::OpenAICompletionRequest =
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `OpenAICompletionBuilder`
    |
   ::: packages/provider/src/clients/openai/completion.rs:42:1
    |
42  | pub struct OpenAICompletionBuilder {
    | ---------------------------------- similarly named struct `OpenAICompletionBuilder` defined here
    |
note: struct `crate::client_factory::openai::completion::OpenAICompletionRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/completion.rs:89:1
    |
89  | pub struct OpenAICompletionRequest<'a> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `OpenAICompletionRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:181:41
    |
181 |         let completion_request: openai::OpenAICompletionRequest =
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `OpenAICompletionBuilder`
    |
   ::: packages/provider/src/clients/openai/completion.rs:42:1
    |
42  | pub struct OpenAICompletionBuilder {
    | ---------------------------------- similarly named struct `OpenAICompletionBuilder` defined here
    |
note: struct `crate::client_factory::openai::completion::OpenAICompletionRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/completion.rs:89:1
    |
89  | pub struct OpenAICompletionRequest<'a> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `OpenAIEmbeddingRequest` in module `openai`
   --> packages/provider/src/client_factory.rs:214:40
    |
214 |         let embedding_request: openai::OpenAIEmbeddingRequest =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ not found in `openai`
    |
note: struct `crate::client_factory::openai::embeddings::OpenAIEmbeddingRequest` exists but is inaccessible
   --> packages/provider/src/clients/openai/embeddings.rs:13:1
    |
13  | pub struct OpenAIEmbeddingRequest {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/anthropic/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/deepseek/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/completion_old.rs:34:62
   |
34 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
34 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/gemini_client.rs:11:62
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/gemini/gemini_types.rs:8:62
   |
8  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
8  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/groq/completion.rs:9:62
   |
9  | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
9  - use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
9  + use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/huggingface/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: struct `Usage` is private
   --> packages/provider/src/clients/mistral/completion.rs:539:62
    |
539 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
    |                                                              ^^^^^ private struct
    |
note: the struct `Usage` is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
    |
13  | use crate::usage::Usage;
    |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
    |
539 - use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage as DomainUsage};
539 + use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
    |

error[E0603]: struct `Usage` is private
  --> packages/provider/src/clients/openai/completion.rs:17:62
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                              ^^^^^ private struct
   |
note: the struct `Usage` is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
   |
13 | use crate::usage::Usage;
   |     ^^^^^^^^^^^^^^^^^^^
help: import `Usage` directly
   |
17 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, fluent_ai_domain::usage::Usage};
   |                                                              +++++++++++++++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/anthropic/client.rs:17:34
   |
17 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/anthropic/completion.rs:29:23
   |
29 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
29 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:12
   |
16 |     core::{AnthropicError, AnthropicResult, Tool},
   |            ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
16 |     core::{super::AnthropicError, AnthropicResult, Tool},
   |            +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/calculator.rs:16:28
    |
16  |     core::{AnthropicError, AnthropicResult, Tool},
    |                            ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
16  |     core::{AnthropicError, super::AnthropicResult, Tool},
    |                            +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:12
   |
15 |     core::{AnthropicError, AnthropicResult, Tool},
   |            ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
15 |     core::{super::AnthropicError, AnthropicResult, Tool},
   |            +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/file_operations.rs:15:28
    |
15  |     core::{AnthropicError, AnthropicResult, Tool},
    |                            ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
15  |     core::{AnthropicError, super::AnthropicResult, Tool},
    |                            +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:13:5
   |
13 |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
13 |     super::AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:13:21
    |
13  |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
13  |     AnthropicError, super::AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     +++++++

error[E0603]: struct import `Message` is private
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:14:5
   |
14 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     ^^^^^^^ private struct import
   |
note: the struct import `Message` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:53
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                                                     ^^^^^^^
note: ...and refers to the struct import `Message` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:35:9
   |
35 | pub use messages::*;
   |         ^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `Message` which is defined here
  --> packages/provider/src/clients/anthropic/messages.rs:21:1
   |
21 | pub struct Message {
   | ^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `Message` through the re-export
   |
14 |     super::Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     +++++++

error[E0603]: enum import `AnthropicError` is private
  --> packages/provider/src/clients/anthropic/tools/mod.rs:17:5
   |
17 |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     ^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `AnthropicError` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:20
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                    ^^^^^^^^^^^^^^
note: ...and refers to the enum import `AnthropicError` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:34:9
   |
34 | pub use error::*;
   |         ^^^^^^^^ you could import this re-export
note: ...and refers to the enum `AnthropicError` which is defined here
  --> packages/provider/src/clients/anthropic/error.rs:12:1
   |
12 | pub enum AnthropicError {
   | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicError` through the re-export
   |
17 |     super::AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
   |     +++++++

error[E0603]: type alias import `AnthropicResult` is private
   --> packages/provider/src/clients/anthropic/tools/mod.rs:17:21
    |
17  |     AnthropicError, AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     ^^^^^^^^^^^^^^^ private type alias import
    |
note: the type alias import `AnthropicResult` is defined here...
   --> packages/provider/src/clients/anthropic/tools/core.rs:18:36
    |
18  | use super::super::{AnthropicError, AnthropicResult, Message};
    |                                    ^^^^^^^^^^^^^^^
note: ...and refers to the type alias import `AnthropicResult` which is defined here...
   --> packages/provider/src/clients/anthropic/mod.rs:34:9
    |
34  | pub use error::*;
    |         ^^^^^^^^ you could import this re-export
note: ...and refers to the type alias `AnthropicResult` which is defined here
   --> packages/provider/src/clients/anthropic/error.rs:119:1
    |
119 | pub type AnthropicResult<T> = Result<T, AnthropicError>;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnthropicResult` through the re-export
    |
17  |     AnthropicError, super::AnthropicResult, ChainControl, Emitter, ErrorHandler, InvocationHandler,
    |                     +++++++

error[E0603]: struct import `Message` is private
  --> packages/provider/src/clients/anthropic/tools/mod.rs:18:5
   |
18 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     ^^^^^^^ private struct import
   |
note: the struct import `Message` is defined here...
  --> packages/provider/src/clients/anthropic/tools/core.rs:18:53
   |
18 | use super::super::{AnthropicError, AnthropicResult, Message};
   |                                                     ^^^^^^^
note: ...and refers to the struct import `Message` which is defined here...
  --> packages/provider/src/clients/anthropic/mod.rs:35:9
   |
35 | pub use messages::*;
   |         ^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `Message` which is defined here
  --> packages/provider/src/clients/anthropic/messages.rs:21:1
   |
21 | pub struct Message {
   | ^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `Message` through the re-export
   |
18 |     super::Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |     +++++++

error[E0603]: unresolved item import `EmbeddingModel` is private
  --> packages/provider/src/clients/azure/client.rs:19:24
   |
19 | use super::{embedding::EmbeddingModel, transcription::TranscriptionModel};
   |                        ^^^^^^^^^^^^^^ private unresolved item import
   |
note: the unresolved item import `EmbeddingModel` is defined here
  --> packages/provider/src/clients/azure/embedding.rs:9:5
   |
9  | use fluent_ai_domain::model::EmbeddingModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `EmbeddingModel` through the re-export
   |
19 - use super::{embedding::EmbeddingModel, transcription::TranscriptionModel};
19 + use super::{model::EmbeddingModel, transcription::TranscriptionModel};
   |

error[E0603]: unresolved item import `TranscriptionModel` is private
  --> packages/provider/src/clients/azure/client.rs:19:55
   |
19 | use super::{embedding::EmbeddingModel, transcription::TranscriptionModel};
   |                                                       ^^^^^^^^^^^^^^^^^^ private unresolved item import
   |
note: the unresolved item import `TranscriptionModel` is defined here
  --> packages/provider/src/clients/azure/transcription.rs:9:5
   |
9  | use fluent_ai_domain::model::TranscriptionModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `TranscriptionModel` through the re-export
   |
19 - use super::{embedding::EmbeddingModel, transcription::TranscriptionModel};
19 + use super::{embedding::EmbeddingModel, model::TranscriptionModel};
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/mod.rs:41:34
   |
41 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
41 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/client.rs:22:34
   |
22 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
22 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/completion.rs:26:5
   |
26 |     CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |     ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
26 |     completion::CompletionError, CompletionProvider, CompletionResponse, StreamingResponse,
   |     ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/bedrock/error.rs:17:33
   |
17 | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 - use crate::completion_provider::CompletionError;
17 + use completion::CompletionError;
   |

error[E0603]: struct `MemoryPool` is private
   --> packages/provider/src/clients/candle/mod.rs:28:23
    |
28  | pub use memory_pool::{MemoryPool, MemoryPoolManager, PoolConfig, PoolStatistics, PooledEntry};
    |                       ^^^^^^^^^^ private struct
    |
note: the struct `MemoryPool` is defined here
   --> packages/provider/src/clients/candle/memory_pool.rs:232:1
    |
232 | struct MemoryPool {
    | ^^^^^^^^^^^^^^^^^

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/deepseek/client.rs:18:27
   |
18 |     completion_provider::{CompletionError, CompletionProvider},
   |                           ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
18 |     completion_provider::{completion::CompletionError, CompletionProvider},
   |                           ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/deepseek/completion.rs:28:23
   |
28 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
28 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: unresolved item import `EmbeddingModel` is private
  --> packages/provider/src/clients/gemini/client.rs:20:23
   |
20 | use super::embedding::EmbeddingModel;
   |                       ^^^^^^^^^^^^^^ private unresolved item import
   |
note: the unresolved item import `EmbeddingModel` is defined here
  --> packages/provider/src/clients/gemini/embedding.rs:6:5
   |
6  | use fluent_ai_domain::model::EmbeddingModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `EmbeddingModel` through the re-export
   |
20 - use super::embedding::EmbeddingModel;
20 + use model::EmbeddingModel;
   |

error[E0603]: unresolved item import `TranscriptionModel` is private
  --> packages/provider/src/clients/gemini/client.rs:21:27
   |
21 | use super::transcription::TranscriptionModel;
   |                           ^^^^^^^^^^^^^^^^^^ private unresolved item import
   |
note: the unresolved item import `TranscriptionModel` is defined here
  --> packages/provider/src/clients/gemini/transcription.rs:4:5
   |
4  | use fluent_ai_domain::model::TranscriptionModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `TranscriptionModel` through the re-export
   |
21 - use super::transcription::TranscriptionModel;
21 + use model::TranscriptionModel;
   |

error[E0603]: enum import `FinishReason` is private
   --> packages/provider/src/clients/gemini/completion.rs:27:32
    |
27  |     Content, ContentCandidate, FinishReason, FunctionCall, FunctionDeclaration, FunctionResponse,
    |                                ^^^^^^^^^^^^ private enum import
    |
note: the enum import `FinishReason` is defined here...
   --> packages/provider/src/clients/gemini/gemini_types.rs:8:48
    |
8   | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
    |                                                ^^^^^^^^^^^^
note: ...and refers to the enum `FinishReason` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:110:1
    |
110 | pub enum FinishReason {
    | ^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `FinishReason` through the re-export
    |
27  |     Content, ContentCandidate, chunk::FinishReason, FunctionCall, FunctionDeclaration, FunctionResponse,
    |                                +++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/gemini/gemini_error.rs:8:33
   |
8  | use crate::completion_provider::CompletionError as ProviderError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
8  - use crate::completion_provider::CompletionError as ProviderError;
8  + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/gemini/gemini_streaming.rs:17:33
   |
17 | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
17 - use crate::completion_provider::CompletionError;
17 + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/groq/completion.rs:24:23
   |
24 |         ChunkHandler, CompletionError as ProviderCompletionError, CompletionProvider, ModelConfig,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
24 -         ChunkHandler, CompletionError as ProviderCompletionError, CompletionProvider, ModelConfig,
24 +         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig,
   |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/huggingface/client.rs:18:27
   |
18 |     completion_provider::{CompletionError, CompletionProvider},
   |                           ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
18 |     completion_provider::{completion::CompletionError, CompletionProvider},
   |                           ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/huggingface/completion.rs:28:23
   |
28 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
28 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/mistral/client.rs:21:34
   |
21 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
21 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/mistral/completion.rs:563:23
    |
563 |         ChunkHandler, CompletionError as ProviderError, CompletionProvider, ModelConfig, ModelInfo,
    |                       ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
563 -         ChunkHandler, CompletionError as ProviderError, CompletionProvider, ModelConfig, ModelInfo,
563 +         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
    |

error[E0603]: struct import `MistralCompletionBuilder` is private
   --> packages/provider/src/clients/mistral/mod.rs:6:26
    |
6   | pub use client::{Client, MistralCompletionBuilder};
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `MistralCompletionBuilder` is defined here...
   --> packages/provider/src/clients/mistral/client.rs:15:5
    |
15  | use super::completion::MistralCompletionBuilder;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `MistralCompletionBuilder` which is defined here
   --> packages/provider/src/clients/mistral/completion.rs:576:1
    |
576 | pub struct MistralCompletionBuilder {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `MistralCompletionBuilder` through the re-export
    |
6   | pub use client::{Client, completion::MistralCompletionBuilder};
    |                          ++++++++++++

error[E0603]: unresolved item import `EmbeddingModel` is private
  --> packages/provider/src/clients/mistral/mod.rs:13:21
   |
13 | pub use embedding::{EmbeddingModel, MISTRAL_EMBED};
   |                     ^^^^^^^^^^^^^^ private unresolved item import
   |
note: the unresolved item import `EmbeddingModel` is defined here
  --> packages/provider/src/clients/mistral/embedding.rs:1:5
   |
1  | use fluent_ai_domain::model::EmbeddingModel;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: import `EmbeddingModel` through the re-export
   |
13 | pub use embedding::{model::EmbeddingModel, MISTRAL_EMBED};
   |                     +++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/mod.rs:42:34
   |
42 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
42 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/client.rs:33:34
   |
33 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                  ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
33 | use crate::completion_provider::{completion::CompletionError, CompletionProvider};
   |                                  ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/openai/completion.rs:29:23
   |
29 |         ChunkHandler, CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
29 |         ChunkHandler, completion::CompletionError, CompletionProvider, ModelConfig, ModelInfo,
   |                       ++++++++++++

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/xai/completion.rs:14:60
   |
14 | use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
   |                                                            ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
14 - use crate::{clients::openai::Message, completion_provider::CompletionError, json_util};
14 + use crate::{clients::openai::Message, completion::CompletionError, json_util};
   |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/xai/completion.rs:141:37
    |
141 |     use crate::completion_provider::CompletionError;
    |                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
141 -     use crate::completion_provider::CompletionError;
141 +     use completion::CompletionError;
    |

error[E0603]: enum import `CompletionError` is private
  --> packages/provider/src/clients/xai/streaming.rs:7:33
   |
7  | use crate::completion_provider::CompletionError;
   |                                 ^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `CompletionError` is defined here...
  --> packages/provider/src/completion_provider.rs:29:9
   |
29 | pub use CompletionCoreError as CompletionError;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
  --> packages/provider/src/completion_provider.rs:13:5
   |
13 | use fluent_ai_domain::completion::CompletionCoreError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
   |
23 |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
   |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
   |
7  - use crate::completion_provider::CompletionError;
7  + use completion::CompletionError;
   |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:204:51
    |
204 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
204 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
204 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:206:54
    |
206 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
206 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
206 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:298:51
    |
298 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
298 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
298 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:304:62
    |
304 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
304 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
304 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:309:53
    |
309 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
309 -                         crate::completion_provider::CompletionError::RequestTooLarge
309 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:322:51
    |
322 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
322 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
322 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:328:62
    |
328 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
328 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
328 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:333:53
    |
333 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
333 -                         crate::completion_provider::CompletionError::RequestTooLarge
333 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:346:51
    |
346 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
346 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
346 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:352:62
    |
352 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
352 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
352 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:357:53
    |
357 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
357 -                         crate::completion_provider::CompletionError::RequestTooLarge
357 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:376:67
    |
376 |         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
    |                                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
376 -         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
376 +         F: Fn(Result<CompletionChunk, completion::CompletionError>)
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:439:73
    |
439 |         AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
    |                                                                         ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
439 -         AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
439 +         AsyncStream<Result<CompletionChunk, completion::CompletionError>>,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:440:37
    |
440 |         crate::completion_provider::CompletionError,
    |                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
440 -         crate::completion_provider::CompletionError,
440 +         completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:444:54
    |
444 |             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
444 -             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
444 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:455:54
    |
455 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
455 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?
455 +             .map_err(|_| completion::CompletionError)?
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:462:54
    |
462 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
462 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
462 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:466:52
    |
466 |                 401 => crate::completion_provider::CompletionError::AuthError,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
466 -                 401 => crate::completion_provider::CompletionError::AuthError,
466 +                 401 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:467:52
    |
467 |                 413 => crate::completion_provider::CompletionError::RequestTooLarge,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
467 -                 413 => crate::completion_provider::CompletionError::RequestTooLarge,
467 +                 413 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:468:52
    |
468 |                 429 => crate::completion_provider::CompletionError::RateLimited,
    |                                                    ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
468 -                 429 => crate::completion_provider::CompletionError::RateLimited,
468 +                 429 => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:469:50
    |
469 |                 _ => crate::completion_provider::CompletionError::HttpError,
    |                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
469 -                 _ => crate::completion_provider::CompletionError::HttpError,
469 +                 _ => completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:500:57
    |
500 | ...                   crate::completion_provider::CompletionError::StreamError,
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
500 -                             crate::completion_provider::CompletionError::StreamError,
500 +                             completion::CompletionError,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:516:69
    |
516 |     ) -> Result<GenerateContentRequest, crate::completion_provider::CompletionError> {
    |                                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
516 -     ) -> Result<GenerateContentRequest, crate::completion_provider::CompletionError> {
516 +     ) -> Result<GenerateContentRequest, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:574:54
    |
574 |     ) -> Result<Content, crate::completion_provider::CompletionError> {
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
574 -     ) -> Result<Content, crate::completion_provider::CompletionError> {
574 +     ) -> Result<Content, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:580:56
    |
580 |                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
580 -                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
580 +                     .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:602:66
    |
602 |                         .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
602 -                         .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
602 +                         .map_err(|_| completion::CompletionError)?,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:610:56
    |
610 |                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
610 -                     .ok_or(crate::completion_provider::CompletionError::ParseError)?;
610 +                     .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:623:56
    |
623 |     ) -> Result<Vec<Tool>, crate::completion_provider::CompletionError> {
    |                                                        ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
623 -     ) -> Result<Vec<Tool>, crate::completion_provider::CompletionError> {
623 +     ) -> Result<Vec<Tool>, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:635:70
    |
635 | ...                   .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
    |                                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
635 -                             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?,
635 +                             .map_err(|_| completion::CompletionError)?,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:656:62
    |
656 |     ) -> Result<CompletionChunk, crate::completion_provider::CompletionError> {
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
656 -     ) -> Result<CompletionChunk, crate::completion_provider::CompletionError> {
656 +     ) -> Result<CompletionChunk, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:659:54
    |
659 |             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
659 -             .map_err(|_| crate::completion_provider::CompletionError::ParseError)?;
659 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:664:48
    |
664 |             .ok_or(crate::completion_provider::CompletionError::ParseError)?;
    |                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
664 -             .ok_or(crate::completion_provider::CompletionError::ParseError)?;
664 +             .ok_or(completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/completion_old.rs:716:66
    |
716 | ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
716 - ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
716 + ) -> Result<GeminiCompletionBuilder, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:197:51
    |
197 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
197 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
197 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:199:54
    |
199 |             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
    |                                                      ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
199 -             .map_err(|_| crate::completion_provider::CompletionError::HttpError)?;
199 +             .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:293:51
    |
293 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
293 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
293 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:299:62
    |
299 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
299 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
299 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:304:53
    |
304 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
304 -                         crate::completion_provider::CompletionError::RequestTooLarge
304 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:317:51
    |
317 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
317 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
317 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:323:62
    |
323 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
323 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
323 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:328:53
    |
328 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
328 -                         crate::completion_provider::CompletionError::RequestTooLarge
328 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:341:51
    |
341 |     ) -> Result<Self, crate::completion_provider::CompletionError> {
    |                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
341 -     ) -> Result<Self, crate::completion_provider::CompletionError> {
341 +     ) -> Result<Self, completion::CompletionError> {
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:347:62
    |
347 |                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
    |                                                              ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
347 -                     .map_err(|_| crate::completion_provider::CompletionError::RequestTooLarge)?;
347 +                     .map_err(|_| completion::CompletionError)?;
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:352:53
    |
352 |                         crate::completion_provider::CompletionError::RequestTooLarge
    |                                                     ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
352 -                         crate::completion_provider::CompletionError::RequestTooLarge
352 +                         completion::CompletionError
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:371:67
    |
371 |         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
    |                                                                   ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
371 -         F: Fn(Result<CompletionChunk, crate::completion_provider::CompletionError>)
371 +         F: Fn(Result<CompletionChunk, completion::CompletionError>)
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:436:80
    |
436 |         crate::AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
    |                                                                                ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
436 -         crate::AsyncStream<Result<CompletionChunk, crate::completion_provider::CompletionError>>,
436 +         crate::AsyncStream<Result<CompletionChunk, completion::CompletionError>>,
    |

error[E0603]: enum import `CompletionError` is private
   --> packages/provider/src/clients/gemini/gemini_client.rs:639:66
    |
639 | ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
    |                                                                  ^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `CompletionError` is defined here...
   --> packages/provider/src/completion_provider.rs:29:9
    |
29  | pub use CompletionCoreError as CompletionError;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum import `CompletionCoreError` which is defined here...
   --> packages/provider/src/completion_provider.rs:13:5
    |
13  | use fluent_ai_domain::completion::CompletionCoreError;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `CompletionCoreError` which is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/completion/mod.rs:23:27
    |
23  |     CompletionCoreClient, CompletionCoreError, CompletionCoreRequest, CompletionCoreResponse,
    |                           ^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CompletionError` through the re-export
    |
639 - ) -> Result<GeminiCompletionBuilder, crate::completion_provider::CompletionError> {
639 + ) -> Result<GeminiCompletionBuilder, completion::CompletionError> {
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/ollama/client.rs:480:35
    |
480 |                 super::streaming::StreamingCompletionResponse,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/ollama/streaming.rs:15:37
    |
15  |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this unresolved item through its public re-export instead
    |
480 -                 super::streaming::StreamingCompletionResponse,
480 +                 crate::clients::perplexity::streaming::StreamingCompletionResponse,
    |
help: import `StreamingCompletionResponse` through the re-export
    |
480 -                 super::streaming::StreamingCompletionResponse,
480 +                 streaming::StreamingCompletionResponse,
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/ollama/completion.rs:206:41
    |
206 |     type StreamingResponse = streaming::StreamingCompletionResponse<CompletionResponse>;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/ollama/streaming.rs:15:37
    |
15  |     streaming::{RawStreamingChoice, StreamingCompletionResponse},
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this unresolved item through its public re-export instead
    |
206 |     type StreamingResponse = crate::clients::perplexity::streaming::StreamingCompletionResponse<CompletionResponse>;
    |                              ++++++++++++++++++++++++++++
help: import `StreamingCompletionResponse` through the re-export
    |
206 -     type StreamingResponse = streaming::StreamingCompletionResponse<CompletionResponse>;
206 +     type StreamingResponse = streaming::StreamingCompletionResponse;
    |

error[E0603]: struct `Usage` is private
   --> packages/provider/src/clients/openai/streaming.rs:316:75
    |
316 |             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
    |                                                                           ^^^^^ private struct
    |
note: the struct `Usage` is defined here
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:13:5
    |
13  | use crate::usage::Usage;
    |     ^^^^^^^^^^^^^^^^^^^
help: consider importing one of these structs instead
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| crate::domain::usage::Usage {
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| fluent_ai_domain::usage::Usage {
    |
help: import `Usage` directly
    |
316 -             let usage = self.usage.as_ref().map(|u| crate::domain::chunk::Usage {
316 +             let usage = self.usage.as_ref().map(|u| fluent_ai_domain::usage::Usage {
    |

error[E0603]: struct import `CompletionResponse` is private
   --> packages/provider/src/clients/xai/client.rs:492:63
    |
492 |             completion::CompletionResponse<super::completion::CompletionResponse>,
    |                                                               ^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `CompletionResponse` is defined here...
   --> packages/provider/src/clients/xai/completion.rs:8:21
    |
8   | use xai_api_types::{CompletionResponse, ToolDefinition};
    |                     ^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `CompletionResponse` which is defined here
   --> packages/provider/src/clients/xai/completion.rs:222:5
    |
222 |     pub struct CompletionResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: consider importing this struct instead
    |
492 -             completion::CompletionResponse<super::completion::CompletionResponse>,
492 +             completion::CompletionResponse<crate::clients::xai::completion::xai_api_types::CompletionResponse>,
    |
help: import `CompletionResponse` directly
    |
492 -             completion::CompletionResponse<super::completion::CompletionResponse>,
492 +             completion::CompletionResponse<clients::xai::completion::xai_api_types::CompletionResponse>,
    |

error[E0603]: unresolved item import `StreamingCompletionResponse` is private
   --> packages/provider/src/clients/xai/client.rs:520:35
    |
520 |                 super::streaming::StreamingCompletionResponse,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ private unresolved item import
    |
note: the unresolved item import `StreamingCompletionResponse` is defined here
   --> packages/provider/src/clients/xai/streaming.rs:9:5
    |
9   | use crate::streaming::StreamingCompletionResponse;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this unresolved item through its public re-export instead
    |
520 -                 super::streaming::StreamingCompletionResponse,
520 +                 crate::clients::perplexity::streaming::StreamingCompletionResponse,
    |
help: import `StreamingCompletionResponse` through the re-export
    |
520 -                 super::streaming::StreamingCompletionResponse,
520 +                 streaming::StreamingCompletionResponse,
    |

warning: unexpected `cfg` condition value: `candle`
  --> packages/provider/src/lib.rs:13:7
   |
13 | #[cfg(feature = "candle")]
   |       ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `candle` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused imports: `HttpClient` and `HttpConfig`
  --> packages/provider/src/clients/anthropic/client.rs:13:23
   |
13 | use fluent_ai_http3::{HttpClient, HttpConfig};
   |                       ^^^^^^^^^^  ^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/anthropic/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/anthropic/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/provider/src/clients/anthropic/config.rs:6:5
  |
6 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `bytes::Bytes`
 --> packages/provider/src/clients/anthropic/responses.rs:6:5
  |
6 | use bytes::Bytes;
  |     ^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> packages/provider/src/clients/anthropic/streaming.rs:6:5
  |
6 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
 --> packages/provider/src/clients/anthropic/streaming.rs:7:17
  |
7 | use std::task::{Context, Poll};
  |                 ^^^^^^^  ^^^^

warning: unused import: `Stream`
  --> packages/provider/src/clients/anthropic/streaming.rs:10:20
   |
10 | use futures_util::{Stream, StreamExt};
   |                    ^^^^^^

warning: unused import: `tokio::sync::mpsc`
  --> packages/provider/src/clients/anthropic/streaming.rs:13:5
   |
13 | use tokio::sync::mpsc;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `AnthropicCompletionRequest` and `handle_json_error`
  --> packages/provider/src/clients/anthropic/streaming.rs:16:13
   |
16 | use super::{AnthropicCompletionRequest, AnthropicResult, handle_json_error};
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^                   ^^^^^^^^^^^^^^^^^

warning: unused import: `crate::domain::chunk::CompletionChunk`
  --> packages/provider/src/clients/anthropic/streaming.rs:17:5
   |
17 | use crate::domain::chunk::CompletionChunk;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::any::TypeId`
 --> packages/provider/src/clients/anthropic/tools/core.rs:6:5
  |
6 | use std::any::TypeId;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `std::marker::PhantomData`
 --> packages/provider/src/clients/anthropic/tools/core.rs:9:5
  |
9 | use std::marker::PhantomData;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cylo`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:16:7
   |
16 | #[cfg(feature = "cylo")]
   |       ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `cylo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `json`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:10:25
   |
10 | use serde_json::{Value, json};
   |                         ^^^^

warning: unused imports: `ToolExecutionError` and `ToolRegistrationError`
  --> packages/provider/src/clients/anthropic/tools/function_calling.rs:14:58
   |
14 |     Message, ResultHandler, SchemaType, Tool, ToolError, ToolExecutionError, ToolRegistrationError,
   |                                                          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:217:11
    |
217 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:301:11
    |
301 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:316:15
    |
316 |     #[cfg(not(feature = "cylo"))]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:388:19
    |
388 |             #[cfg(feature = "cylo")]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:421:15
    |
421 |         #[cfg(feature = "cylo")]
    |               ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:451:19
    |
451 |         #[cfg(not(feature = "cylo"))]
    |                   ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cylo`
   --> packages/provider/src/clients/anthropic/tools/function_calling.rs:488:11
    |
488 |     #[cfg(feature = "cylo")]
    |           ^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `cylo` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: ambiguous glob re-exports
  --> packages/provider/src/clients/anthropic/mod.rs:29:9
   |
29 | pub use completion::*;
   |         ^^^^^^^^^^^^^ the name `CacheControl` in the type namespace is first re-exported here
...
35 | pub use messages::*;
   |         ----------- but the name `CacheControl` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> packages/provider/src/clients/anthropic/mod.rs:29:9
   |
29 | pub use completion::*;
   |         ^^^^^^^^^^^^^ the name `AnthropicStreamChunk` in the type namespace is first re-exported here
...
38 | pub use streaming::*;
   |         ------------ but the name `AnthropicStreamChunk` in the type namespace is also re-exported here

warning: unexpected `cfg` condition value: `audio`
  --> packages/provider/src/clients/azure/mod.rs:18:7
   |
18 | #[cfg(feature = "audio")]
   |       ^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `audio` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `audio`
  --> packages/provider/src/clients/azure/mod.rs:24:7
   |
24 | #[cfg(feature = "audio")]
   |       ^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `audio` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/azure/client.rs:12:29
   |
12 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/azure/client.rs:13:5
   |
13 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `audio`
   --> packages/provider/src/clients/azure/client.rs:311:11
    |
311 |     #[cfg(feature = "audio")]
    |           ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `audio` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `convert::Infallible` and `str::FromStr`
 --> packages/provider/src/clients/azure/completion.rs:9:11
  |
9 | use std::{convert::Infallible, str::FromStr};
  |           ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `Serialize`
  --> packages/provider/src/clients/azure/completion.rs:11:26
   |
11 | use serde::{Deserialize, Serialize};
   |                          ^^^^^^^^^

warning: unused import: `OneOrMany`
  --> packages/provider/src/clients/azure/completion.rs:16:5
   |
16 |     OneOrMany,
   |     ^^^^^^^^^

warning: unused import: `serde_json::json`
  --> packages/provider/src/clients/azure/embedding.rs:11:5
   |
11 | use serde_json::json;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `transcription::*`
  --> packages/provider/src/clients/azure/mod.rs:32:9
   |
32 | pub use transcription::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused imports: `CompletionClient` and `ProviderClient`
  --> packages/provider/src/clients/bedrock/mod.rs:40:21
   |
40 | use crate::client::{CompletionClient, ProviderClient};
   |                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/bedrock/client.rs:14:5
   |
14 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/bedrock/completion.rs:12:29
   |
12 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `serde_json::Value`
  --> packages/provider/src/clients/bedrock/completion.rs:19:5
   |
19 | use serde_json::Value;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `arrayvec::ArrayString`
  --> packages/provider/src/clients/bedrock/streaming.rs:12:5
   |
12 | use arrayvec::ArrayString;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/bedrock/streaming.rs:15:37
   |
15 | use fluent_ai_domain::{AsyncStream, AsyncTask};
   |                                     ^^^^^^^^^

warning: unused import: `super::regions`
   --> packages/provider/src/clients/bedrock/mod.rs:159:9
    |
159 |     use super::regions;
    |         ^^^^^^^^^^^^^^

warning: unused import: `DeviceInfo`
  --> packages/provider/src/clients/candle/client.rs:20:29
   |
20 | use super::device_manager::{DeviceInfo, DeviceManager};
   |                             ^^^^^^^^^^

warning: unused import: `PoolConfig`
  --> packages/provider/src/clients/candle/client.rs:24:45
   |
24 | use super::memory_pool::{MemoryPoolManager, PoolConfig};
   |                                             ^^^^^^^^^^

warning: unused import: `ModelState`
  --> packages/provider/src/clients/candle/client.rs:25:42
   |
25 | use super::model_repo::{ModelRepository, ModelState};
   |                                          ^^^^^^^^^^

warning: unused import: `TokenStreamer`
  --> packages/provider/src/clients/candle/client.rs:28:77
   |
28 | use super::streaming::{FinishReason, StreamingConfig, StreamingCoordinator, TokenStreamer};
   |                                                                             ^^^^^^^^^^^^^

warning: unused imports: `SpecialTokens` and `TokenizationResult`
  --> packages/provider/src/clients/candle/client.rs:29:41
   |
29 | use super::tokenizer::{CandleTokenizer, SpecialTokens, TextBuffer, TokenizationResult};
   |                                         ^^^^^^^^^^^^^              ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/provider/src/clients/candle/config.rs:7:5
  |
7 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/candle/config.rs:10:5
   |
10 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicU8`
 --> packages/provider/src/clients/candle/device_manager.rs:7:37
  |
7 | use std::sync::atomic::{AtomicBool, AtomicU8, AtomicU64, Ordering};
  |                                     ^^^^^^^^

warning: unused import: `Guard`
  --> packages/provider/src/clients/candle/device_manager.rs:10:25
   |
10 | use arc_swap::{ArcSwap, Guard};
   |                         ^^^^^

warning: unused import: `arrayvec::ArrayVec`
  --> packages/provider/src/clients/candle/device_manager.rs:11:5
   |
11 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ErrorMetrics`
  --> packages/provider/src/clients/candle/device_manager.rs:16:47
   |
16 | use super::error::{CandleError, CandleResult, ErrorMetrics, record_global_error};
   |                                               ^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/clients/candle/kv_cache.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Guard`
  --> packages/provider/src/clients/candle/model_repo.rs:13:25
   |
13 | use arc_swap::{ArcSwap, Guard};
   |                         ^^^^^

warning: unused import: `CandleDevice`
  --> packages/provider/src/clients/candle/model_repo.rs:21:21
   |
21 | use super::models::{CandleDevice, CandleModel};
   |                     ^^^^^^^^^^^^

warning: unused import: `std::borrow::Cow`
 --> packages/provider/src/clients/candle/models.rs:3:5
  |
3 | use std::borrow::Cow;
  |     ^^^^^^^^^^^^^^^^

warning: variant `Devstral_22B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:12:5
   |
12 |     Devstral_22B,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `Devstral22b`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `Mistral_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:18:5
   |
18 |     Mistral_7B,
   |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `Mistral7b`

warning: variant `CodeLlama_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:20:5
   |
20 |     CodeLlama_7B,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CodeLlama7b`

warning: variant `Phi3_Mini` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:22:5
   |
22 |     Phi3_Mini,
   |     ^^^^^^^^^ help: convert the identifier to upper camel case: `Phi3Mini`

warning: variant `Gemma_2B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:24:5
   |
24 |     Gemma_2B,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `Gemma2b`

warning: variant `Gemma_7B` should have an upper camel case name
  --> packages/provider/src/clients/candle/models.rs:26:5
   |
26 |     Gemma_7B,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `Gemma7b`

warning: unused import: `arrayvec::ArrayVec`
  --> packages/provider/src/clients/candle/streaming.rs:10:5
   |
10 | use arrayvec::ArrayVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `HttpClient` and `HttpConfig`
  --> packages/provider/src/clients/deepseek/client.rs:13:23
   |
13 | use fluent_ai_http3::{HttpClient, HttpConfig};
   |                       ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/deepseek/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/deepseek/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/gemini/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/gemini/client.rs:13:5
   |
13 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/completion_old.rs:36:24
   |
36 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/gemini/completion_old.rs:38:47
   |
38 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/gemini/embedding.rs:47:16
   |
47 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `fluent_ai_domain::chunk::CompletionChunk`
 --> packages/provider/src/clients/gemini/model_info.rs:6:5
  |
6 | use fluent_ai_domain::chunk::CompletionChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::AsyncStream`
 --> packages/provider/src/clients/gemini/model_info.rs:8:5
  |
8 | use crate::AsyncStream;
  |     ^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/gemini/transcription.rs:45:16
   |
45 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `FinishReason`
  --> packages/provider/src/clients/gemini/gemini_client.rs:11:48
   |
11 | use fluent_ai_domain::chunk::{CompletionChunk, FinishReason, Usage};
   |                                                ^^^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/gemini_client.rs:13:24
   |
13 | use fluent_ai_domain::{AsyncTask, Document, Message, spawn_async};
   |                        ^^^^^^^^^

warning: unused imports: `HttpError` and `HttpRequest`
  --> packages/provider/src/clients/gemini/gemini_client.rs:14:47
   |
14 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/provider/src/clients/gemini/gemini_client.rs:16:35
   |
16 | use tracing::{debug, error, info, warn};
   |                                   ^^^^

warning: unused import: `StreamingResponse`
  --> packages/provider/src/clients/gemini/gemini_client.rs:20:54
   |
20 | use super::gemini_streaming::{GeminiStreamProcessor, StreamingResponse};
   |                                                      ^^^^^^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> packages/provider/src/clients/gemini/gemini_error.rs:6:5
  |
6 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/gemini/gemini_streaming.rs:10:24
   |
10 | use fluent_ai_domain::{AsyncTask, chunk::CompletionChunk, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/groq/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/groq/completion.rs:12:47
   |
12 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `serde_json::Value`
 --> packages/provider/src/clients/groq/streaming.rs:8:5
  |
8 | use serde_json::Value;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `HttpClient` and `HttpConfig`
  --> packages/provider/src/clients/huggingface/client.rs:13:23
   |
13 | use fluent_ai_http3::{HttpClient, HttpConfig};
   |                       ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/huggingface/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/huggingface/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/huggingface/transcription.rs:55:16
   |
55 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `HttpClient` and `HttpConfig`
  --> packages/provider/src/clients/mistral/client.rs:13:23
   |
13 | use fluent_ai_http3::{HttpClient, HttpConfig};
   |                       ^^^^^^^^^^  ^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/mistral/completion.rs:388:16
    |
388 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/mistral/completion.rs:431:16
    |
431 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `AsyncTask`
   --> packages/provider/src/clients/mistral/completion.rs:554:24
    |
554 | use fluent_ai_domain::{AsyncTask, spawn_async};
    |                        ^^^^^^^^^

warning: unused import: `HttpError`
   --> packages/provider/src/clients/mistral/completion.rs:556:47
    |
556 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
    |                                               ^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
   --> packages/provider/src/clients/mistral/completion.rs:557:13
    |
557 | use serde::{Deserialize, Serialize};
    |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `serde_json::Value`
   --> packages/provider/src/clients/mistral/completion.rs:558:5
    |
558 | use serde_json::Value;
    |     ^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/mistral/embedding.rs:34:16
   |
34 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `fluent_ai_domain::chunk::CompletionChunk`
 --> packages/provider/src/clients/mistral/model_info.rs:8:5
  |
8 | use fluent_ai_domain::chunk::CompletionChunk;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::AsyncStream`
  --> packages/provider/src/clients/mistral/model_info.rs:10:5
   |
10 | use crate::AsyncStream;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `CompletionProvider`
  --> packages/provider/src/clients/mistral/model_info.rs:12:34
   |
12 | use crate::completion_provider::{CompletionProvider, ModelConfig, ModelInfo, ModelPrompt};
   |                                  ^^^^^^^^^^^^^^^^^^

warning: unused import: `arc_swap::ArcSwap`
  --> packages/provider/src/clients/ollama/client.rs:10:5
   |
10 | use arc_swap::ArcSwap;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/ollama/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `CompletionResponse`
  --> packages/provider/src/clients/ollama/streaming.rs:11:25
   |
11 | use super::completion::{CompletionResponse, ProviderMessage};
   |                         ^^^^^^^^^^^^^^^^^^

warning: unused imports: `CompletionClient` and `ProviderClient`
  --> packages/provider/src/clients/openai/mod.rs:41:21
   |
41 | use crate::client::{CompletionClient, ProviderClient};
   |                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `CompletionProvider`
  --> packages/provider/src/clients/openai/mod.rs:42:51
   |
42 | use crate::completion_provider::{CompletionError, CompletionProvider};
   |                                                   ^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/openai/client.rs:20:29
   |
20 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `AsyncTask`
  --> packages/provider/src/clients/openai/completion.rs:19:24
   |
19 | use fluent_ai_domain::{AsyncTask, spawn_async};
   |                        ^^^^^^^^^

warning: unused import: `HttpError`
  --> packages/provider/src/clients/openai/completion.rs:21:47
   |
21 | use fluent_ai_http3::{HttpClient, HttpConfig, HttpError, HttpRequest};
   |                                               ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/clients/openai/discovery.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `once_cell::sync::Lazy`
 --> packages/provider/src/clients/openai/discovery.rs:7:5
  |
7 | use once_cell::sync::Lazy;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> packages/provider/src/clients/openai/discovery.rs:8:13
  |
8 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `thiserror::Error`
 --> packages/provider/src/clients/openai/discovery.rs:9:5
  |
9 | use thiserror::Error;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `trace`
  --> packages/provider/src/clients/openai/discovery.rs:10:47
   |
10 | use tracing::{debug, error, info, instrument, trace, warn};
   |                                               ^^^^^

warning: unused import: `error::OpenAIError`
  --> packages/provider/src/clients/openai/discovery.rs:15:5
   |
15 |     error::OpenAIError,
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/openrouter/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/openrouter/completion.rs:180:16
    |
180 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/openrouter/completion.rs:211:16
    |
211 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `std::future::Future`
  --> packages/provider/src/clients/openrouter/streaming.rs:14:5
   |
14 | use std::future::Future;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> packages/provider/src/clients/openrouter/streaming.rs:16:5
   |
16 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> packages/provider/src/clients/openrouter/streaming.rs:19:17
   |
19 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused imports: `Duration` and `Instant`
  --> packages/provider/src/clients/openrouter/streaming.rs:20:17
   |
20 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `async_stream::stream`
  --> packages/provider/src/clients/openrouter/streaming.rs:24:5
   |
24 | use async_stream::stream;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `SmallVec` and `smallvec`
  --> packages/provider/src/clients/openrouter/streaming.rs:32:16
   |
32 | use smallvec::{SmallVec, smallvec};
   |                ^^^^^^^^  ^^^^^^^^

warning: unused imports: `AsyncStreamSender`, `AsyncStream`, and `async_stream_channel`
  --> packages/provider/src/clients/openrouter/streaming.rs:35:13
   |
35 | use crate::{AsyncStream, AsyncStreamSender, async_stream_channel};
   |             ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `futures::StreamExt`
    --> packages/provider/src/clients/openrouter/streaming.rs:1942:5
     |
1942 | use futures::StreamExt;
     |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/perplexity/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unused import: `bytes::Bytes`
  --> packages/provider/src/clients/perplexity/client.rs:12:5
   |
12 | use bytes::Bytes;
   |     ^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/perplexity/completion.rs:226:16
    |
226 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/perplexity/completion.rs:261:16
    |
261 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/together/client.rs:10:29
   |
10 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/together/completion.rs:189:16
    |
189 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/together/completion.rs:234:16
    |
234 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
  --> packages/provider/src/clients/together/embedding.rs:71:16
   |
71 |     #[cfg_attr(feature = "worker", worker::send)]
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
   = help: consider adding `worker` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `ArrayVec`
  --> packages/provider/src/clients/xai/client.rs:11:29
   |
11 | use arrayvec::{ArrayString, ArrayVec};
   |                             ^^^^^^^^

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/xai/completion.rs:103:16
    |
103 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `worker`
   --> packages/provider/src/clients/xai/completion.rs:127:16
    |
127 |     #[cfg_attr(feature = "worker", worker::send)]
    |                ^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `accelerate`, `candle-datasets`, `cuda`, `cudnn`, `default`, `desktop`, `flash-attn`, `generation`, `image`, `metal`, `mkl`, `nccl`, and `onnx`
    = help: consider adding `worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `cyrup_sugars::AsyncResult`
  --> packages/provider/src/client_factory.rs:15:5
   |
15 | use cyrup_sugars::AsyncResult;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Zeroize`
  --> packages/provider/src/security/credentials.rs:19:15
   |
19 | use zeroize::{Zeroize, ZeroizeOnDrop};
   |               ^^^^^^^

warning: unused import: `sleep`
  --> packages/provider/src/security/rotation.rs:17:39
   |
17 | use tokio::time::{Interval, interval, sleep};
   |                                       ^^^^^

warning: unused import: `warn`
  --> packages/provider/src/security/rotation.rs:18:35
   |
18 | use tracing::{debug, error, info, warn};
   |                                   ^^^^

warning: unused import: `RotationConfig`
  --> packages/provider/src/security/rotation.rs:21:63
   |
21 | use super::credentials::{CredentialManager, CredentialSource, RotationConfig};
   |                                                               ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/provider/src/client.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OneOrMany`
 --> packages/provider/src/client.rs:8:20
  |
8 | use cyrup_sugars::{OneOrMany, ZeroOneOrMany};
  |                    ^^^^^^^^^

warning: unused import: `VoiceChunk`
 --> packages/provider/src/client.rs:9:64
  |
9 | use fluent_ai_domain::chunk::{CompletionChunk, EmbeddingChunk, VoiceChunk};
  |                                                                ^^^^^^^^^^

error[E0107]: missing generics for struct `fluent_ai_domain::Tool`
  --> packages/provider/src/clients/bedrock/completion.rs:53:16
   |
53 |     tools: Vec<Tool>,
   |                ^^^^ expected 1 generic argument
   |
note: struct defined here, with 1 generic parameter: `T`
  --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/tool/core.rs:73:12
   |
73 | pub struct Tool<T> {
   |            ^^^^ -
help: add missing generic argument
   |
53 |     tools: Vec<Tool<T>>,
   |                    +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:146:24
    |
146 |     available_devices: SmallVec<[DeviceInfo; 8]>,
    |                        ^^^^^^^^ --------------- supplied 1 generic argument
    |                        |
    |                        expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
146 |     available_devices: SmallVec<[DeviceInfo; 8], N>,
    |                                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/device_manager.rs:154:23
    |
154 |     preference_order: SmallVec<[DeviceType; 4]>,
    |                       ^^^^^^^^ --------------- supplied 1 generic argument
    |                       |
    |                       expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
154 |     preference_order: SmallVec<[DeviceType; 4], N>,
    |                                               +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/error.rs:96:20
    |
96  |         available: SmallVec<[CandleDevice; 4]>,
    |                    ^^^^^^^^ ----------------- supplied 1 generic argument
    |                    |
    |                    expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
96  |         available: SmallVec<[CandleDevice; 4], N>,
    |                                              +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/kv_cache.rs:31:11
    |
31  |     keys: SmallVec<[f32; 4096]>,
    |           ^^^^^^^^ ----------- supplied 1 generic argument
    |           |
    |           expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
31  |     keys: SmallVec<[f32; 4096], N>,
    |                               +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/kv_cache.rs:33:13
    |
33  |     values: SmallVec<[f32; 4096]>,
    |             ^^^^^^^^ ----------- supplied 1 generic argument
    |             |
    |             expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
33  |     values: SmallVec<[f32; 4096], N>,
    |                                 +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/memory_pool.rs:429:20
    |
429 |     pools: ArcSwap<SmallVec<[Arc<MemoryPool>; MAX_SIZE_CLASSES]>>,
    |                    ^^^^^^^^ ----------------------------------- supplied 1 generic argument
    |                    |
    |                    expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
429 |     pools: ArcSwap<SmallVec<[Arc<MemoryPool>; MAX_SIZE_CLASSES], N>>,
    |                                                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/memory_pool.rs:431:19
    |
431 |     size_classes: SmallVec<[usize; MAX_SIZE_CLASSES]>,
    |                   ^^^^^^^^ ------------------------- supplied 1 generic argument
    |                   |
    |                   expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
431 |     size_classes: SmallVec<[usize; MAX_SIZE_CLASSES], N>,
    |                                                     +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/streaming.rs:80:21
    |
80  |     pub text_bytes: SmallVec<[u8; MAX_TOKEN_TEXT_LEN]>,
    |                     ^^^^^^^^ ------------------------ supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
80  |     pub text_bytes: SmallVec<[u8; MAX_TOKEN_TEXT_LEN], N>,
    |                                                      +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:33:13
    |
33  |     buffer: SmallVec<[u8; 1024]>,
    |             ^^^^^^^^ ---------- supplied 1 generic argument
    |             |
    |             expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
33  |     buffer: SmallVec<[u8; 1024], N>,
    |                                +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:27:21
    |
27  | pub type TokenIds = SmallVec<[u32; MAX_ENCODE_BATCH]>;
    |                     ^^^^^^^^ ----------------------- supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
27  | pub type TokenIds = SmallVec<[u32; MAX_ENCODE_BATCH], N>;
    |                                                     +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:216:21
    |
216 |     attention_mask: SmallVec<[u8; MAX_ENCODE_BATCH]>,
    |                     ^^^^^^^^ ---------------------- supplied 1 generic argument
    |                     |
    |                     expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
216 |     attention_mask: SmallVec<[u8; MAX_ENCODE_BATCH], N>,
    |                                                    +++

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/tokenizer.rs:375:19
    |
375 |     partial_utf8: SmallVec<[u8; 4]>,
    |                   ^^^^^^^^ ------- supplied 1 generic argument
    |                   |
    |                   expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
375 |     partial_utf8: SmallVec<[u8; 4], N>,
    |                                   +++

error[E0119]: conflicting implementations of trait `Drop` for type `EncryptionEngine`
   --> packages/provider/src/security/encryption.rs:49:10
    |
49  | #[derive(ZeroizeOnDrop)]
    |          ^^^^^^^^^^^^^ conflicting implementation for `EncryptionEngine`
...
274 | impl Drop for EncryptionEngine {
    | ------------------------------ first implementation here
    |
    = note: this error originates in the derive macro `ZeroizeOnDrop` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/mistral/completion.rs:179:41
    |
179 | #[derive(Debug, Deserialize, Serialize, Clone)]
    |                                         ^^^^^ `fluent_ai_domain::ToolDefinition` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/gemini/gemini_types.rs:519:10
    |
519 | #[derive(Debug, Deserialize)]
    |          ^^^^^ `fluent_ai_domain::FinishReason` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/mistral/completion.rs:179:10
    |
179 | #[derive(Debug, Deserialize, Serialize, Clone)]
    |          ^^^^^ `fluent_ai_domain::ToolDefinition` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/mistral/completion.rs:179:30
    |
179 | #[derive(Debug, Deserialize, Serialize, Clone)]
    |                              ^^^^^^^^^
180 | pub struct ToolDefinition {
    |            -------------- `fluent_ai_domain::ToolDefinition` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead
    = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/gemini/gemini_types.rs:519:17
    |
519 | #[derive(Debug, Deserialize)]
    |                 ^^^^^^^^^^^
520 | #[serde(rename_all = "SCREAMING_SNAKE_CASE")]
521 | pub enum FinishReason {
    |          ------------ `fluent_ai_domain::FinishReason` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/mistral/completion.rs:179:17
    |
179 | #[derive(Debug, Deserialize, Serialize, Clone)]
    |                 ^^^^^^^^^^^
180 | pub struct ToolDefinition {
    |            -------------- `fluent_ai_domain::ToolDefinition` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied
   --> packages/provider/src/clients/candle/generation.rs:26:25
    |
26  | pub type LogitsBuffer = SmallVec<[f32; SAMPLING_CACHE_SIZE]>;
    |                         ^^^^^^^^ -------------------------- supplied 1 generic argument
    |                         |
    |                         expected 2 generic arguments
    |
note: struct defined here, with 2 generic parameters: `T`, `N`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-2.0.0-alpha.11/src/lib.rs:302:12
    |
302 | pub struct SmallVec<T, const N: usize> {
    |            ^^^^^^^^ -  --------------
help: add missing generic argument
    |
26  | pub type LogitsBuffer = SmallVec<[f32; SAMPLING_CACHE_SIZE], N>;
    |                                                            +++

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:61:67
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> AsyncStream<CompletionChunk>;
   |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `impl AsyncStream<CompletionChunk>` to return an opaque type, as long as you return a single underlying type
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> impl AsyncStream<CompletionChunk>;
   |                                                                   ++++
help: alternatively, you can return an owned trait object
   |
61 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> Box<dyn AsyncStream<CompletionChunk>>;
   |                                                                   +++++++                             +

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:73:27
   |
73 |     ) -> AsyncTask<Result<AsyncStream<Self::StreamingResponse>, Self::Error>>;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: you can add the `dyn` keyword if you want a trait object
   |
73 |     ) -> AsyncTask<Result<dyn AsyncStream<Self::StreamingResponse>, Self::Error>>;
   |                           +++

error[E0782]: expected a type, found a trait
  --> packages/provider/src/client.rs:94:60
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> AsyncStream<EmbeddingChunk>;
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `impl AsyncStream<EmbeddingChunk>` to return an opaque type, as long as you return a single underlying type
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> impl AsyncStream<EmbeddingChunk>;
   |                                                            ++++
help: alternatively, you can return an owned trait object
   |
94 |     fn embed_batch(&self, texts: ZeroOneOrMany<String>) -> Box<dyn AsyncStream<EmbeddingChunk>>;
   |                                                            +++++++                            +

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/azure/client.rs:39:45
    |
39  |     pub fn api_key(key: impl AsRef<str>) -> Result<Self, AzureError> {
    |                                             ^^^^^^     ------------ help: remove the unnecessary generic argument
    |                                             |
    |                                             expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/azure/client.rs:120:10
    |
120 | pub type Result<T> = std::result::Result<T, AzureError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/azure/client.rs:59:45
    |
59  |     pub fn token(token: impl AsRef<str>) -> Result<Self, AzureError> {
    |                                             ^^^^^^     ------------ help: remove the unnecessary generic argument
    |                                             |
    |                                             expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/azure/client.rs:120:10
    |
120 | pub type Result<T> = std::result::Result<T, AzureError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/gemini/client.rs:540:32
    |
540 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/gemini/client.rs:95:10
    |
95  | pub type Result<T> = std::result::Result<T, GeminiError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/gemini/client.rs:662:47
    |
662 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/gemini/client.rs:95:10
    |
95  | pub type Result<T> = std::result::Result<T, GeminiError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/gemini/client.rs:662:54
    |
662 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `clients::gemini::client::GeminiCompletionBuilder<'a, clients::gemini::client::NeedsPrompt>`, you could use the fully-qualified path
    |
662 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
662 +     fn prompt(self, prompt: impl ToString) -> Result<<clients::gemini::client::GeminiCompletionBuilder<'a, clients::gemini::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/groq/client.rs:468:54
    |
468 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `clients::groq::client::GroqCompletionBuilder<'a, clients::groq::client::NeedsPrompt>`, you could use the fully-qualified path
    |
468 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
468 +     fn prompt(self, prompt: impl ToString) -> Result<<clients::groq::client::GroqCompletionBuilder<'a, clients::groq::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/ollama/client.rs:392:32
    |
392 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/ollama/client.rs:84:10
    |
84  | pub type Result<T> = std::result::Result<T, OllamaError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/ollama/client.rs:511:47
    |
511 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/ollama/client.rs:84:10
    |
84  | pub type Result<T> = std::result::Result<T, OllamaError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/ollama/client.rs:511:54
    |
511 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `OllamaCompletionBuilder<'a, ollama::client::NeedsPrompt>`, you could use the fully-qualified path
    |
511 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
511 +     fn prompt(self, prompt: impl ToString) -> Result<<OllamaCompletionBuilder<'a, ollama::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/openrouter/client.rs:420:32
    |
420 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/openrouter/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, OpenRouterError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/openrouter/client.rs:536:47
    |
536 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/openrouter/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, OpenRouterError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/openrouter/client.rs:536:54
    |
536 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `OpenRouterCompletionBuilder<'a, openrouter::client::NeedsPrompt>`, you could use the fully-qualified path
    |
536 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
536 +     fn prompt(self, prompt: impl ToString) -> Result<<OpenRouterCompletionBuilder<'a, openrouter::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/perplexity/client.rs:523:54
    |
523 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `PerplexityCompletionBuilder<'a, clients::perplexity::client::NeedsPrompt>`, you could use the fully-qualified path
    |
523 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
523 +     fn prompt(self, prompt: impl ToString) -> Result<<PerplexityCompletionBuilder<'a, clients::perplexity::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/together/client.rs:618:54
    |
618 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `TogetherCompletionBuilder<'a, together::client::NeedsPrompt>`, you could use the fully-qualified path
    |
618 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
618 +     fn prompt(self, prompt: impl ToString) -> Result<<TogetherCompletionBuilder<'a, together::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/xai/client.rs:433:32
    |
433 |     fn build_request(&self) -> Result<CompletionRequest, PromptError> {
    |                                ^^^^^^                  ------------- help: remove the unnecessary generic argument
    |                                |
    |                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/xai/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, XAIError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/xai/client.rs:551:47
    |
551 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                               ^^^^^^                      ------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/xai/client.rs:86:10
    |
86  | pub type Result<T> = std::result::Result<T, XAIError>;
    |          ^^^^^^ -

error[E0223]: ambiguous associated type
   --> packages/provider/src/clients/xai/client.rs:551:54
    |
551 |     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `PromptedBuilder` implemented for `XAICompletionBuilder<'a, clients::xai::client::NeedsPrompt>`, you could use the fully-qualified path
    |
551 -     fn prompt(self, prompt: impl ToString) -> Result<Self::PromptedBuilder, PromptError> {
551 +     fn prompt(self, prompt: impl ToString) -> Result<<XAICompletionBuilder<'a, clients::xai::client::NeedsPrompt> as Example>::PromptedBuilder, PromptError> {
    |

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> packages/provider/src/clients/gemini/gemini_types.rs:920:1
    |
920 | impl From<FinishReason> for fluent_ai_domain::chunk::FinishReason {
    | ^^^^^------------------^^^^^-------------------------------------
    |      |                      |
    |      |                      `fluent_ai_domain::FinishReason` is not defined in the current crate
    |      `fluent_ai_domain::FinishReason` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0599]: no function or associated item named `post` found for struct `HttpRequest` in the current scope
   --> packages/provider/src/clients/anthropic/completion.rs:541:36
    |
541 |         let request = HttpRequest::post(&format!("{}/v1/messages", self.base_url), body_bytes)
    |                                    ^^^^ function or associated item not found in `HttpRequest`
    |
note: if you're trying to build a new `HttpRequest`, consider using `HttpRequest::new` which returns `HttpRequest`
   --> /Volumes/samsung_t9/fluent-ai/packages/http3/src/request.rs:35:5
    |
35  |     pub fn new(method: HttpMethod, url: String) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/bedrock/client.rs:230:44
    |
230 |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
    |                                            ^^^^^^   ------------------------------------------ help: remove the unnecessary generic argument
    |                                            |
    |                                            expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/bedrock/error.rs:20:10
    |
20  | pub type Result<T> = std::result::Result<T, BedrockError>;
    |          ^^^^^^ -

error[E0053]: method `test_connection` has an incompatible type for trait
   --> packages/provider/src/clients/bedrock/client.rs:230:34
    |
230 |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error + Send + Sync>`, found `BedrockError`
    |
note: type in trait
   --> packages/provider/src/client.rs:39:34
    |
39  |     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>>;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&BedrockClient) -> tokio::task::JoinHandle<std::result::Result<_, Box<(dyn StdError + std::marker::Send + Sync + 'static)>>>`
               found signature `fn(&BedrockClient) -> tokio::task::JoinHandle<std::result::Result<_, BedrockError>>`
help: change the output type to match the trait
    |
230 -     fn test_connection(&self) -> AsyncTask<Result<(), Box<dyn std::error::Error + Send + Sync>>> {
230 +     fn test_connection(&self) -> tokio::task::JoinHandle<std::result::Result<(), Box<(dyn StdError + std::marker::Send + Sync + 'static)>>> {
    |

error[E0049]: method `prompt` has 0 type parameters but its trait declaration has 1 type parameter
   --> packages/provider/src/clients/bedrock/completion.rs:389:14
    |
389 |     fn prompt(&self, prompt: fluent_ai_domain::prompt::Prompt) -> AsyncStream<CompletionChunk> {
    |              ^ found 0 type parameters
    |
   ::: packages/provider/src/completion_provider.rs:133:27
    |
133 |     fn prompt(self, text: impl AsRef<str>) -> AsyncStream<CompletionChunk>;
    |                           ---------------
    |                           |
    |                           expected 1 type parameter
    |                           `impl Trait` introduces an implicit type parameter

error[E0046]: not all trait items implemented, missing: `new`, `api_key`, `system_prompt`, `temperature`, `max_tokens`, `top_p`, `frequency_penalty`, `presence_penalty`, `chat_history`, `documents`, `tools`, `additional_params`, `on_chunk`
   --> packages/provider/src/clients/bedrock/completion.rs:384:1
    |
384 |   impl CompletionProvider for BedrockCompletionBuilder {
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `new`, `api_key`, `system_prompt`, `temperature`, `max_tokens`, `top_p`, `frequency_penalty`, `presence_penalty`, `chat_history`, `documents`, `tools`, `additional_params`, `on_chunk` in implementation
    |
   ::: packages/provider/src/completion_provider.rs:76:5
    |
76  |       fn new(api_key: String, model_name: &'static str) -> Result<Self, CompletionError>;
    |       ----------------------------------------------------------------------------------- `new` from trait
...
79  |       fn api_key(self, key: impl Into<String>) -> Self;
    |       ------------------------------------------------- `api_key` from trait
...
90  |       fn system_prompt(self, prompt: impl Into<String>) -> Self;
    |       ---------------------------------------------------------- `system_prompt` from trait
...
93  |       fn temperature(self, temp: f64) -> Self;
    |       ---------------------------------------- `temperature` from trait
...
96  |       fn max_tokens(self, tokens: u32) -> Self;
    |       ----------------------------------------- `max_tokens` from trait
...
99  |       fn top_p(self, p: f64) -> Self;
    |       ------------------------------- `top_p` from trait
...
102 |       fn frequency_penalty(self, penalty: f64) -> Self;
    |       ------------------------------------------------- `frequency_penalty` from trait
...
105 |       fn presence_penalty(self, penalty: f64) -> Self;
    |       ------------------------------------------------ `presence_penalty` from trait
...
108 |       fn chat_history(self, history: ZeroOneOrMany<Message>) -> Result<Self, CompletionError>;
    |       ---------------------------------------------------------------------------------------- `chat_history` from trait
...
111 |       fn documents(self, docs: ZeroOneOrMany<Document>) -> Result<Self, CompletionError>;
    |       ----------------------------------------------------------------------------------- `documents` from trait
...
114 |       fn tools(self, tools: ZeroOneOrMany<ToolDefinition>) -> Result<Self, CompletionError>;
    |       -------------------------------------------------------------------------------------- `tools` from trait
...
117 |       fn additional_params(self, params: Value) -> Self;
    |       -------------------------------------------------- `additional_params` from trait
...
127 | /     fn on_chunk<F>(self, handler: F) -> Self
128 | |     where
129 | |         F: Fn(Result<CompletionChunk, CompletionError>) + Send + Sync + 'static;
    | |________________________________________________________________________________- `on_chunk` from trait

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> packages/provider/src/clients/candle/client.rs:719:17
    |
719 |         prompt: Prompt<'a>,
    |                 ^^^^^^---- help: remove the unnecessary generics
    |                 |
    |                 expected 0 lifetime arguments
    |
note: struct defined here, with 0 lifetime parameters
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/prompt.rs:6:12
    |
6   | pub struct Prompt {
    |            ^^^^^^

error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> packages/provider/src/clients/candle/client.rs:721:22
    |
721 |     ) -> AsyncStream<CompletionChunk<'a>> {
    |                      ^^^^^^^^^^^^^^^---- help: remove the unnecessary generics
    |                      |
    |                      expected 0 lifetime arguments
    |
note: enum defined here, with 0 lifetime parameters
   --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:10
    |
121 | pub enum CompletionChunk {
    |          ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1007:25
     |
1007 | impl ProviderClient for CandleCompletionClient {
     |                         ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `ProviderClient`
    --> packages/provider/src/client.rs:34:41
     |
34   | pub trait ProviderClient: Send + Sync + Clone {
     |                                         ^^^^^ required by this bound in `ProviderClient`

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1039:5
     |
1039 |     fn completion_model(&self, model: &str) -> Self::Model {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `CompletionClient`
    --> packages/provider/src/client.rs:13:43
     |
13   | pub trait CompletionClient: Send + Sync + Clone {
     |                                           ^^^^^ required by this bound in `CompletionClient`

error[E0277]: the trait bound `CandleCompletionClient: Clone` is not satisfied
    --> packages/provider/src/clients/candle/client.rs:1036:27
     |
1036 | impl CompletionClient for CandleCompletionClient {
     |                           ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CandleCompletionClient`
     |
note: required by a bound in `CompletionClient`
    --> packages/provider/src/client.rs:13:43
     |
13   | pub trait CompletionClient: Send + Sync + Clone {
     |                                           ^^^^^ required by this bound in `CompletionClient`

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
    --> packages/provider/src/clients/candle/client.rs:1098:17
     |
1098 |         prompt: Prompt<'a>,
     |                 ^^^^^^---- help: remove the unnecessary generics
     |                 |
     |                 expected 0 lifetime arguments
     |
note: struct defined here, with 0 lifetime parameters
    --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/prompt.rs:6:12
     |
6    | pub struct Prompt {
     |            ^^^^^^

error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied
    --> packages/provider/src/clients/candle/client.rs:1100:22
     |
1100 |     ) -> AsyncStream<CompletionChunk<'a>> {
     |                      ^^^^^^^^^^^^^^^---- help: remove the unnecessary generics
     |                      |
     |                      expected 0 lifetime arguments
     |
note: enum defined here, with 0 lifetime parameters
    --> /Volumes/samsung_t9/fluent-ai/packages/domain/src/context/chunk.rs:121:10
     |
121  | pub enum CompletionChunk {
     |          ^^^^^^^^^^^^^^^

error[E0053]: method `info` has an incompatible type for trait
  --> packages/provider/src/clients/candle/models.rs:30:23
   |
30 |     fn info(&self) -> ModelInfo {
   |                       ^^^^^^^^^ expected `&'static fluent_ai_domain::ModelInfo`, found `fluent_ai_domain::ModelInfo`
   |
   = note: expected signature `fn(&CandleModel) -> &'static fluent_ai_domain::ModelInfo`
              found signature `fn(&CandleModel) -> fluent_ai_domain::ModelInfo`
help: change the output type to match the trait
   |
30 |     fn info(&self) -> &'static fluent_ai_domain::ModelInfo {
   |                       +++++++++++++++++++++++++++

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> packages/provider/src/clients/openai/mod.rs:634:47
    |
634 |     pub fn validate_api_key(api_key: &str) -> Result<(), ArrayString<64>> {
    |                                               ^^^^^^   ----------------- help: remove the unnecessary generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> packages/provider/src/clients/openai/error.rs:27:10
    |
27  | pub type Result<T> = std::result::Result<T, OpenAIError>;
    |          ^^^^^^ -

error[E0053]: method `test_connection` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:127:5
    |
127 |     async fn test_connection(&self) -> ClientFactoryResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `JoinHandle<Result<(), ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:90:34
    |
90  |     fn test_connection(&self) -> crate::AsyncTask<ClientFactoryResult<()>>;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&OpenAIUnifiedClient) -> tokio::task::JoinHandle<std::result::Result<(), ClientFactoryError>>`
               found signature `fn(&OpenAIUnifiedClient) -> impl futures_util::Future<Output = std::result::Result<(), ClientFactoryError>>`

error[E0053]: method `get_models` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:138:5
    |
138 |     async fn get_models(&self) -> ClientFactoryResult<Vec<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `JoinHandle<Result<Vec<String>, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:93:29
    |
93  |     fn get_models(&self) -> crate::AsyncTask<ClientFactoryResult<Vec<String>>>;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&OpenAIUnifiedClient) -> tokio::task::JoinHandle<std::result::Result<Vec<std::string::String>, ClientFactoryError>>`
               found signature `fn(&OpenAIUnifiedClient) -> impl futures_util::Future<Output = std::result::Result<Vec<std::string::String>, ClientFactoryError>>`

error[E0053]: method `send_completion` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:151:5
    |
151 | /     async fn send_completion(
152 | |         &self,
153 | |         request: &serde_json::Value,
154 | |     ) -> ClientFactoryResult<serde_json::Value> {
    | |_______________________________________________^ expected `JoinHandle<Result<Value, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:99:10
    |
99  |     ) -> crate::AsyncTask<ClientFactoryResult<serde_json::Value>>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<serde_json::Value, ClientFactoryError>>`
               found signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<serde_json::Value, ClientFactoryError>>`

error[E0053]: method `send_streaming_completion` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:175:5
    |
175 | /     async fn send_streaming_completion(
176 | |         &self,
177 | |         request: &serde_json::Value,
178 | |     ) -> ClientFactoryResult<
179 | |         Box<dyn futures::Stream<Item = ClientFactoryResult<serde_json::Value>> + Send + Unpin>,
180 | |     > {
    | |_____^ expected `JoinHandle<Result<..., ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:105:10
    |
105 |       ) -> crate::AsyncTask<
    |  __________^
106 | |         ClientFactoryResult<crate::AsyncStream<ClientFactoryResult<serde_json::Value>>>,
107 | |     >;
    | |_____^
    = note: expected signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<UnboundedReceiverStream<std::result::Result<serde_json::Value, ClientFactoryError>>, ClientFactoryError>>`
               found signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<Box<(dyn Stream<Item = std::result::Result<serde_json::Value, ClientFactoryError>> + std::marker::Send + Unpin + 'static)>, ClientFactoryError>>`

error[E0053]: method `send_embedding` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:210:5
    |
210 | /     async fn send_embedding(
211 | |         &self,
212 | |         request: &serde_json::Value,
213 | |     ) -> ClientFactoryResult<serde_json::Value> {
    | |_______________________________________________^ expected `JoinHandle<Result<Value, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:113:10
    |
113 |     ) -> crate::AsyncTask<ClientFactoryResult<serde_json::Value>>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<serde_json::Value, ClientFactoryError>>`
               found signature `fn(&OpenAIUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<serde_json::Value, ClientFactoryError>>`

error[E0053]: method `test_connection` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:271:5
    |
271 |     async fn test_connection(&self) -> ClientFactoryResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `JoinHandle<Result<(), ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:90:34
    |
90  |     fn test_connection(&self) -> crate::AsyncTask<ClientFactoryResult<()>>;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&AnthropicUnifiedClient) -> tokio::task::JoinHandle<std::result::Result<(), ClientFactoryError>>`
               found signature `fn(&AnthropicUnifiedClient) -> impl futures_util::Future<Output = std::result::Result<(), ClientFactoryError>>`

error[E0053]: method `get_models` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:282:5
    |
282 |     async fn get_models(&self) -> ClientFactoryResult<Vec<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `JoinHandle<Result<Vec<String>, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:93:29
    |
93  |     fn get_models(&self) -> crate::AsyncTask<ClientFactoryResult<Vec<String>>>;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&AnthropicUnifiedClient) -> tokio::task::JoinHandle<std::result::Result<Vec<std::string::String>, ClientFactoryError>>`
               found signature `fn(&AnthropicUnifiedClient) -> impl futures_util::Future<Output = std::result::Result<Vec<std::string::String>, ClientFactoryError>>`

error[E0053]: method `send_completion` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:293:5
    |
293 | /     async fn send_completion(
294 | |         &self,
295 | |         request: &serde_json::Value,
296 | |     ) -> ClientFactoryResult<serde_json::Value> {
    | |_______________________________________________^ expected `JoinHandle<Result<Value, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:99:10
    |
99  |     ) -> crate::AsyncTask<ClientFactoryResult<serde_json::Value>>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<serde_json::Value, ClientFactoryError>>`
               found signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<serde_json::Value, ClientFactoryError>>`

error[E0053]: method `send_streaming_completion` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:317:5
    |
317 | /     async fn send_streaming_completion(
318 | |         &self,
319 | |         request: &serde_json::Value,
320 | |     ) -> ClientFactoryResult<
321 | |         Box<dyn futures::Stream<Item = ClientFactoryResult<serde_json::Value>> + Send + Unpin>,
322 | |     > {
    | |_____^ expected `JoinHandle<Result<..., ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:105:10
    |
105 |       ) -> crate::AsyncTask<
    |  __________^
106 | |         ClientFactoryResult<crate::AsyncStream<ClientFactoryResult<serde_json::Value>>>,
107 | |     >;
    | |_____^
    = note: expected signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<UnboundedReceiverStream<std::result::Result<serde_json::Value, ClientFactoryError>>, ClientFactoryError>>`
               found signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<Box<(dyn Stream<Item = std::result::Result<serde_json::Value, ClientFactoryError>> + std::marker::Send + Unpin + 'static)>, ClientFactoryError>>`

error[E0053]: method `send_embedding` has an incompatible type for trait
   --> packages/provider/src/client_factory.rs:352:5
    |
352 | /     async fn send_embedding(
353 | |         &self,
354 | |         _request: &serde_json::Value,
355 | |     ) -> ClientFactoryResult<serde_json::Value> {
    | |_______________________________________________^ expected `JoinHandle<Result<Value, ...>>`, found future
    |
note: type in trait
   --> packages/provider/src/client_factory.rs:113:10
    |
113 |     ) -> crate::AsyncTask<ClientFactoryResult<serde_json::Value>>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> tokio::task::JoinHandle<std::result::Result<serde_json::Value, ClientFactoryError>>`
               found signature `fn(&AnthropicUnifiedClient, &serde_json::Value) -> impl futures_util::Future<Output = std::result::Result<serde_json::Value, ClientFactoryError>>`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:413:26
    |
413 |         let (tx, task) = runtime::channel();
    |                          ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:418:17
    |
418 |                 runtime::spawn_async(async move {
    |                 ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:442:26
    |
442 |         let (tx, task) = runtime::channel();
    |                          ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `runtime`
   --> packages/provider/src/clients/groq/client.rs:447:17
    |
447 |                 runtime::spawn_async(async move {
    |                 ^^^^^^^ use of unresolved module or unlinked crate `runtime`
    |
    = help: if you wanted to use a crate named `runtime`, use `cargo add runtime` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reqwest`
  --> packages/provider/src/client_factory.rs:40:17
   |
40 |         source: reqwest::Error,
   |                 ^^^^^^^ use of unresolved module or unlinked crate `reqwest`
   |
   = help: if you wanted to use a crate named `reqwest`, use `cargo add reqwest` to add it to your `Cargo.toml`

Some errors have detailed explanations: E0046, E0049, E0053, E0106, E0107, E0117, E0119, E0223, E0252...
For more information about an error, try `rustc --explain E0046`.
warning: `fluent_ai_provider` (lib) generated 145 warnings
warning: fluent_ai_provider@0.1.0: Build script simplified to unblock compilation
error: could not compile `fluent_ai_provider` (lib) due to 646 previous errors; 145 warnings emitted
